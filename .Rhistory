recruiter_employee_num = get_recruiter(first_contact_date, desk_id_start_date))
recruiting_sql <- paste(
"INSERT INTO recruiting (employee_num, recruiting_source, first_contact_date, recruiter_employee_num) VALUES ",
paste0(
"('",
recruiting_table$employee_num, "','",
recruiting_table$recruiting_source, "','",
recruiting_table$first_contact_date, "','",
recruiting_table$recruiter_employee_num, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, recruiting_sql)
deskhistory_table %>% filter(desk_id_end_date == as.Date("2099-01-01")) %>% nrow()
deskhistory_table %>% filter(desk_id_end_date == as.Date("2099-12-31")) %>% nrow()
deskhistory_table %>% filter(desk_id_end_date == as.Date("2999-01-01")) %>% nrow()
deskhistory_table %>% filter(desk_id_end_date == as.Date("2999-01-01")) %>% count(termination_flag)
source('C:/Development/github/sample-hr-database/02_variables.R')
source('C:/Development/github/sample-hr-database/02_variables.R')
fix_end_date_of_hierarchy_sql <- paste0("UPDATE deskhistory SET termination_flag = 0 WHERE desk_id_end_date = '",
end_date_of_hierarchy, "'")
fix_end_date_of_hierarchy_sql
fix_end_date_of_hierarchy_sql <- paste0("UPDATE deskhistory SET termination_flag = 0 WHERE desk_id_end_date > '",
end_date_of_hierarchy, "'")
fix_end_date_of_hierarchy_sql
dbExecute(HRSAMPLE, fix_end_date_of_hierarchy_sql)
source("05_initialize_employee_desk_history.R")
source("06_grow_employee_desk_history.R")
source("03_positions_and_org.R")
source("04_employee_info.R")
source("05_initialize_employee_desk_history.R")
source("06_grow_employee_desk_history.R")
2+2
source("03_positions_and_org.R")
source("04_employee_info.R")
source("05_initialize_employee_desk_history.R")
source("06_grow_employee_desk_history.R")
oldnewhires2002 <- newhires2002 %>%
left_join(deskjob_table) %>%
count(job_name) %>%
mutate(pct_jobs_new_hire = n/sum(n)) %>%
left_join(count(deskjob_table, job_name) %>% arrange(desc(n)) %>% mutate(pct = n/sum(n)) %>% rename(overalljobcount = n))
View(error_log)
deskhistory %>% filter(desk_id == 582)
deskhistory_table %>% filter(desk_id == 582)
deskhistory_table %>% filter(desk_id_end_date == as.Date("2999-01-01"))
deskhistory_table %>% filter(desk_id_end_date == as.Date("2999-01-01")) %>% nrow()
# Clean up employees that have no job but didn't term ---------------------
# Count of TMs that had max date before as.Date("2999-01-01") but did not terminate by month
# These need to terminate
employees_to_add_terms <- deskhistory_table %>%
group_by(employee_num) %>%
summarize(last_day = max(desk_id_end_date),
term_flag = max(termination_flag)) %>%
filter(last_day < loop_date - 90,
term_flag == 0) %>%
select(-term_flag)
employees_to_add_terms <- deskhistory_table %>%
group_by(employee_num) %>%
summarize(last_day = max(desk_id_end_date),
term_flag = max(termination_flag))
# Clean up employees that have no job but didn't term ---------------------
# Count of TMs that had max date before as.Date("2999-01-01") but did not terminate by month
# These need to terminate
employees_to_add_terms <- deskhistory_table %>%
group_by(employee_num) %>%
summarize(last_day = max(desk_id_end_date),
term_flag = max(termination_flag)) %>%
filter(last_day < end_date_of_hierarchy - 90,
term_flag == 0) %>%
select(-term_flag)
# Terminate their most recent desk_history row
deskhistory_table <- deskhistory_table %>%
left_join(employees_to_add_terms) %>%
mutate(termination_flag = case_when(last_day == desk_id_end_date ~ 1,
TRUE ~ termination_flag)) %>%
select(-last_day)
#check
bob <- deskhistory_table %>%
filter(desk_id_end_date > (loop_date - 90)) %>%
count(desk_id) %>%
filter(n > 1) %>%
left_join(deskhistory_table) %>%
arrange(desk_id)
#check
bob <- deskhistory_table %>%
filter(desk_id_end_date > (loop_date - 90)) %>%
count(desk_id) %>%
filter(n > 1) %>%
left_join(deskhistory_table) %>%
arrange(desk_id)
df <- dbGetQuery(HRSAMPLE, "select * from deskhistory")
df %>% count(termination_flag)
df %>% filter(desk_id_end_date > end_date_of_hierarchy) %>% count(termination_flag)
employees_to_add_terms <- deskhistory_table %>%
group_by(employee_num) %>%
summarize(last_day = max(desk_id_end_date),
term_flag = max(termination_flag))
deskhistory_table == df
table(deskhistory_table == df)
aa <- (deskhistory_table == df)
aa <- tibble(deskhistory_table == df, num = seq(1:length(aa)))
aa <- tibble(val = (deskhistory_table == df), num = seq(1:length(aa)))
aa <- tibble(val = (deskhistory_table == df), num = seq(1:length((deskhistory_table == df))))
aaa <- tibble(val = aa, num = seq(1:length(aa)))
seq(1:length(aa))
aaa <- tibble(val = aa, num = seq(1:length(aa[,1])))
errors <- aaa %>% filter(val[,1] == FALSE)
errors <- aaa %>% filter(val == FALSE)
aaa$val[1,1]
aaa$val[1,1:5]
aaa$val[,1]
errors <- aaa %>% filter(val[1,] == FALSE)
aaaa <- data.frame(deskhistory_table == df)
aaaa <- bind_cols(aaaa,deskhistory_table)
aaaa <- bind_cols(aaaa,df)
aaaaa <- filter(aaaa, employee_num == F)
aaaaa <- filter(aaaa, desk_id == F)
aaaaa <- filter(aaaa, desk_id_start_date == F)
View(aaaaa)
aaaaa$desk_id_end_date1[1] - aaaaa$desk_id_end_date1[2]
aaaaa$desk_id_end_date1[1] - aaaaa$desk_id_end_date2[1]
aaaaa$desk_id_end_date1[20] - aaaaa$desk_id_end_date2[20]
aaaaa$desk_id_end_date1[200] - aaaaa$desk_id_end_date2[200]
aaaaa <- mutate(aaaaa, desk_id_end_date1 - aaaaa$desk_id_end_date2)
deskhistory_table_backup <- deskhistory_table
load("data/deskhistory.rda")
table(deskhistory_table == deskhistory_table_backup)
# Visualize
error_log %>%
mutate(loopround = round(loopnumber, -2),
issue = gsub('[[:digit:]]+|', '', issue)) %>%
count(loopround, issue) %>%
ggplot(aes(x = loopround, y = n)) +
geom_col() +
facet_wrap(~issue)
job_changes <- deskhistorytroubleshoot %>%
filter(!is.na(old_job_name)) %>%
count(old_job_name, new_job_name)
# Term rates
employees2002 <- deskhistory_table %>% filter(desk_id_start_date <=as.Date("2002-12-31") & desk_id_end_date >= as.Date("2002-01-01"))
terminations2002 <- employees2002 %>%
filter(promotion_flag ==1, year(desk_id_end_date) == 2002)
length(terminations2002$employee_num)/length(employees2002$employee_num)
# New Hire rates
newhires2002 <- employees2002 %>%
group_by(employee_num) %>%
summarize(hire_date = min(desk_id_start_date)) %>%
filter(year(hire_date) == 2002) %>%
left_join(employees2002, by = c("employee_num", "hire_date" = "desk_id_start_date"))
length(newhires2002$employee_num)/length(employees2002$employee_num)
deskhistory_table %>%
group_by(employee_num) %>%
summarize(hire_year = year(min(desk_id_start_date))) %>%
count(hire_year)
# terms by year
deskhistory_table %>%
filter(termination_flag == 1, desk_id_end_date != as.Date("2999-01-01")) %>%
count(year(desk_id_end_date)) %>%
ggplot(aes(x = `year(desk_id_end_date)`, y = n)) +
geom_col()
deskhistory_table %>%
filter(desk_id_end_date == as.Date("2999-01-01")) %>%
nrow()
# Count of TMs that started in first_date_of_hierarchy
deskhistory_table %>%
group_by(employee_num) %>%
summarize(first_day = min(desk_id_start_date)) %>%
filter(first_day == first_date_of_hierarchy) %>%
nrow()
# Count of TMs that terminated by month
deskhistory_table %>%
filter(termination_flag == 1, desk_id_end_date != as.Date("2999-01-01")) %>%
mutate(termmonth = floor_date(desk_id_end_date, "month")) %>%
count(termmonth) %>%
ggplot(aes(x = termmonth, y = n)) +
geom_col()
# Count of TMs that were hired after first_date_of_hierarchy
deskhistory_table %>%
group_by(employee_num) %>%
summarize(first_day = min(desk_id_start_date)) %>%
filter(first_day > first_date_of_hierarchy) %>%
nrow()
# Count of TMs that had max date before as.Date("2999-01-01") but did not terminate
joe <- deskhistory_table %>%
group_by(employee_num) %>%
summarize(last_day = max(desk_id_end_date),
term_flag = max(termination_flag)) %>%
filter(last_day < as.Date("2999-01-01"), term_flag == 0) %>%
mutate(last_month = floor_date(last_day, "month")) %>%
count(last_month)
joe
deskhistory_table %>%
group_by(employee_num) %>%
summarize(last_day = max(desk_id_end_date),
term_flag = max(termination_flag)) %>%
filter(last_day < as.Date("2999-01-01"), term_flag == 0) %>%
mutate(last_month = floor_date(last_day, "month")) %>%
count(last_month) %>%
ggplot(aes(x = last_month, y = n)) +
geom_col()
bob <- deskhistory_table %>%
group_by(employee_num) %>%
mutate(last_day = max(desk_id_end_date)) %>%
ungroup() %>%
filter(last_day < as.Date("2019-01-01"),
desk_id_end_date == last_day,
termination_flag != 1) %>%
arrange(desc(last_day)) %>%
#filter(row_number() == 3000)
select(employee_num, last_day) %>%
left_join(deskhistory_table)
sam <- deskhistory_table %>%
group_by(employee_num) %>%
mutate(last_day = max(desk_id_end_date)) %>%
ungroup() %>%
filter(last_day < as.Date("2019-01-01"),
desk_id_end_date == last_day,
termination_flag != 1) %>%
arrange(desc(last_day)) %>%
left_join(error_log, by = c("employee_num", "desk_id"))
#filter(row_number() == 3000)
select(employee_num, last_day) %>%
# New Hire jobs
oldnewhires2002 <- newhires2002 %>%
left_join(deskjob_table) %>%
count(job_name) %>%
mutate(pct_jobs_new_hire = n/sum(n)) %>%
left_join(count(deskjob_table, job_name) %>% arrange(desc(n)) %>% mutate(pct = n/sum(n)) %>% rename(overalljobcount = n))
# Save to csv for github - maybe move elsewhere?
write_csv(deskhistory_table, "data/deskhistory_table.csv")
write_csv(deskjob_table, "data/deskjob_table.csv")
sam <- deskhistory_table %>%
group_by(employee_num) %>%
mutate(last_day = max(desk_id_end_date)) %>%
ungroup() %>%
filter(last_day < as.Date("2019-01-01"),
desk_id_end_date == last_day,
termination_flag != 1) %>%
arrange(desc(last_day)) %>%
left_join(error_log, by = c("employee_num", "desk_id"))
#filter(row_number() == 3000)
#select(employee_num, last_day) %>%
# New Hire jobs
oldnewhires2002 <- newhires2002 %>%
left_join(deskjob_table) %>%
count(job_name) %>%
mutate(pct_jobs_new_hire = n/sum(n)) %>%
left_join(count(deskjob_table, job_name) %>% arrange(desc(n)) %>% mutate(pct = n/sum(n)) %>% rename(overalljobcount = n))
2
source("07_create_performance_reviews_salaries.R")
source("08_employee_info_cleanup.R")
source("09_recruiting.R")
source("10_views.R")
source("11_contact_info.R")
source("12_education_skills.R")
library(tidyverse)
contact_table_current <- hrsample::contact_table
contact_table_current %>% count(contact_type)
library(RMariaDB)
library(tidyverse)
library(lubridate)
source("01_functions.R")
source("02_variables.R")
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Import data -------------------------------------------------------------
deskhistory_table <- dbGetQuery(HRSAMPLE, "select * from deskhistory")
employeeinfo_table <- dbGetQuery(HRSAMPLE, "select * from employeeinfo")
# Import area codes to be used.  These are actual planned area codes.  7 trailing digits are composed randomly.
area_codes <- read_csv("data/area_codes.csv")
contact_max_end_date <- as.Date("2999-01-01")
contact_table_current %>% count(contact_type)
contact_table_current %>% count(contact, sort = # Sun May 05 18:39:28 2019 ------------------------------
T)
contact_table_current %>% filter(contact == "464-386-8899")
contact_table_current %>% filter(contact_sub_type == "personal")
contact_table_current %>% filter(contact_sub_type == "personal") %>% count(contact)
contact_table_current %>% filter(contact_sub_type == "personal") %>% count(contact) %>% count(n, sort = T)
contact_table_current %>% filter(contact_sub_type == "work") %>% count(contact) %>% count(n, sort = T)
create_phone_number <- function(state = NULL) {
area_code_temp <- sample(area_codes$area_code, 1) %>% as.character()
phone_prefix <- sample(100:999,1) %>% sprintf(fmt = "%03d")
phone_suffix <- sample(1000:9999,1) %>% sprintf(fmt = "%04d")
phone_temp <- paste(area_code_temp, phone_prefix, phone_suffix, sep = "-")
return(phone_temp)
}
apply(tibble(n=1:10),2,create_phone_number())
lapply(rep(1,9), create_phone_number)
aa <- lapply(rep(1,500), create_phone_number)
aa <- as.tibble(lapply(rep(1,500), create_phone_number))
aa <- data.frame(lapply(rep(1,500), create_phone_number))
lapply(rep(1,20), create_phone_number)
# Import area codes to be used.  These are actual planned area codes.  7 trailing digits are composed randomly.
area_codes <- read_csv("data/area_codes.csv")
contact_max_end_date <- as.Date("2999-01-01")
# Create work email addresses ---------------------------------------------
email_addresses <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
left_join(employeeinfo_table) %>%
mutate(add_work_email = sample(c(1,0), 1, prob = c(993,7), replace = TRUE),
contact = ifelse(add_work_email == 1, paste0(tolower(first_name), ".", tolower(last_name), "@", company_website), NA),
contact_type = "email",
contact_sub_type = "work",
contact_end_date = contact_max_end_date)
# Count/validate email unique
# If this is false then there will be duplicate email addresses
nrow(email_addresses) == email_addresses %>% select(contact) %>% n_distinct()
work_phone_list <- deskhistory_table %>%
group_by(employee_num, desk_id) %>%
summarize(desk_id_end_date_max = max(desk_id_end_date)) %>%
ungroup() %>%
rowwise() %>%
mutate(add_work_phone = sample(c(1,0), 1, prob = c(387,1), replace = TRUE),
contact = ifelse(add_work_phone == 1, create_phone_number(), NA),
contact_end_date = desk_id_end_date_max,
contact_type = "phone",
contact_sub_type = "work")
personal_phone_list1 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(89,11), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list2 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(8,92), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list3 <- deskhistory_table %>%
group_by(employee_num) %>%
mutate(desk_id_end_date_max = max(desk_id_end_date),
desk_id_end_date_min = min(desk_id_end_date)) %>%
ungroup() %>%
#####filter out highest end date (2099)
filter(desk_id_end_date != contact_max_end_date) %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(18,82), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = sample(seq.Date(desk_id_end_date_min, min(desk_id_end_date_max, end_date_of_hierarchy), by = "days"),1)) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
##erase below
work_phone_list %>% count(contact, sort = T)
personal_phone_list1 %>% count(contact, sort = T)
personal_phone_list2 %>% count(contact, sort = T)
personal_phone_list3 %>% count(contact, sort = T)
View(personal_phone_list1)
personal_phone_list1 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(89,11), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list2 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(8,92), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
library(RMariaDB)
library(tidyverse)
library(lubridate)
source("01_functions.R")
source("02_variables.R")
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Build contact table -----------------------------------------------------
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS contact;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE contact (
employee_num INT (11),
contact_type VARCHAR (255),
contact_sub_type VARCHAR (255),
contact VARCHAR (255),
contact_end_date DATE,
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Import data -------------------------------------------------------------
deskhistory_table <- dbGetQuery(HRSAMPLE, "select * from deskhistory")
employeeinfo_table <- dbGetQuery(HRSAMPLE, "select * from employeeinfo")
# Import area codes to be used.  These are actual planned area codes.  7 trailing digits are composed randomly.
area_codes <- read_csv("data/area_codes.csv")
contact_max_end_date <- as.Date("2999-01-01")
# Create work email addresses ---------------------------------------------
email_addresses <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
left_join(employeeinfo_table) %>%
mutate(add_work_email = sample(c(1,0), 1, prob = c(993,7), replace = TRUE),
contact = ifelse(add_work_email == 1, paste0(tolower(first_name), ".", tolower(last_name), "@", company_website), NA),
contact_type = "email",
contact_sub_type = "work",
contact_end_date = contact_max_end_date)
# Count/validate email unique
# If this is false then there will be duplicate email addresses
nrow(email_addresses) == email_addresses %>% select(contact) %>% n_distinct()
# Create work and personal phone numbers ----------------------------------
# Get distinct list of all employees, desk_id, and max desk_id_end_date
# For each row get 1 phone number, should be work number.  contact end date is desk_id end date.  Some should be blank (1/387)
work_phone_list <- deskhistory_table %>%
group_by(employee_num, desk_id) %>%
summarize(desk_id_end_date_max = max(desk_id_end_date)) %>%
ungroup() %>%
rowwise() %>%
mutate(add_work_phone = sample(c(1,0), 1, prob = c(387,1), replace = TRUE),
contact = ifelse(add_work_phone == 1, create_phone_number(), NA),
contact_end_date = desk_id_end_date_max,
contact_type = "phone",
contact_sub_type = "work")
# Get distinct list of all  employees, and max desk_id_end_date, min desk_id_start_date
# For each row .89 add personal phone
# For each row .08 add personal phone 2
# for each person, get their minimum start date, for .18 of them add expired personal phone during min/max dates
# for each person, get their minimum start date, for .06 of them add expired personal phone during min/max dates
# for each person, get their minimum start date, for .004 of them add expired personal phone during min/max dates
personal_phone_list1 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(89,11), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list2 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(8,92), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list3 <- deskhistory_table %>%
group_by(employee_num) %>%
mutate(desk_id_end_date_max = max(desk_id_end_date),
desk_id_end_date_min = min(desk_id_end_date)) %>%
ungroup() %>%
#####filter out highest end date (2099)
filter(desk_id_end_date != contact_max_end_date) %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(18,82), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = sample(seq.Date(desk_id_end_date_min, min(desk_id_end_date_max, end_date_of_hierarchy), by = "days"),1)) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
##erase below
work_phone_list %>% count(contact, sort = T)
personal_phone_list1 %>% count(contact, sort = T)
personal_phone_list2 %>% count(contact, sort = T)
personal_phone_list1 %>% count(contact, sort = T)
personal_phone_list2 %>% count(contact, sort = T)
personal_phone_list3 %>% count(contact, sort = T)
contact_table <- bind_rows(work_phone_list,
personal_phone_list1,
personal_phone_list2,
personal_phone_list3,
email_addresses) %>%
select(employee_num,
contact_type,
contact_sub_type,
contact,
contact_end_date)
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_sub_type == "personal", contact_end_date == as.Date("2999-01-01")) %>%
sample_n(45) %>%
select(employee_num, contact_new = contact) %>%
mutate(replace_work_number = "yes")
# Replace work numbers with personal number selected above
contact_table <- contact_table %>%
left_join(employee_work_numbers_to_replace) %>%
rowwise() %>%
mutate(contact = if_else(replace_work_number == "yes" &
contact_sub_type == "work" &
contact_end_date == as.Date("2999-01-01"),
contact_new,
contact)) %>%
select(-contact_new, -replace_work_number)
# Validation --------------------------------------------------------------
contact_table %>% count(contact, sort = T)
contact_table %>% count(employee_num, contact_end_date) %>% arrange(desc(n))
contact_table %>% filter(contact_end_date == as.Date("2999-01-01")) %>% count(contact_sub_type)
# Populate contact
contact_sql <- paste(
"INSERT INTO contact (employee_num, contact_type, contact_sub_type, contact, contact_end_date) VALUES ",
paste0(
"('",
contact_table$employee_num, "','",
contact_table$contact_type, "','",
contact_table$contact_sub_type, "','",
contact_table$contact, "','",
contact_table$contact_end_date, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, contact_sql)
