)
dbExecute(HRSAMPLE, contact_sql)
library(RMariaDB)
library(tidyverse)
library(lubridate)
library(readODS)
source("01_functions.R")
source("02_variables.R")
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Not used yet
#salaryhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM salaryhistory")
employeeinfo_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM employeeinfo")
deskhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM deskhistory")
deskjob_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM deskjob")
# Build education table ---------------------------------------------------
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS education;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE education (
employee_num INT (11),
degree VARCHAR (5),
school_name VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Build skills table ------------------------------------------------------
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS skills;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE skills (
employee_num INT (11),
skill_name VARCHAR (255),
skill_type VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Import data -------------------------------------------------------------
#https://www.4icu.org/us/
colleges <- read_delim("data/colleges.txt", delim = "|")
skills <- read_ods("data/skills_worksheet.ods") %>%
gather(key = job_name, value = skill, -c(skill_name, skill_type)) %>%
select(job_name, everything())
# Create education --------------------------------------------------------
create_college <- function() {
college <- colleges %>%
select(School) %>%
sample_n(1) %>%
as.character()
return(college)
}
# For each employee, use ratios in variables to determine their education levels
# Can only have PhD if they have MA/MS.
# Can only have MA/MS if they have a BA/BS
education_table_BABS <- employeeinfo_table %>%
select(employee_num) %>%
sample_frac(size = BA_pct + BS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct)),
school_name = create_college())
education_table_MAMS <- education_table_BABS %>%
select(employee_num) %>%
sample_frac(size = MA_pct + MS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("MA", "MS"), size =  1, prob = c(MA_pct, MS_pct)),
school_name = create_college())
education_table_PhD <- education_table_MAMS %>%
select(employee_num) %>%
sample_frac(size = PhD_pct) %>%
rowwise() %>%
mutate(degree = "PhD",
school_name = create_college())
education_table <- bind_rows(
education_table_BABS,
education_table_MAMS,
education_table_PhD
)
# Remove bad characters ---------------------------------------------------
education_table <- education_table %>%
mutate(school_name = iconv(school_name, "UTF-8", "UTF-8",sub='')) %>%
mutate(school_name = gsub(pattern = "'",replacement = "", school_name))
# Skills ------------------------------------------------------------------
# Create potential_skills that has list of employees and all the jobs they have had
# Use create_skills() to create a randomly generated number of skills for each employee
jobs_to_exclude_from_skills <- c("CEO")
potential_skills <- deskhistory_table %>%
left_join(deskjob_table) %>%
select(employee_num, job_name) %>%
filter(!job_name %in% jobs_to_exclude_from_skills) %>%
distinct()
employee_list_for_skills <- potential_skills %>%
select(employee_num) %>%
distinct()
create_skills <- function(f_employee_num) {
skill_count <- max(round(rgamma(1,3) ,0) -2,0)
skills_temp <- potential_skills %>%
filter(employee_num == f_employee_num) %>%
left_join(skills, by = "job_name") %>%
filter(!is.na(skill)) %>%
select(-job_name, - skill)
skills_temp_nrow <- nrow(skills_temp)
skills_temp <- sample_n(skills_temp, min(skill_count, skills_temp_nrow))
return(skills_temp)
}
skills_table <- tibble()
for (i in (1:length(employee_list_for_skills$employee_num))) {
skills_append <- create_skills(employee_list_for_skills$employee_num[i])
skills_table <- bind_rows(skills_table, skills_append)
}
# Upload data -------------------------------------------------------------
# Populate education
education_sql <- paste(
"INSERT INTO education (employee_num, degree, school_name) VALUES ",
paste0(
"('",
education_table$employee_num, "','",
education_table$degree, "','",
education_table$school_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, education_sql)
# Populate skills
skills_sql <- paste(
"INSERT INTO skills (employee_num, skill_type, skill_name) VALUES ",
paste0(
"('",
skills_table$employee_num, "','",
skills_table$skill_type, "','",
skills_table$skill_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, skills_sql)
# Validate ----------------------------------------------------------------
df <- dbGetQuery(HRSAMPLE, "SELECT * FROM education")
skimr::skim(df)
df %>% count(school_name, sort = TRUE)
source('C:/Development/github/sample-hr-database/12_education_skills.R', echo=TRUE)
library(RMariaDB)
library(tidyverse)
library(lubridate)
library(readODS)
source("01_functions.R")
source("02_variables.R")
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Not used yet
#salaryhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM salaryhistory")
employeeinfo_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM employeeinfo")
deskhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM deskhistory")
deskjob_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM deskjob")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS education;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE education (
employee_num INT (11),
degree VARCHAR (5),
school_name VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Build skills table ------------------------------------------------------
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS skills;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE skills (
employee_num INT (11),
skill_name VARCHAR (255),
skill_type VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
colleges <- read_delim("data/colleges.txt", delim = "|")
skills <- read_ods("data/skills_worksheet.ods") %>%
gather(key = job_name, value = skill, -c(skill_name, skill_type)) %>%
select(job_name, everything())
# Create education --------------------------------------------------------
create_college <- function() {
college <- colleges %>%
select(School) %>%
sample_n(1) %>%
as.character()
return(college)
}
education_table_BABS <- employeeinfo_table %>%
select(employee_num) %>%
sample_frac(size = BA_pct + BS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct)),
school_name = create_college())
education_table_MAMS <- education_table_BABS %>%
select(employee_num) %>%
sample_frac(size = MA_pct + MS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("MA", "MS"), size =  1, prob = c(MA_pct, MS_pct)),
school_name = create_college())
education_table_PhD <- education_table_MAMS %>%
select(employee_num) %>%
sample_frac(size = PhD_pct) %>%
rowwise() %>%
mutate(degree = "PhD",
school_name = create_college())
education_table <- bind_rows(
education_table_BABS,
education_table_MAMS,
education_table_PhD
)
education_table <- education_table %>%
mutate(school_name = iconv(school_name, "UTF-8", "UTF-8",sub='')) %>%
mutate(school_name = gsub(pattern = "'",replacement = "", school_name))
# Skills ------------------------------------------------------------------
# Create potential_skills that has list of employees and all the jobs they have had
# Use create_skills() to create a randomly generated number of skills for each employee
jobs_to_exclude_from_skills <- c("CEO")
potential_skills <- deskhistory_table %>%
left_join(deskjob_table) %>%
select(employee_num, job_name) %>%
filter(!job_name %in% jobs_to_exclude_from_skills) %>%
distinct()
employee_list_for_skills <- potential_skills %>%
select(employee_num) %>%
distinct()
create_skills <- function(f_employee_num) {
skill_count <- max(round(rgamma(1,3) ,0) -2,0)
skills_temp <- potential_skills %>%
filter(employee_num == f_employee_num) %>%
left_join(skills, by = "job_name") %>%
filter(!is.na(skill)) %>%
select(-job_name, - skill)
skills_temp_nrow <- nrow(skills_temp)
skills_temp <- sample_n(skills_temp, min(skill_count, skills_temp_nrow))
return(skills_temp)
}
skills_table <- tibble()
for (i in (1:length(employee_list_for_skills$employee_num))) {
skills_append <- create_skills(employee_list_for_skills$employee_num[i])
skills_table <- bind_rows(skills_table, skills_append)
}
# Populate education
education_sql <- paste(
"INSERT INTO education (employee_num, degree, school_name) VALUES ",
paste0(
"('",
education_table$employee_num, "','",
education_table$degree, "','",
education_table$school_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, education_sql)
# Populate skills
skills_sql <- paste(
"INSERT INTO skills (employee_num, skill_type, skill_name) VALUES ",
paste0(
"('",
skills_table$employee_num, "','",
skills_table$skill_type, "','",
skills_table$skill_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, skills_sql)
df <- dbGetQuery(HRSAMPLE, "SELECT * FROM education")
skimr::skim(df)
df %>% count(school_name, sort = TRUE)
library(tidyverse)
library(hrsample)
library(lubridate)
library(fuzzyjoin)
# function to get term rate for a manager
#Start manually for a couple
#rollup <- dbGetQuery(HRSAMPLE, "SELECT * FROM ROLLUP") #Vies on mysql only
rollup <- rollup_view
active_employees <- deskhistory_table %>%
group_by(employee_num) %>%
mutate(max_desk_id_end_date = max(desk_id_end_date),
max_termination_flag = max(termination_flag)) %>%
ungroup() %>%
filter(desk_id_end_date == max_desk_id_end_date,
max_termination_flag == 0)
# Should only have 1 row (max date)
active_employees %>%
count(desk_id_end_date)
# Should return multiple rows
deskhistory_table %>%
filter(between(desk_id_start_date, as.Date("2018-10-01"), as.Date("2019-01-01")))
# Make sure all tables have valid employees and desks ----------------------
# Should all be 0
deskhistory_table %>%
anti_join(employeeinfo_table) %>%
nrow()
deskjob_table %>%
anti_join(deskhistory_table) %>%
nrow()
hierarchy_table %>%
anti_join(deskhistory_table) %>%
nrow()
performancereview_table %>%
anti_join(employeeinfo_table) %>%
nrow()
salaryhistory_table %>%
anti_join(employeeinfo_table) %>%
nrow()
recruiting_table %>%
anti_join(employeeinfo_table) %>%
nrow()
rollup_view %>%
anti_join(deskhistory_table, by = c("lvl04_desk_id" = "desk_id")) %>%
nrow()
contact_table %>%
anti_join(employeeinfo_table) %>%
nrow()
education_table %>%
anti_join(employeeinfo_table) %>%
nrow()
skills_table %>%
anti_join(employeeinfo_table) %>%
nrow()
no_review <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
anti_join(performancereview_table) %>%
left_join(deskhistory_table) %>%
arrange(employee_num, desk_id_end_date)
rehires_history <- deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
group_by(employee_num) %>%
mutate(mintermyear = min(termyear, na.rm = TRUE),
maxyear = max(endyear)) %>%
filter(maxyear > termyear) %>%
select(employee_num) %>%
left_join(deskhistory_table) %>%
arrange(employee_num, desk_id_end_date)
# Number of rehires
rehires_history %>%
select(employee_num) %>%
n_distinct()
# Check that TMs that left company and came back did not get a review during that period ----
rehires_reviews <- rehires_history %>%
select(employee_num) %>%
distinct() %>%
left_join(performancereview_table)
# 3. Graph review score vs tenure
# a. review in 2008 < 3 then higher chance of turnover in 2009?
deskhistory_terms <- deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
filter(!is.na(termyear))
perf_terms <- performancereview_table %>%
mutate(termyearcheck = year + 1) %>%
left_join(deskhistory_terms, by = c("employee_num", "termyearcheck" = "termyear"))
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n, fill = termination_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that termed the year \nfollowing review score below",
subtitle = "Should be higher for 1 or 2 scores")
#   b. turnover rate for tms with 1-2 vs 3, 4,5
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
left_join(deskhistory_terms %>%
select(employee_num, termination_flag)) %>%
ungroup() %>%
count(min_perf_review, termination_flag) %>%
ggplot(aes(x = as.factor(min_perf_review), y = n, fill = termination_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that termed by their minimum review score",
subtitle = "Not higher for 1 or 2 scores because it means less jobs")
#   b. tenure for tms with 1-2 vs 3, 4,5
termed_employees_start_end <- deskhistory_terms %>%
select(employee_num) %>%
left_join(deskhistory_table, by = "employee_num") %>%
group_by(employee_num) %>%
summarize(start_date = min(desk_id_start_date),
end_date = max(desk_id_end_date)) %>%
filter(end_date != as.Date("2999-01-01")) %>%
mutate(tenure = as.numeric(round((end_date - start_date) / 365, 3))) %>%
ungroup()
#   b. turnover rate for tms with 1-2 vs 3, 4,5
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
left_join(deskhistory_terms %>%
select(employee_num, termination_flag)) %>%
ungroup() %>%
count(min_perf_review, termination_flag) %>%
ggplot(aes(x = as.factor(min_perf_review), y = n, fill = termination_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that termed by their minimum review score",
subtitle = "Not higher for 1 or 2 scores because it means less jobs")
#   b. tenure for tms with 1-2 vs 3, 4,5
termed_employees_start_end <- deskhistory_terms %>%
select(employee_num) %>%
left_join(deskhistory_table, by = "employee_num") %>%
group_by(employee_num) %>%
summarize(start_date = min(desk_id_start_date),
end_date = max(desk_id_end_date)) %>%
filter(end_date != as.Date("2999-01-01")) %>%
mutate(tenure = as.numeric(round((end_date - start_date) / 365, 3))) %>%
ungroup()
termed_employees_start_end
deskhistory_terms$employee_num %>% n_distinct()
deskhistory_terms %>% select(employee_num) %>% anti_join(termed_employees_start_end)
deskhistory_terms %>%  %>% anti_join(select(termed_employees_start_end,employee_num))
deskhistory_terms %>%   anti_join(select(termed_employees_start_end,employee_num))
deskhistory_table %>% filter(employee_num==29041     )
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
select(employee_num, min_perf_review) %>%
right_join(termed_employees_start_end) %>%
ungroup() %>%
group_by(min_perf_review) %>%
summarize(avg_tenure = mean(tenure, na.rm = TRUE),
count = n()) %>%
ggplot(aes(x = as.factor(min_perf_review), y = avg_tenure, size = count)) +
geom_point() +
labs(title = "Avg Tenure by their minimum review score",
subtitle = "Should be lower for 1 or 2 scores.
Difficult to have minimum 4 or 5 score.
Super difficult if you have long tenure.
For that reason, lower tenure for 4-5s.")
performancereview_table %>% glimpse()
performancereview_table %>% count(year)
performancereview_table %>%
filter(year == 2017) %>%
nrow
# Potential analysis of 2017 reviews
performancereview_table %>%
filter(year == 2017) %>%
left_join(deskhistory_table %>%
filter(desk_id_start_date >= as.Date("2018-03-01"),
desk_id_end_date <= as.Date("2018-03-01"),
by = "employee_num" )) %>%
glimpse()
# Potential analysis of 2017 reviews
performancereview_table %>%
filter(year == 2017) %>%
left_join(deskhistory_table %>%
filter(desk_id_start_date >= as.Date("2018-03-01"),
desk_id_end_date <= as.Date("2018-03-01")),
by = "employee_num" ) %>%
glimpse()
deskhistory_table %>%
filter(desk_id_start_date >= as.Date("2018-03-01"),
desk_id_end_date <= as.Date("2018-03-01"))
# Potential analysis of 2017 reviews
performancereview_table %>%
filter(year == 2017) %>%
left_join(deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2018-03-01"),
desk_id_end_date >= as.Date("2018-03-01")),
by = "employee_num" ) %>%
glimpse()
# Potential analysis of 2017 reviews
performancereview_table %>%
filter(year == 2017) %>%
left_join(deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2018-03-01"),
desk_id_end_date >= as.Date("2018-03-01")),
by = "employee_num" ) %>%
nrow()
# Potential analysis of 2017 reviews
performancereview_table %>%
filter(year == 2017) %>%
left_join(deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2018-03-01"),
desk_id_end_date >= as.Date("2018-03-01")),
by = "employee_num" ) %>%
left_join(rollup %>% select(lvl04_desk_id, lvl01_org))
# Potential analysis of 2017 reviews
performancereview_table %>%
filter(year == 2017) %>%
left_join(deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2018-03-01"),
desk_id_end_date >= as.Date("2018-03-01")),
by = "employee_num" ) %>%
left_join(rollup %>% select(lvl04_desk_id, lvl01_org), by = c("employee_num" = "lvl04_desk_id"))
# Potential analysis of 2017 reviews
aaa <- performancereview_table %>%
filter(year == 2017) %>%
left_join(deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2018-03-01"),
desk_id_end_date >= as.Date("2018-03-01")),
by = "employee_num" ) %>%
left_join(rollup %>% select(lvl04_desk_id, lvl01_org), by = c("employee_num" = "lvl04_desk_id"))
View(aaa)
rollup %>% select(lvl04_desk_id, lvl01_org)
# Potential analysis of 2017 reviews
aaa <- performancereview_table %>%
filter(year == 2017) %>%
left_join(deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2018-03-01"),
desk_id_end_date >= as.Date("2018-03-01")),
by = "employee_num" ) %>%
left_join(rollup %>% select(lvl04_desk_id, lvl01_org), by = c("desk_id" = "lvl04_desk_id"))
aaa %>% count(lvl01_org, perf_review_score)
aaa %>%
add_count(lvl01_org) %>%
count(lvl01_org, perf_review_score)
aaa %>%
add_count(bob = lvl01_org) %>%
count(lvl01_org, perf_review_score, n)
aaa %>%
add_count(lvl01_org) %>%
count(lvl01_org, perf_review_score, n)
