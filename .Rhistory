mutate(perf_review_score = max(sample(c(1,2,3,4,5,NA), 1,
prob= c(perf_review_score_1,
perf_review_score_2,
perf_review_score_3,
perf_review_score_4,
perf_review_score_5,
odds_of_no_review),
replace=TRUE),
min_review_value))
review_year_list <- bind_rows(review_year_list, review_year_list_append)
# Create salary increases for promotions and job changes
salary_increases_promo_new_desk <- deskhistory_table_temp %>%
# Remove increase for start dates at beginning of data
rowwise() %>%
mutate(salary_increase = case_when(
desk_id_start_date == hierarchy_start_date ~ 0,
### NEW added below line and needs testing
desk_id_start_date == min(desk_id_start_date) ~ 0,
TRUE ~ sample(seq(promo_new_desk_salary_increase_min,promo_new_desk_salary_increase_max,.005),1))) %>%
ungroup() %>%
mutate(new_desk_id = lag(desk_id) != desk_id) %>% # if it is a new desk_id d b/w oct 1 - april 30 then add year to list so no march 1 increas
mutate(merit_increase_remove_year = case_when(
(promotion_flag == 1 | new_desk_id == TRUE ) & month(desk_id_start_date) <= 4 ~ year(desk_id_start_date) - 1, # no merit increase if recently got promotion
(promotion_flag == 1 | new_desk_id == TRUE ) & month(desk_id_start_date) >= 10 ~ year(desk_id_start_date)  # or if got new deskid at end of last year
),
salary_increase_date = desk_id_start_date) %>%
filter(salary_increase > 0)
# create years for no increase
# if there was a promotion between Jan 1 and Apr 30 then add year to list so no march 1 increase
# if it is a new desk id b/w oct 1 - april 30 then add year to list so no march 1 increase
# Create salary increases for years without promotions and job changes
# tie this to prime rate and maybe LOB, should be 1-7%
####ERROR HERE
salary_increases_standard <- tibble(review_year = review_years) %>%
anti_join(salary_increases_promo_new_desk, by = c("review_year" = "merit_increase_remove_year"))
if(nrow(salary_increases_standard) == 0) next # needed to avoid error in next section
salary_increases_standard <- salary_increases_standard %>%
left_join(prime_rate, by = c("review_year" = "year")) %>%
left_join(review_year_list_append %>% select(review_year, perf_review_score)) %>%
rowwise() %>%
mutate(employee_num = employee_num_temp,
prime_rate_add = max((prime_rate_est - .03) / 2, 0),
perf_review_add = case_when(perf_review_score == 5 ~ .03,
perf_review_score == 4 ~ .015,
TRUE ~ 0),
no_merit_multiplier = if_else(perf_review_score %in% c(1,2), 0, 1)) %>%
mutate(salary_increase = (sample(seq(standard_salary_increase_min, standard_salary_increase_max,.001),1)
+ prime_rate_add
+ perf_review_add)
* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
### enhancemnt: if possible make it higher if they got 4 or 5
# Starting salary plug for later function
starting_salary_table <-  create_starting_salary(employee_num_temp)
starting_salary <- starting_salary_table$salary[1]
# Bind starting salary, promotions/new desk, and standard increases
salaryhistory_table_append <- bind_rows(starting_salary_table,
salary_increases_promo_new_desk %>%
select(employee_num, salary_increase_date, salary_increase),
salary_increases_standard %>%
select(employee_num, salary_increase_date, salary_increase)) %>%
arrange(salary_increase_date) %>%
mutate(salary = starting_salary * cumprod(1 + salary_increase))
if (is.na(salaryhistory_table_append$salary[1])) {
print("skipped, initial salary missing")
next
}
salaryhistory_table <- bind_rows(salaryhistory_table, salaryhistory_table_append)
print(i)
}
# Remove rows without performance review scores from performance review table
review_year_list <- review_year_list %>%
filter(!is.na(perf_review_score))
# Replace NAs on salaryhistory starting_salary_flag with N
salaryhistory_table <- salaryhistory_table %>%
mutate(starting_salary_flag = if_else(is.na(starting_salary_flag),
"N",
starting_salary_flag))
# Backup
save(review_year_list, file = "data/review_year_list.rda")
save(salaryhistory_table, file = "data/salaryhistory_table.rda")
# Populate performancereview ----------------------------------------------
# First, clear old data from performancereview
dbExecute(HRSAMPLE, "DELETE FROM performancereview")
# Populate performancereview
review_year_list_sql <- paste(
"INSERT INTO performancereview (employee_num, year, perf_review_score) VALUES ",
paste0(
"('",
review_year_list$employee_num, "','",
review_year_list$review_year, "','",
review_year_list$perf_review_score, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, review_year_list_sql)
# Populate salaryhistory ----------------------------------------------
# First, clear old data from salaryhistory
dbExecute(HRSAMPLE, "DELETE FROM salaryhistory")
# Populate salaryhistory
salaryhistory_sql <- paste(
"INSERT INTO salaryhistory (employee_num, salary_effective_date, salary, salary_increase, starting_salary_flag) VALUES ",
paste0(
"('",
salaryhistory_table$employee_num, "','",
salaryhistory_table$salary_increase_date, "','",
salaryhistory_table$salary, "','",
salaryhistory_table$salary_increase, "','",
salaryhistory_table$starting_salary_flag, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, salaryhistory_sql)
library(RMariaDB)
library(hrsample)
library(tidyverse)
library(scales)
default_color <- rgb(155/255, 186/255, 204/255)
# below borrowed from 07
# Connect to database -----------------------------------------------------
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
# Create hierarchy and join to lob for report to count  from 01
hierarchy <- dbGetQuery(HRSAMPLE, "SELECT *  FROM hierarchy")
# Rollup
hierarchy_spread <- hierarchy %>%
mutate(lvl00_desk_id = 0,
lvl00_org = "CEO") %>%
select(lvl00_desk_id,
lvl00_org,
everything()) %>%
filter(parent_id == 1) %>%
rename(lvl01_desk_id = desk_id,
lvl01_org = org) %>%
select(-parent_id) %>%
left_join(hierarchy, by = c("lvl01_desk_id" = "parent_id")) %>%
rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
left_join(hierarchy, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
left_join(hierarchy, by = c("lvl03_desk_id" = "parent_id"))
# Add level 1-3 employees since hierarchy_spread only counts level 04
hierarchy_spread_lvl01 <- hierarchy_spread %>%
select(lvl00_desk_id, lvl00_org, desk_id = lvl01_desk_id) %>%
distinct()
hierarchy_spread_lvl02 <- hierarchy_spread %>%
select(lvl01_desk_id, lvl01_org, desk_id = lvl02_desk_id) %>%
distinct()
hierarchy_spread_lvl03 <- hierarchy_spread %>%
select(lvl01_desk_id, lvl01_org, desk_id = lvl03_desk_id) %>%
distinct()
### Note this hierarchy_spread_all is different than from 04. Includes everyone except CEO
hierarchy_spread_all <- hierarchy_spread %>%
bind_rows(hierarchy_spread_lvl01, hierarchy_spread_lvl02, hierarchy_spread_lvl03)
# Headcount ---------------------------------------------------------------
# Note this appears to be more desk count than headcount
employee_distribution <- deskhistory_table %>%
filter(desk_id_end_date == as.Date("2999-01-01")) %>%
right_join(hierarchy_spread_all %>% select(desk_id, lvl01_org)) %>%
filter(!is.na(lvl01_org)) %>%
count(lvl01_org) %>%
ggplot(aes(x = fct_reorder(lvl01_org, -n), y = n)) +
geom_col(fill = default_color, width = .6) +
labs(title = "Current Headcount by Line of Business") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
employee_distribution
ggsave(employee_distribution, filename =  "images/employee_distribution.png", device = "png")
merit_increases <- salaryhistory_table %>%
mutate(`Salary Increase Year` = lubridate::year(salary_effective_date)) %>%
filter(salary_increase > 0,
`Salary Increase Year` >= 2012,
`Salary Increase Year` <= 2017) %>%
ggplot(aes(x = salary_increase)) +
geom_histogram(bins = 15, fill = default_color) +
scale_x_continuous(labels = percent) +
facet_wrap(~`Salary Increase Year`) +
labs(x = "% Increase",
y = "Count of Merit Increases",
title = "Merit Increases by Year") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
merit_increases
merit_increases <- salaryhistory_table %>%
mutate(`Salary Increase Year` = lubridate::year(salary_effective_date)) %>%
filter(salary_increase > 0,
`Salary Increase Year` >= 1999,
`Salary Increase Year` <= 2018) %>%
ggplot(aes(x = salary_increase)) +
geom_histogram(bins = 15, fill = default_color) +
scale_x_continuous(labels = percent) +
facet_wrap(~`Salary Increase Year`) +
labs(x = "% Increase",
y = "Count of Merit Increases",
title = "Merit Increases by Year") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
merit_increases
# Source data created from https://github.com/harryahlas
library(RMariaDB)
library(tidyverse)
# Connect to database stored on localhost
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Retrieve tables
employeeinfo_table      <- dbGetQuery(HRSAMPLE, "SELECT *  FROM employeeinfo")
deskhistory_table       <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory")
deskjob_table           <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskjob")
hierarchy_table         <- dbGetQuery(HRSAMPLE, "SELECT *  FROM hierarchy")
performancereview_table <- dbGetQuery(HRSAMPLE, "SELECT *  FROM performancereview")
salaryhistory_table     <- dbGetQuery(HRSAMPLE, "SELECT *  FROM salaryhistory")
save(employeeinfo_table,       file = "data-raw/employeeinfo_table.rda")
save(deskhistory_table,        file = "data-raw/deskhistory_table.rda")
save(deskjob_table,            file = "data-raw/deskjob_table.rda")
save(hierarchy_table,          file = "data-raw/hierarchy_table.rda")
save(performancereview_table,  file = "data-raw/performancereview_table.rda")
save(salaryhistory_table,      file = "data-raw/salaryhistory_table.rda")
setwd("C:\\Development\\github\\hrsample")
# Put your data files into the data-raw folder
save(employeeinfo_table,       file = "data-raw/employeeinfo_table.rda")
save(deskhistory_table,        file = "data-raw/deskhistory_table.rda")
save(deskjob_table,            file = "data-raw/deskjob_table.rda")
save(hierarchy_table,          file = "data-raw/hierarchy_table.rda")
save(performancereview_table,  file = "data-raw/performancereview_table.rda")
save(salaryhistory_table,      file = "data-raw/salaryhistory_table.rda")
load("data-raw/employeeinfo_table.rda")
load("data-raw/deskhistory_table.rda")
load("data-raw/deskjob_table.rda")
load("data-raw/hierarchy_table.rda")
load("data-raw/performancereview_table.rda")
load("data-raw/salaryhistory_table.rda")
devtools::use_data(employeeinfo_table,
deskhistory_table,
deskjob_table,
hierarchy_table,
performancereview_table,
salaryhistory_table,
overwrite = T)
library(RCurl)
setwd("C:\\Development\\github\\blog")
blog_files_all <- list.files(getwd(),
#pattern=(".html"),
full.names=F,
recursive = TRUE)
# do not change this file or image files
blog_files <- blog_files_all[blog_files_all != "scripts/updateURLs.R"]
blog_files <- blog_files[grepl(blog_files,pattern = "/images/") != TRUE]
blog_files <- blog_files[grepl(blog_files,pattern = "jpg|png|gif") != TRUE]
# Make files for server ---------------------------------------------------
pw <- "3mypj5xh"
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
library(RCurl)
setwd("C:\\Development\\github\\blog")
blog_files_all <- list.files(getwd(),
#pattern=(".html"),
full.names=F,
recursive = TRUE)
# do not change this file or image files
blog_files <- blog_files_all[blog_files_all != "scripts/updateURLs.R"]
blog_files <- blog_files[grepl(blog_files,pattern = "/images/") != TRUE]
blog_files <- blog_files[grepl(blog_files,pattern = "jpg|png|gif") != TRUE]
pw <- "3mypj5xh"
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
devtools::install_github("harryahlas/hrsample")
library(hrsample)
library(tidyverse)
library(hrsample)
head(deskhistory_table)
library(lubridate)
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(year = floor_date(desk_id_end_date, "year")) %>%
head()
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(year = year(desk_id_end_date)) %>%
head()
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(termyear = ifelse(termination_flag == 1, year(desk_id_end_date), NA)) %>%
head()
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(termyear = ifelse(termination_flag == 1, year(desk_id_end_date), NA)) %>%
head()
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(termyear = ifelse(termination_flag == 1, year(desk_id_end_date), NA)) %>%
count(termyear)
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(termyear = ifelse(termination_flag == 1, year(desk_id_end_date), NA)) %>%
group_by(employee_num) %>%
summarize(mintermyear = min(termyear)) %>%
ungroup()
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(termyear = ifelse(termination_flag == 1, year(desk_id_end_date), NA)) %>%
group_by(employee_num) %>%
summarize(mintermyear = min(termyear, na.rm = TRUE)) %>%
ungroup()
deskhistory_table %>% filter(employee_num == 138157)
deskhistory_table %>% filter(employee_num == 138242)
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
group_by(employee_num) %>%
summarize(mintermyear = min(termyear, na.rm = TRUE)) %>%
ungroup()
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
group_by(employee_num) %>%
mutate(mintermyear = min(termyear, na.rm = TRUE)) %>%
ungroup()
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
group_by(employee_num) %>%
mutate(mintermyear = min(termyear, na.rm = TRUE)) %>%
ungroup() %>%
filter(termyear > 0)
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
group_by(employee_num) %>%
mutate(mintermyear = min(termyear, na.rm = TRUE)) %>%
ungroup() %>%
group_by(employee_num) %>%
filter(endyear >= termyear)
# TMs terminating then rehiring - get an idea of that.  If no rehires then we should add a few
deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
group_by(employee_num) %>%
mutate(mintermyear = min(termyear, na.rm = TRUE)) %>%
ungroup() %>%
group_by(employee_num) %>%
filter(endyear != termyear)
head(performancereview_table)
# 3. Graph review score vs tenure
# a. review in 2008 < 3 then higher chance of turnover in 2009?
deskhistory_terms <- deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
filter(!is.na(termyear))
deskhistory_table %>% count(termination_flag)
nrow(performancereview_table)
perf_terms <- performancereview_table %>%
mutate(termyearcheck = year + 1) %>%
left_join(deskhistory_terms, by = c("termyearcheck" = "termyear") )
perf_terms <- performancereview_table %>%
mutate(termyearcheck = year + 1) %>%
left_join(deskhistory_terms, by = c("employee_num", "termyearcheck" = "termyear") )
View(perf_terms)
perf_terms %>% count(termination_flag)
perf_terms %>%
filter(termination_flag == 1)
perf_terms %>%
filter(termination_flag == 1) %>%
head()
perf_terms %>%
filter(termination_flag == 1) %>%
ggplot(aes(x = as.factor(perf_review_score))) +
geom_bar()
perf_terms %>%
filter(termination_flag == 1) %>%
count(termyearcheck, perf_review_score)
perf_terms %>%
filter(termination_flag == 1) %>%
count(termyearcheck, perf_review_score) %>%
ggplot(aes(x = as.factor(perf_review_score), y = n)) +
geom_col()
perf_terms %>%
#filter(termination_flag == 1) %>%
count(termination_flag, termyearcheck, perf_review_score) %>%
ggplot(aes(x = as.factor(perf_review_score), y = n)) +
geom_col()
perf_terms %>%
#filter(termination_flag == 1) %>%
count(termination_flag, termyearcheck, perf_review_score)
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag, termyearcheck, poor_perf_review_flag)
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag)
10/110
431/16724
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n)) +
geom_col(fill = termination_flag)
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n)) +
geom_col(color = termination_flag)
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n), fill = termination_flag) +
geom_col()
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n), color = termination_flag) +
geom_col()
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n, color = termination_flag)) +
geom_col()
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n, fill = termination_flag)) +
geom_col()
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n, fill = termination_flag)) +
geom_col()
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n, fill = termination_flag)) +
geom_col(position = "fill")
645/20
32/1000
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n, fill = termination_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that termed the year \nfollowing review score below")
#   b. turnover rate for tms with 1-2 vs 3, 4,5
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1)
n_distinct(deskhistory_terms$employee_num)
#   b. turnover rate for tms with 1-2 vs 3, 4,5
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
left_join(deskhistory_terms %>%
select(employee_num, termination_flag))
#   b. turnover rate for tms with 1-2 vs 3, 4,5
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
left_join(deskhistory_terms %>%
select(employee_num, termination_flag)) %>%
count(min_perf_review, termination_flag)
#   b. turnover rate for tms with 1-2 vs 3, 4,5
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
left_join(deskhistory_terms %>%
select(employee_num, termination_flag)) %>%
ungroup() %>%
count(min_perf_review, termination_flag)
#   b. turnover rate for tms with 1-2 vs 3, 4,5
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
left_join(deskhistory_terms %>%
select(employee_num, termination_flag)) %>%
ungroup() %>%
count(min_perf_review, termination_flag) %>%
ggplot(aes(x = as.factor(min_perf_review), y = n, fill = termination_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that termed by their minimum review score",
subtitle = "Should be higher for 1 or 2 scores")
