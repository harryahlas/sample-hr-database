mutate(termination = if_else(termination_flag == 1 & (year(desk_id_end_date) == 2005 ), "term2017", "notterm2017")) %>%
count(termination) %>%
spread(key = termination, value = n) %>%
mutate(pct = term2017 / (term2017 + notterm2017))
deskhistory_table %>%
left_join(deskjob_table)
deskhistory_table
deskhistory_table %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date <= as.Date("2009-01-01"))
hcto_summary <- deskhistory_table %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date <= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup()
hcto_summary %>% count(termination_flag)
# 8. Termination rate is low
deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2010-01-01"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
mutate(termination = if_else(termination_flag == 1 & (year(desk_id_end_date) == 2005 ), "term2017", "notterm2017")) %>%
count(termination) %>%
spread(key = termination, value = n) %>%
mutate(pct = term2017 / (term2017 + notterm2017))
# 8. Termination rate is low
deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2010-01-01"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
mutate(termination = if_else(termination_flag == 1 & (lubridate::year(desk_id_end_date) == 2005 ), "term2017", "notterm2017")) %>%
count(termination) %>%
spread(key = termination, value = n) %>%
mutate(pct = term2017 / (term2017 + notterm2017))
hcto_summary <- deskhistory_table %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2010-01-01"),
desk_id_end_date <= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1, "Terminated", "DidNotTerminate"))
View(hcto_summary)
hcto_summary <- deskhistory_table %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
knitr::kable(hcto_summary)
View(hcto_summary)
hcto_summary <- deskhistory_table %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
library(lubridate)
hcto_summary <- deskhistory_table %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
knitr::kable(hcto_summary)
sum(hcto_summary$Headcount)
deskhistory_table %>% filter(desk_id == 1)
employeeinfo_table %>% filter(employee_num == 16684)
disclaimer_info <- data.frame(Information =
c("Source: hrsample",
paste("Data as of", as_of_date, "."),
"Data includes all employees rolling up to CEO Danica Hammel who were active at any point from Jan 1, 2009 through December 31, 2009.",
"If the employee had multiple jobs during 2009, only the most recent job is counted.",
"Data is confidential and should be shared on a need to know basis only.",
"Do not distribute externally."))
wb <- createWorkbook()
addWorksheet(wb, report_name)
addWorksheet(wb, "Data Disclaimer")
writeDataTable(wb, 1, hcto_summary)
writeDataTable(wb, 2, disclaimer_info)
addStyle(wb, 2, style = createStyle(wrapText = TRUE), rows = 1:7, cols = 1)
setColWidths(wb, 2, 1, widths = 50)
saveWorkbook(wb, paste0(report_name, as_of_date, ".xlsx"), TRUE)
library(hrsample)
library(tidyverse)
library(scales)
library(lubridate)
library(openxlsx)
# Tracking information
report_name <- "PA73405 - Attrition by Job 2009"
as_of_date <- Sys.Date()
knitr::kable(deskhistory_table[sample(nrow(deskhistory_table),5),])
knitr::kable(deskjob_table[sample(nrow(deskjob_table),5),])
knitr::kable(deskhistory_table[sample(nrow(deskhistory_table),5),])
# Summary data frame
hcto_summary <- deskhistory_table %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009,
"Terminated",
"DidNotTerminate")) %>%
count(job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
knitr::kable(hcto_summary)
hcto_summary <- deskhistory_table %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009,
"Terminated",
"DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
knitr::kable(hcto_summary)
disclaimer_info <- data.frame(Information =
c("Source: hrsample",
paste("Data as of", as_of_date, "."),
"Data includes all employees rolling up to CEO Danica Hammel who were active at any point from Jan 1, 2009 through December 31, 2009.",
"If the employee had multiple jobs during 2009, only the most recent job is counted.",
"Data is confidential and should be shared on a need to know basis only.",
"Do not distribute externally."))
# Export to Excel
wb <- createWorkbook()
addWorksheet(wb, report_name)
addWorksheet(wb, "Data Disclaimer")
writeDataTable(wb, 1, hcto_summary)
writeDataTable(wb, 2, disclaimer_info)
addStyle(wb, 2, style = createStyle(wrapText = TRUE), rows = 1:7, cols = 1)
setColWidths(wb, 2, 1, widths = 50)
saveWorkbook(wb, paste0(report_name, as_of_date, ".xlsx"), TRUE)
deskjob_table %>% sample_n(5)
deskhistory_table %>% sample_n(5) %>% glimpse()
kable(deskjob_table[sample(nrow(deskjob_table),5),])
library(RCurl)
setwd("C:\\Development\\github\\blog")
blog_files_all <- list.files(getwd(),
#pattern=(".html"),
full.names=F,
recursive = TRUE)
# do not change this file or image files
blog_files <- blog_files_all[blog_files_all != "scripts/updateURLs.R"]
blog_files <- blog_files[grepl(blog_files,pattern = "/images/") != TRUE]
blog_files <- blog_files[grepl(blog_files,pattern = "jpg|png|gif") != TRUE]
pw = "3mypj5xh"
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
devtools::install_github("harryahlas/hrsample")
devtools::install_github("harryahlas/hrsample", force = T)
library(hrsample)
library(tidyverse)
library(scales)
library(lubridate)
library(openxlsx)
# Tracking information
report_name <- "PA73405 - Attrition by Job 2009"
as_of_date <- Sys.Date()
knitr::kable(deskjob_table[sample(nrow(deskjob_table),5),])
knitr::kable(deskhistory_table[sample(nrow(deskhistory_table),5),])
# Summary data frame
hcto_summary <- deskhistory_table %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009,
"Terminated",
"DidNotTerminate")) %>%
count(job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
knitr::kable(hcto_summary)
# Data disclaimer
disclaimer_info <- data.frame(Information =
c("Source: hrsample",
paste("Data as of", as_of_date, "."),
"Data includes all employees rolling up to CEO Danica Hammel who were active at any point from Jan 1, 2009 through December 31, 2009.",
"If the employee had multiple jobs during 2009, only the most recent job is counted.",
"Data is confidential and should be shared on a need to know basis only.",
"Do not distribute externally."))
# Export to Excel
wb <- createWorkbook()
addWorksheet(wb, report_name)
addWorksheet(wb, "Data Disclaimer")
writeDataTable(wb, 1, hcto_summary)
writeDataTable(wb, 2, disclaimer_info)
addStyle(wb, 2, style = createStyle(wrapText = TRUE), rows = 1:7, cols = 1)
setColWidths(wb, 2, 1, widths = 50)
saveWorkbook(wb, paste0(report_name, as_of_date, ".xlsx"), TRUE)
library(tidyverse)
library(hrsample)
library(lubridate)
# Retrieve depth table - NOTE: if desk_ids are added/moved/removed then this needs to be included in loop
library(RMariaDB)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
hierarchy_with_depth.sql <- read_file("scripts/hierarchy_with_depth.sql")
hierarchy_with_depth <- dbGetQuery(HRSAMPLE, hierarchy_with_depth.sql)
# Load hierarchy_table_with_state, saved from 04.
# Note this will not account for new jobs if they are created after step 04.
load("data/hierarchy_table_with_state.rda")
rm(hierarchy_table_with_state)
# Retrieve depth table - NOTE: if desk_ids are added/moved/removed then this needs to be included in loop
hierarchy_with_depth.sql <- read_file("scripts/hierarchy_with_depth.sql")
hierarchy_with_depth <- dbGetQuery(HRSAMPLE, hierarchy_with_depth.sql)
# Create hierarchy and join to lob for report to count  from 01
hierarchy <- dbGetQuery(HRSAMPLE, "SELECT *  FROM hierarchy")
rollup <- dbGetQuery(HRSAMPLE, "SELECT * FROM ROLLUP")
View(rollup)
View(hierarchy_with_depth)
colnames(employeeinfo_table)
managers <- deskhistory_table %>% # their employee#s
semi_join(manager_desk_ids)
# function to get term rate for a manager
#Start manually for a couple
manager_desk_ids <- hierarchy %>%
filter(depth < 4) %>% #manager desk ids
select(desk_id)
managers <- deskhistory_table %>% # their employee#s
semi_join(manager_desk_ids)
manager_desk_ids <- hierarchy_with_depth %>%
filter(depth < 4) %>% #manager desk ids
select(desk_id)
managers <- deskhistory_table %>% # their employee#s
semi_join(manager_desk_ids)
bad_managers_deskhistory <- deskhistory_table %>% # their employee#s
semi_join(manager_desk_ids) %>%
left_join(employeeinfo_table %>%
select(employee_num, bad_employee_flag)) %>%
filter(bad_employee_flag == 1)
deskhistory_table %>% nrow()
143/10000
table(employeeinfo_table$bad_employee_flag)
View(bad_managers_deskhistory)
hierarchy_with_depth %>% filter(depth < 4) %>% nrow()
View(bad_managers_deskhistory)
library(fuzzyjoin)
reports_to_bad_managers <- deskhistory_table %>%
left_join(hierarchy_with_depth %>% select(desk_id, parent_id))
View(reports_to_bad_managers)
deskhistory_w_parent <- deskhistory_table %>%
left_join(hierarchy_with_depth %>% select(desk_id, parent_id))
desk_history_if_bad_manager <- deskhistory_w_parent %>%
fuzzy_semi_join(bad_managers_deskhistory, by = c(
"parent_id" = "desk_id",
"desk_id_start_date" = "desk_id_end_date",
"desk_id_end_date" = "desk_id_start_date"
),
match_fun = list(`==`, `<=`, `>=`)) %>%
# Find them
# Get count of  manager desk id s
# For each desk id Get count of desk ids reporting to it
##NOTE: THIS WILL HAVE TO BE UPDATED WHEN DESK IDS START CHANGING
#if mgr is in role for full year
# Then get count of terms for that year
# Table repair ------------------------------------------------------------
# Active employees
aa <- deskhistory_table %>%
filter(desk_id_end_date >= as.Date("2019-01-02")) %>%
count(desk_id) %>%
arrange(desc(n)) %>%
filter(n>1) %>%
left_join(deskhistory_table)
desk_history_if_bad_manager <- deskhistory_w_parent %>%
fuzzy_semi_join(bad_managers_deskhistory, by = c(
"parent_id" = "desk_id",
"desk_id_start_date" = "desk_id_end_date",
"desk_id_end_date" = "desk_id_start_date"
),
match_fun = list(`==`, `<=`, `>=`))
View(desk_history_if_bad_manager)
table(desk_history_if_bad_manager$termination_flag)
145
2003-04-08
2004-09-17
"145
2003-04-08
2004-09-17"
hierarchy_table %>% filter(desk_id==145)
deskhistory_table %>% filter(desk_id==30)
employeeinfo_table %>% filter(employee_num==40228)
"457
2012-06-08
2013-08-31"
hierarchy_table %>% filter(desk_id==457)
deskhistory_table %>% filter(desk_id==68)
employeeinfo_table %>% filter(employee_num==44691)
deskhistory_table %>% filter(desk_id==68)
hierarchy_table %>% filter(desk_id==457)
deskhistory_table %>% filter(desk_id==68)
employeeinfo_table %>% filter(employee_num==44691)
hierarchy_table %>% filter(desk_id==457)
employeeinfo_table %>% filter(employee_num==21762)
hierarchy_table %>% filter(desk_id==896)
deskhistory_table %>% filter(desk_id==117)
employeeinfo_table %>% filter(employee_num==13066)
employeeinfo_table %>% filter(employee_num==851)
desk_history_if_bad_manager %>% count(termination_flag)
desk_history_if_not_bad_manager <- deskhistory_w_parent %>%
fuzzy_anti_join(bad_managers_deskhistory, by = c(
"parent_id" = "desk_id",
"desk_id_start_date" = "desk_id_end_date",
"desk_id_end_date" = "desk_id_start_date"
),
match_fun = list(`==`, `<=`, `>=`))
desk_history_if_not_bad_manager %>% count(termination_flag)
desk_history_if_bad_manager %>% count(termination_flag)
desk_history_if_bad_manager %>% count(termination_flag) %>% spread(termination_flag, n)
desk_history_if_bad_manager %>% count(termination_flag) %>% spread(termination_flag, n) %>% mutate(pct = `1` / `1` + `0`)
desk_history_if_bad_manager %>% count(termination_flag) %>% spread(termination_flag, n) %>% mutate(pct = `1` / (`1` + `0`))
desk_history_if_not_bad_manager %>% count(termination_flag)%>% spread(termination_flag, n) %>% mutate(pct = `1` / (`1` + `0`))
desk_history_if_bad_manager <- deskhistory_w_parent %>%
fuzzy_semi_join(bad_managers_deskhistory, by = c(
"parent_id" = "desk_id",
"desk_id_start_date" <= "desk_id_end_date",
"desk_id_start_date" >= "desk_id_start_date"
),
match_fun = list(`==`, `<=`, `>=`))
desk_history_if_bad_manager <- deskhistory_w_parent %>%
fuzzy_semi_join(bad_managers_deskhistory, by = c(
"parent_id" = "desk_id",
"desk_id_start_date" = "desk_id_end_date",
"desk_id_start_date" = "desk_id_start_date"
),
match_fun = list(`==`, `<=`, `>=`))
desk_history_if_not_bad_manager <- deskhistory_w_parent %>%
fuzzy_anti_join(bad_managers_deskhistory, by = c(
"parent_id" = "desk_id",
"desk_id_start_date" = "desk_id_end_date",
"desk_id_start_date" = "desk_id_start_date"
),
match_fun = list(`==`, `<=`, `>=`))
desk_history_if_bad_manager %>% count(termination_flag) %>% spread(termination_flag, n) %>% mutate(pct = `1` / (`1` + `0`))
desk_history_if_not_bad_manager %>% count(termination_flag)%>% spread(termination_flag, n) %>% mutate(pct = `1` / (`1` + `0`))
View(desk_history_if_bad_manager)
hierarchy_with_depth %>% filter(117)
hierarchy_with_depth %>% filter(desk_id ==117)
deskhistory_table %>% filter(desk_id==17)
employeeinfo_table %>% filter(employee_num==12427)
deskhistory_w_parent %>% filter(parent_id == 17, desk_id_start_date >= as.Date("2001-11-08"), desk_id_end_date <= as.Date("2011-02-21"))
desk_history_if_bad_manager %>% count(termination_flag) %>% spread(termination_flag, n) %>% mutate(pct = `1` / (`1` + `0`))
desk_history_if_not_bad_manager %>% count(termination_flag)%>% spread(termination_flag, n) %>% mutate(pct = `1` / (`1` + `0`))
#install.packages("RMariaDB")
library(RMariaDB)
library(tidyverse)
install.packages("backports")
library(tidyverse)
library(sqlpetr)
sp_docker_remove_container("cattle")
sp_check_that_docker_is_up()
sp_make_simple_pg("cattle")
sp_check_that_docker_is_up()
sp_docker_containers_tibble()
con <- sp_get_postgres_connection(
host = "localhost",
port = 5439,
user = "postgres",
password = "postgres",
dbname = "postgres",
seconds_to_test = 30,
connection_tab = TRUE
)
# State/County Info -------------------------------------------------------
#### Note: not currently used - placeholder
#https://www.ers.usda.gov/webdocs/DataFiles/48747/PopulationEstimates.xls?v=4934.5
state_county_population <- readxl::read_excel("data/PopulationEstimates.xls", skip = 2)
View(state_county_population)
# Create business lines ---------------------------------------------------
lob <- read_csv("data/lob.csv")
sum(lob$proportion)# should equal 1
# Create list of cities and states - source: https://raw.githubusercontent.com/grammakov/USA-cities-and-states/master/us_cities_states_counties.csv
cities <- read_delim("data/cities.csv", delim = "|")
counties <- cities %>% select(County) %>% distinct()
View(counties)
state_county_population2 <- state_county_population %>%
mutate(Area_Name = toupper(gsub(pattern = "county|borough|census area", "", Area_Name, ignore.case = TRUE))) %>%
select(Area_Name)
counties_scp2 <- state_county_population2 %>% select(Area_Name) %>% distinct()
counties_cities %>% left_join(counties_scp2) %>% nrow()
## Temp analysis
counties_cities <- cities %>% select(County) %>% distinct()
counties_cities %>% left_join(counties_scp2) %>% nrow()
state_county_population2 <- state_county_population %>%
mutate(County = toupper(gsub(pattern = "county|borough|census area", "", Area_Name, ignore.case = TRUE))) %>%
select(County)
counties_scp2 <- state_county_population2 %>% select(Area_Name) %>% distinct()
counties_scp2 <- state_county_population2 %>% select(County) %>% distinct()
counties_cities %>% left_join(counties_scp2) %>% nrow()
## Temp analysis
counties_cities <- cities %>% select(County, State = `State short`) %>% distinct()
counties_scp2 <- state_county_population2 %>% select(County, State) %>% distinct()
state_county_population2 <- state_county_population %>%
mutate(County = toupper(gsub(pattern = "county|borough|census area", "", Area_Name, ignore.case = TRUE))) %>%
select(County)
counties_scp2 <- state_county_population2 %>% select(County, State) %>% distinct()
state_county_population2 <- state_county_population %>%
mutate(County = toupper(gsub(pattern = "county|borough|census area", "", Area_Name, ignore.case = TRUE))) %>%
select(County)
counties_scp2 <- state_county_population2 %>% select(County, State) %>% distinct()
state_county_population2 <- state_county_population %>%
mutate(County = toupper(gsub(pattern = "county|borough|census area", "", Area_Name, ignore.case = TRUE))) %>%
select(County, State) %>%
distinct()
counties_scp2 <- state_county_population2 %>% select(County, State) %>% distinct()
counties_cities %>% left_join(counties_scp2) %>% nrow()
counties_cities %>% semi_join(counties_scp2) %>% nrow()
aa <- counties_cities %>% semi_join(counties_scp2) %>% nrow()
aa <- counties_cities %>% semi_join(counties_scp2)
View(aa)
cities %>%  filter(city == "Berkeley")
cities %>%  filter(City == "Berkeley")
state_county_population %>%  filter(Area_Name == "ALAMEDA")
state_county_population %>%  filter(Area_Name starts_with("ALAMEDA"))
state_county_population %>%  filter( starts_with(Area_Name, "ALAMEDA"))
state_county_population %>%  filter(Area_Name== starts_with( "ALAMEDA"))
?starts_with
state_county_population %>%  filter( starts_with(Area_Name, "Alameda"))
state_county_population %>%  filter( Area_Name= "Alameda")
state_county_population %>%  filter( Area_Name== "Alameda")
state_county_population %>%  filter( Area_Name== "Alameda County")
glimpse(state_county_population)
state_county_population %>%  filter( Area_Name== "San Francisco County")
aa <- state_county_population %>% select(Area_Name)
View(aa)
aa[32]
aa[32,]
aa <- arrange(aa, Area_Name)
aa[32,]
ff <- aa[32,]
ff
ff == "Alameda County"
state_county_population %>%  filter(Area_Name== "Alameda County")
state_county_population %>%  filter(County== "ALAMEDA")
state_county_population2 %>%  filter(County== "ALAMEDA")
aaa <- state_county_population2 %>%  select(County) %>% arrange()
View(aaa)
aaa <- state_county_population2 %>%  select(County) %>% arrange(County)
View(aaa)
aaa[32,]
state_county_population2 <- state_county_population %>%
mutate(County = toupper(gsub(pattern = "county| borough| census area", "", Area_Name, ignore.case = TRUE))) %>%
select(County, State) %>%
distinct()
counties_scp2 <- state_county_population2 %>% select(County, State) %>% distinct()
aa <- counties_cities %>% semi_join(counties_scp2)
View(aa)
aaa <- state_county_population2 %>%  select(County) %>% arrange(County)
aaa[32,]
state_county_population2 <- state_county_population %>%
mutate(County = trimws(toupper(gsub(pattern = "county| borough| census area", "", Area_Name, ignore.case = TRUE)))) %>%
select(County, State) %>%
distinct()
counties_scp2 <- state_county_population2 %>% select(County, State) %>% distinct()
aa <- counties_cities %>% semi_join(counties_scp2)
