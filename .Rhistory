distinct() %>%
left_join(hierarchy_with_depth) %>%
select(employee_num, depth) %>%
distinct() %>%
left_join(deskhistory_table) %>%
select(employee_num, depth, promotion_flag) %>%
distinct() %>%
count(depth, promotion_flag) %>%
ggplot(aes( x = as.factor(depth), y = n, fill = promotion_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees who received\na Promotion at some point by level")
# 5. Number of TMs right now
deskhistory_table %>%
filter(desk_id_end_date >= as.Date("2019-01-01"),
desk_id_start_date <= as.Date("2019-01-01")) %>%
nrow()
# 6. check job by states
state_ratios <- deskhistory_table %>%
filter(desk_id_end_date >= as.Date("2019-01-01")) %>%
left_join(employeeinfo_table) %>%
count(state) %>%
left_join(employeeinfo_table %>%
count(state) %>%
rename(state_ratio = n)) %>%
mutate(pct_state = n / state_ratio)  %>%
arrange(desc(pct_state))
# 7. Check promotions - see if people are getting promotions after a 1 or 2 review
deskhistory_promotions <- deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
promotionyear = ifelse(promotion_flag == 1, endyear, NA)) %>%
filter(!is.na(promotionyear))
View(state_ratios)
perf_promotions <- performancereview_table %>%
mutate(promotionyearcheck = year + 1) %>%
left_join(deskhistory_promotions, by = c("employee_num", "promotionyearcheck" = "promotionyear"))
perf_promotions %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(promotion_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n, fill = promotion_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that promoted the year \nfollowing review score below",
subtitle = "Maybe should be lower for 1 or 2 scores")
perf_promotions %>%
count(promotion_flag,  perf_review_score) %>%
ggplot(aes(x = as.factor(perf_review_score), y = n, fill = promotion_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that promoted the year \nfollowing review score below",
subtitle = "Maybe should be lower for 1 or 2 scores")
# 8. Termination rate is low
deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2010-01-01"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
mutate(termination = if_else(termination_flag == 1 & (lubridate::year(desk_id_end_date) == 2009 ), "term2017", "notterm2017")) %>%
count(termination) %>%
spread(key = termination, value = n) %>%
mutate(pct = term2017 / (term2017 + notterm2017))
# Headcount by Year -------------------------------------------------------
hcyear <- seq(1999,2019,1)
get_end_of_year_headcount <- function (hcyear = 1999) {
x <- deskhistory_table %>%
filter(desk_id_end_date >= as.Date(paste0(hcyear, "-12-31")),
desk_id_start_date <= as.Date(paste0(hcyear, "-12-31"))) %>%
nrow()
return(x)
}
hc_by_year <- tibble(hcyear = hcyear) %>%
rowwise() %>%
mutate(end_of_year_hc = get_end_of_year_headcount(hcyear))
hc_by_year %>%
ggplot(aes(hcyear, end_of_year_hc)) +
geom_col()
source("02_variables.R")
#terminations by year
terms_by_year <- deskhistory_table %>%
filter(termination_flag == 1) %>%
left_join(employeeinfo_table) %>%
mutate(year = year(desk_id_end_date)) %>%
count(bad_employee_flag, year) %>%
spread((bad_employee_flag), n) %>%
left_join(hc_by_year, by = c("year" = "hcyear")) %>%
mutate(normal_emp_pct = (`0` / end_of_year_hc),
bad_emp_pct = (`1` / (end_of_year_hc * bad_employee_ratio[1]))) # divided by 10 because 1/10 employees are bad
bad_employee_table <- dbGetQuery(HRSAMPLE, "select * from bademployee")
#terminations by year
terms_by_year <- deskhistory_table %>%
filter(termination_flag == 1) %>%
left_join(employeeinfo_table) %>%
left_join(bad_employee_table) %>%
mutate(year = year(desk_id_end_date)) %>%
count(bad_employee_flag, year) %>% # can get bad employee table
spread((bad_employee_flag), n) %>%
left_join(hc_by_year, by = c("year" = "hcyear")) %>%
mutate(normal_emp_pct = (`0` / end_of_year_hc),
bad_emp_pct = (`1` / (end_of_year_hc * bad_employee_ratio[1]))) # divided by 10 because 1/10 employees are bad
terms_by_year %>%
filter(!is.na(bad_emp_pct), year < 2020) %>%
ggplot(aes(year, bad_emp_pct)) +
geom_line()
# Level changing ----------------------------------------------------------
# None yet
# deskhistory job level distinct count
deskhistory_table %>%
select(employee_num, desk_id) %>%
left_join(hierarchy_with_depth %>% select(desk_id, depth)) %>%
select(employee_num, depth) %>%
distinct() %>%
count(employee_num) %>%
arrange(desc(n))
# Time between jobs -------------------------------------------------------
# Next: maybe add tenure by line of business
deskhistory_table %>%
filter(termination_flag == 1, desk_id_end_date < as.Date("2019-01-01")) %>%
select(employee_num) %>%
left_join(deskhistory_table) %>%
group_by(employee_num) %>%
mutate(end_date = max(desk_id_end_date),
start_date = min(desk_id_start_date)) %>%
ungroup() %>%
mutate(tenure = as.numeric(end_date - start_date)) %>%
select(employee_num, tenure) %>%
distinct() %>%
left_join(employeeinfo_table %>%
select(employee_num, bad_employee_flag))%>%
ggplot(aes(as.factor(bad_employee_flag), tenure)) +
geom_boxplot()
# Time between jobs -------------------------------------------------------
# Next: maybe add tenure by line of business
deskhistory_table %>%
filter(termination_flag == 1, desk_id_end_date < as.Date("2019-01-01")) %>%
select(employee_num) %>%
left_join(deskhistory_table) %>%
left_join(bad_employee_table) %>%
group_by(employee_num) %>%
mutate(end_date = max(desk_id_end_date),
start_date = min(desk_id_start_date)) %>%
ungroup() %>%
mutate(tenure = as.numeric(end_date - start_date)) %>%
select(employee_num, tenure) %>%
distinct() %>%
left_join(employeeinfo_table %>%
select(employee_num, bad_employee_flag))%>%
ggplot(aes(as.factor(bad_employee_flag), tenure)) +
geom_boxplot()
deskhistory_table %>%
filter(termination_flag == 1, desk_id_end_date < as.Date("2019-01-01")) %>%
select(employee_num) %>%
left_join(deskhistory_table) %>%
left_join(bad_employee_table) %>%
group_by(employee_num)
deskhistory_table %>%
filter(termination_flag == 1, desk_id_end_date < as.Date("2019-01-01")) %>%
select(employee_num) %>%
left_join(deskhistory_table) %>%
left_join(bad_employee_table) %>%
group_by(employee_num) %>%
mutate(end_date = max(desk_id_end_date),
start_date = min(desk_id_start_date)) %>%
ungroup() %>%
mutate(tenure = as.numeric(end_date - start_date)) %>%
select(employee_num, tenure)
# Time between jobs -------------------------------------------------------
# Next: maybe add tenure by line of business
deskhistory_table %>%
filter(termination_flag == 1, desk_id_end_date < as.Date("2019-01-01")) %>%
select(employee_num) %>%
left_join(deskhistory_table) %>%
group_by(employee_num) %>%
mutate(end_date = max(desk_id_end_date),
start_date = min(desk_id_start_date)) %>%
ungroup() %>%
mutate(tenure = as.numeric(end_date - start_date)) %>%
select(employee_num, tenure) %>%
distinct() %>%
left_join(bad_employee_table) %>%
ggplot(aes(as.factor(bad_employee_flag), tenure)) +
geom_boxplot()
deskhistory_table %>% count(termination_flag)
3600/20
#install.packagesxxxx
library(hrsample)
library(tidyverse)
library(scales)
library(openxlsx)
# Tracking information
as_of_date <- Sys.Date()
report_name <- "PA73405 - Attrition by Job 2009"
knitr::kable(deskhistory_table[sample(nrow(deskhistory_table),5),])
knitr::kable(deskjob_table[sample(nrow(deskjob_table),5),])
glimpse(rollup_view, width = 70)
#KEEP
rollup_view %>% count(lvl01_org) %>% arrange(desc(n))
#new
LOB_list <- rollup_view %>%
select(lvl01_org, lvl01_desk_id) %>%
distinct() %>%
filter(lvl01_org != "CEO")
LOB_list
# New - add hierarchy information to deskhistory table
deskhistory_table_hierarchy <- deskhistory_table %>%
left_join(rollup_view %>% select(lvl01_desk_id,
lvl01_org,
lvl04_desk_id) %>% distinct(), by = c("desk_id" = "lvl04_desk_id"))
glimpse(deskhistory_table_hierarchy[sample(1:nrow(deskhistory_table_hierarchy)),], width = 70)
# New - Start loop
for (i in (1:length(LOB_list$lvl01_org))) {
org_name <- LOB_list$lvl01_org[i] # New
# Summary data frame
hcto_summary <- deskhistory_table_hierarchy %>%
filter(lvl01_org == LOB_list$lvl01_org[i]) %>% # New
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
knitr::kable(hcto_summary)
# New - Data disclaimer
disclaimer_info <-   data.frame(Information =
c("Source: https://github.com/harryahlas/sample-hr-database/tree/master/data",
paste("Data as of", as_of_date, "."),
paste("Data includes all employees in", org_name ,"who were active at any point from Jan 1, 2009 through December 31, 2009."), # New
"If the employee had multiple jobs during 2009, only the most recent job is counted.",
"Data is confidential and should be shared on a need to know basis only.",
"Do not distribute externally."))
# Export to Excel
wb <- createWorkbook()
addWorksheet(wb, report_name)
addWorksheet(wb, "Data Disclaimer")
writeDataTable(wb, 1, hcto_summary)
writeDataTable(wb, 2, disclaimer_info)
addStyle(wb, 2, style = createStyle(wrapText = TRUE), rows = 1:7, cols = 1)
setColWidths(wb, 2, 1, widths = 50)
saveWorkbook(wb, paste0("", report_name, " - ", org_name, " - ", as_of_date, ".xlsx"), TRUE) # New
}
LOB_list
i=6
org_name <- LOB_list$lvl01_org[i] # New
org_name
View(LOB_list)
i=4
org_name <- LOB_list$lvl01_org[i] # New
org_name
# Summary data frame
hcto_summary <- deskhistory_table_hierarchy %>%
filter(lvl01_org == LOB_list$lvl01_org[i]) %>% # New
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
View(hcto_summary)
hcto_summary <- deskhistory_table_hierarchy %>%
filter(lvl01_org == LOB_list$lvl01_org[i]) %>% # New
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num)
View(hcto_summary)
# Summary data frame
hcto_summary <- deskhistory_table_hierarchy %>%
filter(lvl01_org == LOB_list$lvl01_org[i]) %>% # New
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
# New - Start loop
for (i in (1:length(LOB_list$lvl01_org))) {
org_name <- LOB_list$lvl01_org[i] # New
# Summary data frame
hcto_summary <- deskhistory_table_hierarchy %>%
filter(lvl01_org == LOB_list$lvl01_org[i]) %>% # New
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
knitr::kable(hcto_summary)
# New - Data disclaimer
disclaimer_info <-   data.frame(Information =
c("Source: https://github.com/harryahlas/sample-hr-database/tree/master/data",
paste("Data as of", as_of_date, "."),
paste("Data includes all employees in", org_name ,"who were active at any point from Jan 1, 2009 through December 31, 2009."), # New
"If the employee had multiple jobs during 2009, only the most recent job is counted.",
"Data is confidential and should be shared on a need to know basis only.",
"Do not distribute externally."))
# Export to Excel
wb <- createWorkbook()
addWorksheet(wb, report_name)
addWorksheet(wb, "Data Disclaimer")
writeDataTable(wb, 1, hcto_summary)
writeDataTable(wb, 2, disclaimer_info)
addStyle(wb, 2, style = createStyle(wrapText = TRUE), rows = 1:7, cols = 1)
setColWidths(wb, 2, 1, widths = 50)
saveWorkbook(wb, paste0("", report_name, " - ", org_name, " - ", as_of_date, ".xlsx"), TRUE) # New
}
# Summary data frame
hcto_summary <- deskhistory_table_hierarchy %>%
filter(lvl01_org == LOB_list$lvl01_org[i]) %>% # New
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
library(lubridate)
# New - Start loop
for (i in (1:length(LOB_list$lvl01_org))) {
org_name <- LOB_list$lvl01_org[i] # New
# Summary data frame
hcto_summary <- deskhistory_table_hierarchy %>%
filter(lvl01_org == LOB_list$lvl01_org[i]) %>% # New
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
knitr::kable(hcto_summary)
# New - Data disclaimer
disclaimer_info <-   data.frame(Information =
c("Source: https://github.com/harryahlas/sample-hr-database/tree/master/data",
paste("Data as of", as_of_date, "."),
paste("Data includes all employees in", org_name ,"who were active at any point from Jan 1, 2009 through December 31, 2009."), # New
"If the employee had multiple jobs during 2009, only the most recent job is counted.",
"Data is confidential and should be shared on a need to know basis only.",
"Do not distribute externally."))
# Export to Excel
wb <- createWorkbook()
addWorksheet(wb, report_name)
addWorksheet(wb, "Data Disclaimer")
writeDataTable(wb, 1, hcto_summary)
writeDataTable(wb, 2, disclaimer_info)
addStyle(wb, 2, style = createStyle(wrapText = TRUE), rows = 1:7, cols = 1)
setColWidths(wb, 2, 1, widths = 50)
saveWorkbook(wb, paste0("", report_name, " - ", org_name, " - ", as_of_date, ".xlsx"), TRUE) # New
}
glimpse(rollup_view, width = 70)
rollup_view$depth[1]
rollup_view$depth[2]
hierarchy_table[1:5,]
glimpse(rollup_view, width = 70)
#KEEP
rollup_view %>% count(lvl01_org) %>% arrange(desc(n))
#new
LOB_list <- rollup_view %>%
select(lvl01_org, lvl01_desk_id) %>%
distinct() %>%
filter(lvl01_org != "CEO")
LOB_list
glimpse(deskhistory_table_hierarchy[sample(1:nrow(deskhistory_table_hierarchy)),], width = 70)
LOB_list
#devtools::install_github("harryahlas/hrsample")
library(hrsample)
library(tidyverse)
library(scales)
library(lubridate)
library(openxlsx)
# Tracking information
as_of_date <- Sys.Date()
report_name <- "PA73405 - Attrition by Job 2009"
glimpse(rollup_view, width = 70)
rollup_view %>% count(lvl01_org) %>% arrange(desc(n))
deskhistory_table_hierarchy <- deskhistory_table %>%
left_join(rollup_view %>% select(lvl01_desk_id,
lvl01_org,
lvl04_desk_id) %>% distinct(),
by = c("desk_id" = "lvl04_desk_id"))
glimpse(deskhistory_table_hierarchy[sample(1:nrow(deskhistory_table_hierarchy)),], width = 70)
LOB_list <- rollup_view %>%
select(lvl01_org, lvl01_desk_id) %>%
distinct() %>%
filter(lvl01_org != "CEO")
LOB_list
setwd("C:/Development/github/sample-hr-database")
for (i in (1:length(LOB_list$lvl01_org))) {
org_name <- LOB_list$lvl01_org[i]
hcto_summary <- deskhistory_table_hierarchy %>%
filter(lvl01_org == LOB_list$lvl01_org[i]) %>%
left_join(deskjob_table) %>%
filter(desk_id_start_date <= as.Date("2009-12-31"),
desk_id_end_date >= as.Date("2009-01-01")) %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(year = "2009",
termination_flag = if_else(termination_flag == 1 & year(desk_id_end_date) == 2009, "Terminated", "DidNotTerminate")) %>%
count(year, job_name, termination_flag) %>%
spread(termination_flag, n, fill = 0) %>%
mutate(Headcount =  Terminated + DidNotTerminate,
TerminationRate = percent(Terminated / Headcount)) %>%
arrange(desc(Terminated / Headcount))
disclaimer_info <-   data.frame(Information =
c("Source: hrsample database",
paste("Data as of", as_of_date, "."),
paste("Data includes all employees in", org_name ,"who were active at any point from Jan 1, 2009 through December 31, 2009."), # Added for this example
"If the employee had multiple jobs during 2009, only the most recent job is counted.",
"Data is confidential and should be shared on a need to know basis only.",
"Do not distribute externally."))
wb <- createWorkbook()
addWorksheet(wb, report_name)
addWorksheet(wb, "Data Disclaimer")
writeDataTable(wb, 1, hcto_summary)
writeDataTable(wb, 2, disclaimer_info)
addStyle(wb, 2, style = createStyle(wrapText = TRUE), rows = 1:7, cols = 1)
setColWidths(wb, 2, 1, widths = 50)
saveWorkbook(wb, paste0("output/", report_name, " - ", org_name, " - ", as_of_date, ".xlsx"), TRUE) # New
}
library(RCurl)
setwd("C:\\Development\\github\\blog")
blog_files_all <- list.files(getwd(),
#pattern=(".html"),
full.names=F,
recursive = TRUE)
# do not change this file or image files
blog_files <- blog_files_all[blog_files_all != "scripts/updateURLs.R"]
blog_files <- blog_files[grepl(blog_files,pattern = "/images/") != TRUE]
blog_files <- blog_files[grepl(blog_files,pattern = "jpg|png|gif") != TRUE]
pw <- "3mypj5xh"
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
setwd("C:\\Development\\github\\blog")
blog_files_all <- list.files(getwd(),
#pattern=(".html"),
full.names=F,
recursive = TRUE)
blog_files <- blog_files_all[blog_files_all != "scripts/updateURLs.R"]
blog_files <- blog_files[grepl(blog_files,pattern = "/images/") != TRUE]
blog_files <- blog_files[grepl(blog_files,pattern = "jpg|png|gif") != TRUE]
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
setwd("C:/Development/github/sample-hr-database")
#devtools::install_github("harryahlas/hrsample")
library(hrsample)
rollup_view
devtools::install_github("harryahlas/hrsample")
#devtools::install_github("harryahlas/hrsample")
library(hrsample)
#devtools::install_github("harryahlas/hrsample")
library(hrsample)
rollup_view
table(rollup_view$depth)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
library(RMariaDB)
library(tidyverse)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
rv <- dbGetQuery(HRSAMPLE, "select * from rollup")
