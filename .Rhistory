rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
left_join(hierarchy, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
left_join(hierarchy, by = c("lvl03_desk_id" = "parent_id"))
# Add level 1-3 employees since hierarchy_spread only counts level 04
hierarchy_spread_lvl01 <- hierarchy_spread %>%
select(lvl00_desk_id, lvl00_org, desk_id = lvl01_desk_id) %>%
distinct()
hierarchy_spread_lvl02 <- hierarchy_spread %>%
select(lvl01_desk_id, lvl01_org, desk_id = lvl02_desk_id) %>%
distinct()
hierarchy_spread_lvl03 <- hierarchy_spread %>%
select(lvl01_desk_id, lvl01_org, desk_id = lvl03_desk_id) %>%
distinct()
### Note this hierarchy_spread_all is different than from 04. Includes everyone except CEO
hierarchy_spread_all <- hierarchy_spread %>%
bind_rows(hierarchy_spread_lvl01, hierarchy_spread_lvl02, hierarchy_spread_lvl03)
# Get highest seat of lvl01s. Anyone below this number will not get a review here
desk_id_no_review_max = max(hierarchy_spread_all$lvl01_desk_id, na.rm = TRUE)
# Import perf_review_distributions
performance_review_ratios <- read_csv("data/performance_review_ratios.csv")
# Get list of all employees in deskhistory except CEO (desk_id 1)
employee_list <- deskhistory_table %>%
filter(desk_id > desk_id_no_review_max) %>%
select(employee_num) %>%
distinct()
# Economic trend information
prime_rate <- read_csv("data/prime_rate.csv")
# Random chance that employee does not get a review for some reason
odds_of_no_review <- .013
review_year_list <- tibble()
salaryhistory_table <- tibble()
# Promotion/new desk_id salary increase min/max
promo_new_desk_salary_increase_min <- .04
promo_new_desk_salary_increase_max <- .15
standard_salary_increase_min <- .01
standard_salary_increase_max <- .03
# Start loop --------------------------------------------------------------
for (i in 1:nrow(employee_list)) {
employee_num_temp <- employee_list$employee_num[i]
# Minimum review value reset
min_review_value <- 1
# Pull employee's entire desk history
deskhistory_table_temp <- deskhistory_table %>%
filter(employee_num == employee_num_temp)
# Identify full years employee was active
# Find years with promotions
promotions_temp <- deskhistory_table_temp %>%
filter(promotion_flag == 1) %>%
mutate(promotion_year = year(desk_id_start_date)) %>%
select(promotion_year)
# See if employee has any promotions
has_promotion <- nrow(promotions_temp) > 0
# if they have any promotions then their minimum perf_review = 3
if (has_promotion == TRUE) {min_review_value <- 3}
# for each row, identify the full years they were active.
company_start <- min(deskhistory_table_temp$desk_id_start_date)
company_start_month <- month(company_start)
company_start_year <- year(company_start)
company_end <- min(max(deskhistory_table_temp$desk_id_end_date), max_date)
company_end_month <- month(company_end)
company_end_year <- year(company_end)
# if start month is before october then count that year, else count next year
review_year_start <- case_when(company_start_month < 10 ~ company_start_year,
(company_start_month >= 10) & (company_end_year > (company_start_year + 1)) ~   company_start_year + 1,
TRUE ~ 0)
#####IF REVIEWS ARE MISSING MAYBE BECAUSE CHANGED LINE BELOW
review_year_end <- case_when(company_end_month > 3 ~ company_end_year - 1,
#company_end_month <= 3 ~ max(company_end_year - 2, review_year_start),
company_end_month <= 3 ~ company_end_year - 2,
TRUE ~ 0)
if (review_year_start == 0 | review_year_end == 0) next
if (review_year_start > review_year_end) next
review_years <- seq(review_year_start, review_year_end, 1)
# Calculate reviews
review_year_list_append <- tibble(employee_numx = rep(employee_num_temp, length(review_years)),
review_year = review_years,
review_date = as.Date(paste0(review_year + 1, "-03-01"))) %>%
fuzzy_left_join(deskhistory_table, by = c(
"employee_numx" = "employee_num",
"review_date" = "desk_id_start_date",
"review_date" = "desk_id_end_date"
),
match_fun = list(`==`, `>=`, `<=`)) %>%
select(-employee_numx) %>%
left_join(hierarchy_spread_all %>% select(desk_id, lvl01_org)) %>%
left_join(performance_review_ratios, by = c("lvl01_org" = "LOB")) %>%
arrange(review_year) %>%
mutate(next_year_promotion_flag = lead(promotion_flag)) %>% #did they have promotion the next year?
mutate(perf_review_score_4 = if_else(promotion_flag ==1, perf_review_score_4 * 2, perf_review_score_4),
perf_review_score_5 = if_else(promotion_flag ==1, perf_review_score_5 * 2, perf_review_score_5)) %>% #if so then double their chances of getting a 4 or 5
rowwise() %>%
# Calculate performance review
mutate(perf_review_score = max(sample(c(1,2,3,4,5,NA), 1,
prob= c(perf_review_score_1,
perf_review_score_2,
perf_review_score_3,
perf_review_score_4,
perf_review_score_5,
odds_of_no_review),
replace=TRUE),
min_review_value))
review_year_list <- bind_rows(review_year_list, review_year_list_append)
# Create salary increases for promotions and job changes
salary_increases_promo_new_desk <- deskhistory_table_temp %>%
# Remove increase for start dates at beginning of data
rowwise() %>%
mutate(salary_increase = case_when(
desk_id_start_date == hierarchy_start_date ~ 0,
### NEW added below line and needs testing
desk_id_start_date == min(desk_id_start_date) ~ 0,
TRUE ~ sample(seq(promo_new_desk_salary_increase_min,promo_new_desk_salary_increase_max,.005),1))) %>%
ungroup() %>%
mutate(new_desk_id = lag(desk_id) != desk_id) %>% # if it is a new desk_id d b/w oct 1 - april 30 then add year to list so no march 1 increas
mutate(merit_increase_remove_year = case_when(
(promotion_flag == 1 | new_desk_id == TRUE ) & month(desk_id_start_date) <= 4 ~ year(desk_id_start_date) - 1, # no merit increase if recently got promotion
(promotion_flag == 1 | new_desk_id == TRUE ) & month(desk_id_start_date) >= 10 ~ year(desk_id_start_date)  # or if got new deskid at end of last year
),
salary_increase_date = desk_id_start_date) %>%
filter(salary_increase > 0)
# create years for no increase
# if there was a promotion between Jan 1 and Apr 30 then add year to list so no march 1 increase
# if it is a new desk id b/w oct 1 - april 30 then add year to list so no march 1 increase
# Create salary increases for years without promotions and job changes
# tie this to prime rate and maybe LOB, should be 1-7%
####ERROR HERE
salary_increases_standard <- tibble(review_year = review_years) %>%
anti_join(salary_increases_promo_new_desk, by = c("review_year" = "merit_increase_remove_year"))
if(nrow(salary_increases_standard) == 0) next # needed to avoid error in next section
salary_increases_standard <- salary_increases_standard %>%
left_join(prime_rate, by = c("review_year" = "year")) %>%
left_join(review_year_list_append %>% select(review_year, perf_review_score)) %>%
rowwise() %>%
mutate(employee_num = employee_num_temp,
prime_rate_add = max((prime_rate_est - .03) / 2, 0),
perf_review_add = case_when(perf_review_score == 5 ~ .03,
perf_review_score == 4 ~ .015,
TRUE ~ 0),
no_merit_multiplier = if_else(perf_review_score %in% c(1,2), 0, 1)) %>%
mutate(salary_increase = (sample(seq(standard_salary_increase_min, standard_salary_increase_max,.001),1)
+ prime_rate_add
+ perf_review_add)
* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
### enhancemnt: if possible make it higher if they got 4 or 5
# Starting salary plug for later function
starting_salary_table <-  create_starting_salary(employee_num_temp)
starting_salary <- starting_salary_table$salary[1]
# Bind starting salary, promotions/new desk, and standard increases
salaryhistory_table_append <- bind_rows(starting_salary_table,
salary_increases_promo_new_desk %>%
select(employee_num, salary_increase_date, salary_increase),
salary_increases_standard %>%
select(employee_num, salary_increase_date, salary_increase)) %>%
arrange(salary_increase_date) %>%
mutate(salary = starting_salary * cumprod(1 + salary_increase))
if (is.na(salaryhistory_table_append$salary[1])) {
print("skipped, initial salary missing")
next
}
salaryhistory_table <- bind_rows(salaryhistory_table, salaryhistory_table_append)
print(i)
}
# Remove rows without performance review scores from performance review table
review_year_list <- review_year_list %>%
filter(!is.na(perf_review_score))
# Replace NAs on salaryhistory starting_salary_flag with N
salaryhistory_table <- salaryhistory_table %>%
mutate(starting_salary_flag = if_else(is.na(starting_salary_flag),
"N",
starting_salary_flag))
# Backup
save(review_year_list, file = "data/review_year_list.rda")
save(salaryhistory_table, file = "data/salaryhistory_table.rda")
dbGetQuery(HRSAMPLE, "select count (*) from performancereview")
dbGetQuery(HRSAMPLE, "select count (*) from performancereview;")
dbGetQuery(HRSAMPLE, "select count(*) from performancereview;")
# Populate performancereview
review_year_list_sql <- paste(
"INSERT INTO performancereview (employee_num, year, perf_review_score) VALUES ",
paste0(
"('",
review_year_list$employee_num, "','",
review_year_list$review_year, "','",
review_year_list$perf_review_score, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, review_year_list_sql)
dbGetQuery(HRSAMPLE, "select count(*) from salaryhistory;")
# Populate salaryhistory
salaryhistory_sql <- paste(
"INSERT INTO salaryhistory (employee_num, salary_effective_date, salary, salary_increase, starting_salary_flag) VALUES ",
paste0(
"('",
salaryhistory_table$employee_num, "','",
salaryhistory_table$salary_increase_date, "','",
salaryhistory_table$salary, "','",
salaryhistory_table$salary_increase, "','",
salaryhistory_table$starting_salary_flag, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, salaryhistory_sql)
temp_salary_calc_table <- salaryhistory_table %>%
arrange(employee_num, salary_increase) %>%
mutate(salary = 0) %>%
mutate(salary = case_when(lag(employee_num) != employee_num ~ 50000,
TRUE ~ lag(salary) * (1 + salary_increase)))
# Check TM
checktable <- deskhistory_table %>%
group_by(employee_num) %>%
summarize(start_date = min(desk_id_start_date),
end_date = max(desk_id_end_date))
reviewcheck <- review_year_list %>%
group_by(employee_num) %>%
summarize(start_year = min(review_year),
end_year = max(review_year))
validation <- checktable %>%
left_join(reviewcheck)
validation
library(tidyverse)
library(hrsample)
library(lubridate)
# No rehires --------------------------------------------------------------
deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
group_by(employee_num) %>%
mutate(mintermyear = min(termyear, na.rm = TRUE)) %>%
ungroup() %>%
group_by(employee_num) %>%
filter(endyear != termyear) # 0 rows means no rehires
# 3. Graph review score vs tenure
# a. review in 2008 < 3 then higher chance of turnover in 2009?
deskhistory_terms <- deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
termyear = ifelse(termination_flag == 1, endyear, NA)) %>%
filter(!is.na(termyear))
perf_terms <- performancereview_table %>%
mutate(termyearcheck = year + 1) %>%
left_join(deskhistory_terms, by = c("employee_num", "termyearcheck" = "termyear"))
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n, fill = termination_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that termed the year \nfollowing review score below",
subtitle = "Should be higher for 1 or 2 scores")
perf_terms %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(termination_flag,  poor_perf_review_flag)
#   b. turnover rate for tms with 1-2 vs 3, 4,5
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
left_join(deskhistory_terms %>%
select(employee_num, termination_flag)) %>%
ungroup() %>%
count(min_perf_review, termination_flag) %>%
ggplot(aes(x = as.factor(min_perf_review), y = n, fill = termination_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that termed by their minimum review score",
subtitle = "Should be higher for 1 or 2 scores")
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
left_join(deskhistory_terms %>%
select(employee_num, termination_flag)) %>%
ungroup() %>%
count(min_perf_review, termination_flag)
#   b. tenure for tms with 1-2 vs 3, 4,5
termed_employees_start_end <- deskhistory_terms %>%
select(employee_num) %>%
left_join(deskhistory_table, by = "employee_num") %>%
group_by(employee_num) %>%
summarize(start_date = min(desk_id_start_date),
end_date = max(desk_id_end_date)) %>%
filter(end_date != as.Date("2999-01-01")) %>%
mutate(tenure = as.numeric(round((end_date - start_date) / 365, 3))) %>%
ungroup()
performancereview_table %>%
group_by(employee_num) %>%
mutate(min_perf_review = min(perf_review_score, na.rm = TRUE)) %>%
filter(perf_review_score == min_perf_review) %>%
filter(row_number() == 1) %>%
select(employee_num, min_perf_review) %>%
right_join(termed_employees_start_end) %>%
ungroup() %>%
group_by(min_perf_review) %>%
summarize(avg_tenure = mean(tenure, na.rm = TRUE),
count = n()) %>%
ggplot(aes(x = as.factor(min_perf_review), y = avg_tenure, size = count)) +
geom_point() +
labs(title = "Avg Tenure by their minimum review score",
subtitle = "Should be lower for 1 or 2 scores.
Difficult to have minimum 4 or 5 score.
Super difficult if you have long tenure.
For that reason, lower tenure for 4-5s.")
# Retrieve depth table - NOTE: if desk_ids are added/moved/removed then this needs to be included in loop
library(RMariaDB)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
hierarchy_with_depth.sql <- read_file("scripts/hierarchy_with_depth.sql")
hierarchy_with_depth <- dbGetQuery(HRSAMPLE, hierarchy_with_depth.sql)
# a. No movement between levels
deskhistory_table %>%
select(employee_num, desk_id) %>%
distinct() %>%
left_join(hierarchy_with_depth) %>%
select(employee_num, depth) %>%
distinct() %>%
count(employee_num) %>%
rename(count_of_different_levels = n) %>%
arrange(desc(count_of_different_levels))
# b. Turnover seems ok
deskhistory_table %>%
select(employee_num, desk_id) %>%
distinct() %>%
left_join(hierarchy_with_depth) %>%
select(employee_num, depth) %>%
distinct() %>%
left_join(termed_employees_start_end) %>%
mutate(status = if_else(!is.na(tenure), "terminated", "not terminated")) %>%
count(depth, status) %>%
ggplot(aes( x = as.factor(depth), y = n, fill = status)) +
geom_col(position = "fill") +
labs(title = "% of employees who terminated\nat some point by level")
# a. No movement between levels
deskhistory_table %>%
select(employee_num, desk_id) %>%
distinct() %>%
left_join(hierarchy_with_depth) %>%
select(employee_num, depth) %>%
distinct() %>%
count(employee_num) %>%
rename(count_of_different_levels = n) %>%
arrange(desc(count_of_different_levels))
# a. No movement between levels
deskhistory_table %>%
select(employee_num, desk_id) %>%
distinct() %>%
left_join(hierarchy_with_depth) %>%
select(employee_num, depth) %>%
distinct() %>%
count(employee_num) %>%
rename(count_of_different_levels = n) %>%
arrange(desc(count_of_different_levels)) %>%
count(count_of_different_levels)
# b. Turnover seems ok
deskhistory_table %>%
select(employee_num, desk_id) %>%
distinct() %>%
left_join(hierarchy_with_depth) %>%
select(employee_num, depth) %>%
distinct() %>%
left_join(termed_employees_start_end) %>%
mutate(status = if_else(!is.na(tenure), "terminated", "not terminated")) %>%
count(depth, status) %>%
ggplot(aes( x = as.factor(depth), y = n, fill = status)) +
geom_col(position = "fill") +
labs(title = "% of employees who terminated\nat some point by level")
# c. Promotions
deskhistory_table %>%
select(employee_num, desk_id) %>%
distinct() %>%
left_join(hierarchy_with_depth) %>%
select(employee_num, depth) %>%
distinct() %>%
left_join(deskhistory_table) %>%
select(employee_num, depth, promotion_flag) %>%
distinct() %>%
count(depth, promotion_flag) %>%
ggplot(aes( x = as.factor(depth), y = n, fill = promotion_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees who received\na Promotion at some point by level")
deskhistory_table %>% filter(desk_id == 0)
deskhistory_table %>% filter(desk_id == 1)
deskhistory_table %>% filter(desk_id == 2)
deskhistory_table %>% filter(desk_id == 3)
deskhistory_table %>% filter(desk_id == 4)
deskhistory_table %>% filter(desk_id == 5)
deskhistory_table %>% filter(desk_id == 6)
# 5. Only 692 TMs right now
deskhistory_table %>%
filter(desk_id_end_date >= as.Date("2019-01-01")) %>%
nrow()
# 6. check job by states
state_ratios <- deskhistory_table %>%
filter(desk_id_end_date >= as.Date("2019-01-01")) %>%
left_join(employeeinfo_table) %>%
count(state) %>%
left_join(employeeinfo_table %>%
count(state) %>%
rename(state_ratio = n)) %>%
mutate(pct_state = n / state_ratio)  %>%
arrange(desc(pct_state))
View(state_ratios)
# 7. Check promotions - see if people are getting promotions after a 1 or 2 review
deskhistory_promotions <- deskhistory_table %>%
mutate(endyear = year(desk_id_end_date),
promotionyear = ifelse(promotion_flag == 1, endyear, NA)) %>%
filter(!is.na(promotionyear))
perf_promotions <- performancereview_table %>%
mutate(promotionyearcheck = year + 1) %>%
left_join(deskhistory_promotions, by = c("employee_num", "promotionyearcheck" = "promotionyear"))
perf_promotions %>%
mutate(poor_perf_review_flag = if_else(perf_review_score %in% c(1,2), "1 or 2", "3 or better")) %>%
count(promotion_flag,  poor_perf_review_flag) %>%
ggplot(aes(x = as.factor(poor_perf_review_flag), y = n, fill = promotion_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that promoted the year \nfollowing review score below",
subtitle = "Maybe should be lower for 1 or 2 scores")
perf_promotions %>%
count(promotion_flag,  perf_review_score) %>%
ggplot(aes(x = as.factor(perf_review_score), y = n, fill = promotion_flag)) +
geom_col(position = "fill") +
labs(title = "% of employees that promoted the year \nfollowing review score below",
subtitle = "Maybe should be lower for 1 or 2 scores")
# 8. Termination rate is low
deskhistory_table %>%
filter(desk_id_start_date <= as.Date("2004-01-01"),
desk_id_end_date >= as.Date("2003-01-01")) %>%
mutate(termination = if_else(termination_flag == 1 & (year(desk_id_end_date) == 2003 ), "term2017", "notterm2017")) %>%
count(termination) %>%
spread(key = termination, value = n) %>%
mutate(pct = term2017 / (term2017 + notterm2017))
library(RMariaDB)
library(hrsample)
library(tidyverse)
library(scales)
library(lubridate)
default_color <- rgb(155/255, 186/255, 204/255)
# below borrowed from 07
# Connect to database -----------------------------------------------------
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
# Create hierarchy and join to lob for report to count  from 01
hierarchy <- dbGetQuery(HRSAMPLE, "SELECT *  FROM hierarchy")
# Rollup
hierarchy_spread <- hierarchy %>%
mutate(lvl00_desk_id = 0,
lvl00_org = "CEO") %>%
select(lvl00_desk_id,
lvl00_org,
everything()) %>%
filter(parent_id == 1) %>%
rename(lvl01_desk_id = desk_id,
lvl01_org = org) %>%
select(-parent_id) %>%
left_join(hierarchy, by = c("lvl01_desk_id" = "parent_id")) %>%
rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
left_join(hierarchy, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
left_join(hierarchy, by = c("lvl03_desk_id" = "parent_id"))
# Add level 1-3 employees since hierarchy_spread only counts level 04
hierarchy_spread_lvl01 <- hierarchy_spread %>%
select(lvl00_desk_id, lvl00_org, desk_id = lvl01_desk_id) %>%
distinct()
hierarchy_spread_lvl02 <- hierarchy_spread %>%
select(lvl01_desk_id, lvl01_org, desk_id = lvl02_desk_id) %>%
distinct()
hierarchy_spread_lvl03 <- hierarchy_spread %>%
select(lvl01_desk_id, lvl01_org, desk_id = lvl03_desk_id) %>%
distinct()
### Note this hierarchy_spread_all is different than from 04. Includes everyone except CEO
hierarchy_spread_all <- hierarchy_spread %>%
bind_rows(hierarchy_spread_lvl01, hierarchy_spread_lvl02, hierarchy_spread_lvl03)
# Headcount ---------------------------------------------------------------
# Note this appears to be more desk count than headcount
employee_distribution <- deskhistory_table %>%
filter(desk_id_end_date == as.Date("2999-01-01")) %>%
right_join(hierarchy_spread_all %>% select(desk_id, lvl01_org)) %>%
filter(!is.na(lvl01_org)) %>%
count(lvl01_org) %>%
ggplot(aes(x = fct_reorder(lvl01_org, -n), y = n)) +
geom_col(fill = default_color, width = .6) +
labs(title = "Current Headcount by Line of Business") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
employee_distribution
merit_increases <- salaryhistory_table %>%
mutate(`Salary Increase Year` = lubridate::year(salary_effective_date)) %>%
filter(salary_increase > 0#,
##`Salary Increase Year` >= 2010,
#`Salary Increase Year` <= 2018
) %>%
ggplot(aes(x = salary_increase)) +
geom_histogram(bins = 15, fill = default_color) +
scale_x_continuous(labels = percent) +
facet_wrap(~`Salary Increase Year`) +
labs(x = "% Increase",
y = "Count of Merit Increases",
title = "Merit Increases by Year") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
merit_increases
deskhistory_table %>% count(year(desk_id_end_date))
dh <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory")
dh %>% count(year(desk_id_end_date))
