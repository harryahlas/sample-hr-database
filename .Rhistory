# Build employeeinfo table ------------------------------------------------
# dbExecute(HRSAMPLE, "DROP TABLE employeeinfo")
# dbExecute(HRSAMPLE, "DELETE from  employeeinfo")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS employeeinfo;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE employeeinfo (
employee_num INT (11)  PRIMARY KEY,
first_name VARCHAR (255),
last_name VARCHAR (255),
city VARCHAR (255),
state  VARCHAR (4),
bad_employee_flag INT (1))
;")
# Populate table
employeeinfo_sql <- paste(
"INSERT INTO employeeinfo (first_name, last_name, city, state) VALUES ",
paste0(
"('",
employeeinfo_table$first_name, "','",
employeeinfo_table$last_name, "','",
employeeinfo_table$city, "','",
employeeinfo_table$state, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, employeeinfo_sql)
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS employeeinfo;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE employeeinfo (
employee_num INT (11) AUTO_INCREMENT PRIMARY KEY,
first_name VARCHAR (255),
last_name VARCHAR (255),
city VARCHAR (255),
state  VARCHAR (4),
bad_employee_flag INT (1))
;")
# Populate table
employeeinfo_sql <- paste(
"INSERT INTO employeeinfo (first_name, last_name, city, state) VALUES ",
paste0(
"('",
employeeinfo_table$employee_num, "','",
employeeinfo_table$first_name, "','",
employeeinfo_table$last_name, "','",
employeeinfo_table$city, "','",
employeeinfo_table$state, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, employeeinfo_sql)
# Populate table
employeeinfo_sql <- paste(
"INSERT INTO employeeinfo (employee_num, first_name, last_name, city, state) VALUES ",
paste0(
"('",
employeeinfo_table$employee_num, "','",
employeeinfo_table$first_name, "','",
employeeinfo_table$last_name, "','",
employeeinfo_table$city, "','",
employeeinfo_table$state, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, employeeinfo_sql)
# Populate contact
contact_sql <- paste(
"INSERT INTO contact (employee_num, contact_type, contact_sub_type, contact, contact_end_date) VALUES ",
paste0(
"('",
contact_table$employee_num, "','",
contact_table$contact_type, "','",
contact_table$contact_sub_type, "','",
contact_table$contact, "','",
contact_table$contact_end_date, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, contact_sql)
View(contact_table)
contact_table %>% filter(contact_end_date == as.Date("2019-01-01")) %>% count(contact_sub_type)
contact_table %>% filter(contact_end_date == as.Date("2999-01-01")) %>% count(contact_sub_type)
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_type == "work", contact_end_date == as.Date("2999-01-01")) %>%
sample_n(5)
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_type == "work", contact_end_date == as.Date("2999-01-01")) %>%
nrow()
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_sub_type == "work", contact_end_date == as.Date("2999-01-01")) %>%
nrow()
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_sub_type == "work", contact_end_date == as.Date("2999-01-01")) %>%
sample_n(45)
View(employee_work_numbers_to_replace)
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_sub_type == "personal", contact_end_date == as.Date("2999-01-01")) %>%
sample_n(45)
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_sub_type == "personal", contact_end_date == as.Date("2999-01-01")) %>%
sample_n(45) %>%
mutate(replace_work_number = "yes")
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_sub_type == "personal", contact_end_date == as.Date("2999-01-01")) %>%
sample_n(45) %>%
select(employee_num, contact_new = contact) %>%
mutate(replace_work_number = "yes")
# Get work numbers and replace
contact_table2 <- contact_table %>%
left_join(employee_work_numbers_to_replace) %>%
rowwise() %>%
mutate(contact = if_else(replace_work_number = "yes" &
contact_sub_type == "work" &
contact_end_date == as.Date("2999-01-01"),
contact_new,
contact))
# Get work numbers and replace
contact_table2 <- contact_table %>%
left_join(employee_work_numbers_to_replace) %>%
rowwise() %>%
mutate(contact = if_else((replace_work_number = "yes" &
contact_sub_type == "work" &
contact_end_date == as.Date("2999-01-01")),
contact_new,
contact))
# Get work numbers and replace
contact_table2 <- contact_table %>%
left_join(employee_work_numbers_to_replace) %>%
rowwise() %>%
mutate(contact = if_else((replace_work_number == "yes" &
contact_sub_type == "work" &
contact_end_date == as.Date("2999-01-01")),
contact_new,
contact))
# Get work numbers and replace
contact_table2 <- contact_table %>%
left_join(employee_work_numbers_to_replace) %>%
rowwise() %>%
mutate(contact = if_else(replace_work_number == "yes" &
contact_sub_type == "work" &
contact_end_date == as.Date("2999-01-01"),
contact_new,
contact))
aa <- contact_table2 %>% filter(replace_work_number == "yes")
View(aa)
contact_table %>% filter(employee_num == 1899)
contact_table2 %>% filter(employee_num == 1899)
# Get work numbers and replace
contact_table <- contact_table %>%
left_join(employee_work_numbers_to_replace) %>%
rowwise() %>%
mutate(contact = if_else(replace_work_number == "yes" &
contact_sub_type == "work" &
contact_end_date == as.Date("2999-01-01"),
contact_new,
contact)) %>%
select(-contact_new, -replace_work_number)
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS contact;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE contact (
employee_num INT (11),
contact_type VARCHAR (255),
contact_sub_type VARCHAR (255),
contact VARCHAR (255),
contact_end_date DATE,
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Populate contact
contact_sql <- paste(
"INSERT INTO contact (employee_num, contact_type, contact_sub_type, contact, contact_end_date) VALUES ",
paste0(
"('",
contact_table$employee_num, "','",
contact_table$contact_type, "','",
contact_table$contact_sub_type, "','",
contact_table$contact, "','",
contact_table$contact_end_date, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, contact_sql)
source('C:/Development/github/sample-hr-database/02_variables.R')
head(employeeinfo_table)
# Create email addresses --------------------------------------------------
email_addresses <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
left_join(employeeinfo_table) %>%
mutate(add_work_email = sample(c(1,0), 1, prob = c(993,7), replace = TRUE),
contact = ifelse(add_work_email == 1, paste0(first_name, ".", last_name, "@", company_website), NA),
contact_type = "email",
contact_sub_type = "work")
View(email_addresses)
# Create email addresses --------------------------------------------------
email_addresses <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
left_join(employeeinfo_table) %>%
mutate(add_work_email = sample(c(1,0), 1, prob = c(993,7), replace = TRUE),
contact = ifelse(add_work_email == 1, paste0(tolower(first_name), ".", tolower(last_name), "@", company_website), NA),
contact_type = "email",
contact_sub_type = "work")
# Count/validate email unique
nrow(email_addresses) == email_addresses %>% select(contact) %>% n_distinct()
contact_table <- bind_rows(work_phone_list,
personal_phone_list1,
personal_phone_list2,
personal_phone_list3,
email_addresses) %>%
select(employee_num,
contact_type,
contact_sub_type,
contact,
contact_end_date)
contact_table %>% count(contact_type)
contact_table %>% count(contact_type, contact_sub_type)
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS contact;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE contact (
employee_num INT (11),
contact_type VARCHAR (255),
contact_sub_type VARCHAR (255),
contact VARCHAR (255),
contact_end_date DATE,
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Populate contact
contact_sql <- paste(
"INSERT INTO contact (employee_num, contact_type, contact_sub_type, contact, contact_end_date) VALUES ",
paste0(
"('",
contact_table$employee_num, "','",
contact_table$contact_type, "','",
contact_table$contact_sub_type, "','",
contact_table$contact, "','",
contact_table$contact_end_date, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, contact_sql)
contact_max_end_date <- as.Date("2999-01-01")
# Create work email addresses ---------------------------------------------
email_addresses <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
left_join(employeeinfo_table) %>%
mutate(add_work_email = sample(c(1,0), 1, prob = c(993,7), replace = TRUE),
contact = ifelse(add_work_email == 1, paste0(tolower(first_name), ".", tolower(last_name), "@", company_website), NA),
contact_type = "email",
contact_sub_type = "work",
contact_end_date = contact_max_end_date)
# Count/validate email unique
# If this is false then there will be duplicate email addresses
nrow(email_addresses) == email_addresses %>% select(contact) %>% n_distinct()
contact_table <- bind_rows(work_phone_list,
personal_phone_list1,
personal_phone_list2,
personal_phone_list3,
email_addresses) %>%
select(employee_num,
contact_type,
contact_sub_type,
contact,
contact_end_date)
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_sub_type == "personal", contact_end_date == as.Date("2999-01-01")) %>%
sample_n(45) %>%
select(employee_num, contact_new = contact) %>%
mutate(replace_work_number = "yes")
# Replace work numbers with personal number selected above
contact_table <- contact_table %>%
left_join(employee_work_numbers_to_replace) %>%
rowwise() %>%
mutate(contact = if_else(replace_work_number == "yes" &
contact_sub_type == "work" &
contact_end_date == as.Date("2999-01-01"),
contact_new,
contact)) %>%
select(-contact_new, -replace_work_number)
contact_table %>% count(employee_num, contact_end_date) %>% arrange(desc(n))
contact_table %>% filter(contact_end_date == as.Date("2999-01-01")) %>% count(contact_sub_type)
contact_table %>% filter(employee_num==4046)
# Populate contact
contact_sql <- paste(
"INSERT INTO contact (employee_num, contact_type, contact_sub_type, contact, contact_end_date) VALUES ",
paste0(
"('",
contact_table$employee_num, "','",
contact_table$contact_type, "','",
contact_table$contact_sub_type, "','",
contact_table$contact, "','",
contact_table$contact_end_date, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, contact_sql)
aa <- dbGetQuery(HRSAMPLE, "select * from contact")
View(aa)
skimr::skim(aa)
library(htmlTable)
library(htmlTable)
library(RMariaDB)
library(tidyverse)
library(lubridate)
source("01_functions.R")
source("02_variables.R")
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
colleges <- read_delim("data/colleges.txt", delim = "|")
View(colleges)
colleges <- read_delim("data/colleges.txt", delim = "|")
# Education information
BA_pct <- .81
BS_pct <- .06
MS_pct <- .11  #If BA or BS only
MA_pct <- .08  #If BA or BS only
PhD_pct <- .33 #If MS or MA only
library(hrsample)
salaryhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM salaryhistory")
rnorm(50, mean=20, sd=5)
plot(rnorm(50, mean=20, sd=5))
plot(sort(rnorm(50, mean=20, sd=5)))
hist(sort(rnorm(50, mean=20, sd=5)))
hist(sort(rnorm(50, mean=10, sd=5)))
# Not used yet
#salaryhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM salaryhistory")
employeeinfo_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM employeeinfo")
# for each employee,
education_table_BABS <- employeeinfo_table %>%
select(employee_num) %>%
sample_frac(size = BA_pct + BS_pct)
create_college <- function() {
college <- colleges %>%
select(School) %>%
sample_n(1) %>%
as.character()
return(college)
}
create_college()
create_college()
create_college()
sample(c("BA", "BS"), 1, c(BA_pct, BS_pct)
)
sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct))
sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct))
sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct))
sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct))
sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct))
# for each employee, see if they get a BA/BS
education_table_BABS <- employeeinfo_table[1:10,] %>%
select(employee_num) %>%
sample_frac(size = BA_pct + BS_pct) %>%
mutate(degree = sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct)),
school_name = create_college())
View(education_table_BABS)
# for each employee, see if they get a BA/BS
education_table_BABS <- employeeinfo_table[1:10,] %>%
select(employee_num) %>%
sample_frac(size = BA_pct + BS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct)),
school_name = create_college())
View(education_table_BABS)
# for each employee, see if they get a BA/BS
education_table_BABS <- employeeinfo_table[1:30,] %>%
select(employee_num) %>%
sample_frac(size = BA_pct + BS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct)),
school_name = create_college())
View(education_table_BABS)
# for each employee, see if they get a BA/BS
education_table_BABS <- employeeinfo_table %>%
select(employee_num) %>%
sample_frac(size = BA_pct + BS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct)),
school_name = create_college())
education_table_MAMS <- education_table_BABS %>%
select(employee_num) %>%
sample_frac(size = MA_pct + MS_pct)
education_table_MAMS <- education_table_BABS %>%
select(employee_num) %>%
sample_frac(size = MA_pct + MS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("MA", "MS"), size =  1, prob = c(MA_pct, MS_pct)),
school_name = create_college())
education_table_PhD <- education_table_MAMS %>%
select(employee_num) %>%
sample_frac(size = PhD_pct) %>%
rowwise() %>%
mutate(degree = "PhD",
school_name = create_college())
MS_pct <- .06  #If BA or BS only
MA_pct <- .03  #If BA or BS only
PhD_pct <- .33 #If MS or MA only
source('C:/Development/github/sample-hr-database/02_variables.R')
education_table_MAMS <- education_table_BABS %>%
select(employee_num) %>%
sample_frac(size = MA_pct + MS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("MA", "MS"), size =  1, prob = c(MA_pct, MS_pct)),
school_name = create_college())
education_table_PhD <- education_table_MAMS %>%
select(employee_num) %>%
sample_frac(size = PhD_pct) %>%
rowwise() %>%
mutate(degree = "PhD",
school_name = create_college())
education <- bind_rows(
education_table_BABS,
education_table_MAMS,
education_table_PhD
)
education %>% count(school_name, sort = TRUE)
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS education;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE education (
employee_num INT (11),
degree VARCHAR (5),
school_name VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Populate education
education_sql <- paste(
"INSERT INTO education (employee_num, degree, school_name) VALUES ",
paste0(
"('",
education$employee_num, "','",
education$degree, "','",
education$school_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, education_sql)
# Populate education
education_sql <- paste(
"INSERT INTO education (employee_num, degree, school_name) VALUES ",
paste0(
"('",
education$employee_num[1:2], "','",
education$degree[1:2], "','",
education$school_name[1:2], "')",
collapse = ", "),
";"
)
education_sql
dbExecute(HRSAMPLE, education_sql)
nchar("sdlkfj")
aa <- nchar(education$school_name)
aa <- nchar
(education$school_name[1185])
iconv(education$school_name[1185], "UTF-8", "UTF-8",sub='')
education <- education %>%
mutate(school_name = iconv(school_name, "UTF-8", "UTF-8",sub=''))
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS education;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE education (
employee_num INT (11),
degree VARCHAR (5),
school_name VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Populate education
education_sql <- paste(
"INSERT INTO education (employee_num, degree, school_name) VALUES ",
paste0(
"('",
education$employee_num, "','",
education$degree, "','",
education$school_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, education_sql)
gsub(pattern = "'",replacement = "", "sdlkfdsj;'sldkfjs")
education_table <- bind_rows(
education_table_BABS,
education_table_MAMS,
education_table_PhD
)
education_table <- education_table %>%
mutate(school_name = iconv(school_name, "UTF-8", "UTF-8",sub='')) %>%
mutate(school_name = gsub(pattern = "'",replacement = "", school_name))
# Populate education
education_sql <- paste(
"INSERT INTO education (employee_num, degree, school_name) VALUES ",
paste0(
"('",
education_table$employee_num, "','",
education_table$degree, "','",
education_table$school_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, education_sql)
df <- dbGetQuery(HRSAMPLE, "SELECT * FROM education")
skimr::skim(df)
df %>% count(school_name, sort = TRUE)
