lvl00_org = "CEO") %>%
select(lvl00_desk_id,
lvl00_org,
everything()) %>%
filter(parent_id == 1) %>%
rename(lvl01_desk_id = desk_id,
lvl01_org = org) %>%
select(-parent_id) %>%
left_join(hierarchy, by = c("lvl01_desk_id" = "parent_id")) %>%
rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
left_join(hierarchy, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
left_join(lob, by = c("lvl01_org" = "lob")) %>%
select(-proportion) %>%
rowwise() %>%
mutate(
head_count = max(round(
rnorm(n = 1,
mean = avg_report_to_count,
sd =  4)
,0),2)) %>%
left_join(nonstandard_regions %>% # Adding team size from earlier calculation
select(region, team_size), by = c("lvl03_org" = "region")) %>%
mutate(head_count = if_else(is.na(team_size), head_count, team_size))
# From 03
lob <- read_csv("data/lob.csv")
hierarchy_spread_03 <- hierarchy %>%
mutate(lvl00_desk_id = 0,
lvl00_org = "CEO") %>%
select(lvl00_desk_id,
lvl00_org,
everything()) %>%
filter(parent_id == 1) %>%
rename(lvl01_desk_id = desk_id,
lvl01_org = org) %>%
select(-parent_id) %>%
left_join(hierarchy, by = c("lvl01_desk_id" = "parent_id")) %>%
rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
left_join(hierarchy, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
left_join(lob, by = c("lvl01_org" = "lob")) %>%
select(-proportion) %>%
rowwise() %>%
mutate(
head_count = max(round(
rnorm(n = 1,
mean = avg_report_to_count,
sd =  4)
,0),2)) %>%
left_join(nonstandard_regions %>% # Adding team size from earlier calculation
select(region, team_size), by = c("lvl03_org" = "region")) %>%
mutate(head_count = if_else(is.na(team_size), head_count, team_size))
nonstandard_regions <- read_csv("data/nonstandard_regions.csv") %>%
mutate(region_old = region,
region = paste0(gsub("[aeiou]|","",parent_name), " - ", region))
# From 03
get_org_desk_id <- function(orgname) {
desk_id <- dbGetQuery(HRSAMPLE,
paste0("SELECT desk_id FROM hierarchy WHERE org = '",
orgname,
"'", collapse = "")) %>%
as.character()
return(desk_id)
}
# Vectorize
get_org_desk_id <- Vectorize(get_org_desk_id)
hierarchy_spread_03 <- hierarchy %>%
mutate(lvl00_desk_id = 0,
lvl00_org = "CEO") %>%
select(lvl00_desk_id,
lvl00_org,
everything()) %>%
filter(parent_id == 1) %>%
rename(lvl01_desk_id = desk_id,
lvl01_org = org) %>%
select(-parent_id) %>%
left_join(hierarchy, by = c("lvl01_desk_id" = "parent_id")) %>%
rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
left_join(hierarchy, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
left_join(lob, by = c("lvl01_org" = "lob")) %>%
select(-proportion) %>%
rowwise() %>%
mutate(
head_count = max(round(
rnorm(n = 1,
mean = avg_report_to_count,
sd =  4)
,0),2)) %>%
left_join(nonstandard_regions %>% # Adding team size from earlier calculation
select(region, team_size), by = c("lvl03_org" = "region")) %>%
mutate(head_count = if_else(is.na(team_size), head_count, team_size))
rm(nonstandard_regions)
hierarchy_spread_03 <- hierarchy %>%
mutate(lvl00_desk_id = 0,
lvl00_org = "CEO") %>%
select(lvl00_desk_id,
lvl00_org,
everything()) %>%
filter(parent_id == 1) %>%
rename(lvl01_desk_id = desk_id,
lvl01_org = org) %>%
select(-parent_id) %>%
left_join(hierarchy, by = c("lvl01_desk_id" = "parent_id")) %>%
rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
left_join(hierarchy, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
left_join(lob, by = c("lvl01_org" = "lob")) %>%
select(-proportion)# %>%
# From 07
# Rollup
hierarchy_spread07 <- hierarchy %>%
mutate(lvl00_desk_id = 0,
lvl00_org = "CEO") %>%
select(lvl00_desk_id,
lvl00_org,
everything()) %>%
filter(parent_id == 1) %>%
rename(lvl01_desk_id = desk_id,
lvl01_org = org) %>%
select(-parent_id) %>%
left_join(hierarchy, by = c("lvl01_desk_id" = "parent_id")) %>%
rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
left_join(hierarchy, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
left_join(hierarchy, by = c("lvl03_desk_id" = "parent_id"))
hierarchy_spread_lvl02 <- hierarchy_spread07 %>%
select(lvl01_desk_id, lvl01_org, desk_id = lvl02_desk_id) %>%
distinct()
hierarchy_spread_lvl03 <- hierarchy_spread07 %>%
select(lvl01_desk_id, lvl01_org, desk_id = lvl03_desk_id) %>%
distinct()
hierarchy_spread_lvl01 <- hierarchy_spread07 %>%
select(lvl00_desk_id, lvl00_org, desk_id = lvl01_desk_id) %>%
distinct() %>%
left_join((hierarchy_spread_lvl02 %>% select(lvl01_desk_id, lvl01_org)), by = c("desk_id" = "lvl01_desk_id"))
### Note this hierarchy_spread_all is different than from 04. Includes everyone except CEO
hierarchy_spread_all <- hierarchy_spread07 %>%
bind_rows(hierarchy_spread_lvl01, hierarchy_spread_lvl02, hierarchy_spread_lvl03)
hierarchy_spread_all %>% select(desk_id) %>% n_distinct()
library(RMariaDB)
library(tidyverse)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
rollup_sql <- "CREATE VIEW rollup AS
(
UNION ALL
cte.desk_id=c.parent_id
cte3 AS (SELECT * FROM cte WHERE depth = 3),
cte1 AS (SELECT * FROM cte WHERE depth = 1),
SELECT
cte0.org AS HRC_LEVEL_0,
cte1.org AS HRC_LEVEL_1,
cte2.org AS HRC_LEVEL_2,
cte3.org AS HRC_LEVEL_3,
cte.org AS HRC_LEVEL_4,
LEFT JOIN cte2 ON cte3.parent_id = cte2.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
FROM cte
UNION
SELECT
cte0.org AS HRC_LEVEL_0,
cte1.org AS HRC_LEVEL_1,
cte2.org AS HRC_LEVEL_2,
cte.org AS HRC_LEVEL_3,
cte.org AS HRC_LEVEL_4,
FROM cte
LEFT JOIN cte1 ON cte2.parent_id = cte1.desk_id
WHERE cte.depth = 3
UNION
SELECT
cte0.org AS HRC_LEVEL_0,
cte1.org AS HRC_LEVEL_1,
cte.org AS HRC_LEVEL_2,
cte.org AS HRC_LEVEL_3,
cte.org AS HRC_LEVEL_4,
FROM cte
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
UNION
SELECT
cte0.org AS HRC_LEVEL_0,
cte.org AS HRC_LEVEL_1,
cte.org AS HRC_LEVEL_2,
cte.org AS HRC_LEVEL_3,
cte.org AS HRC_LEVEL_4,
FROM cte
WHERE cte.depth = 1
UNION
SELECT
cte.org AS HRC_LEVEL_0,
cte.org AS HRC_LEVEL_1,
cte.org AS HRC_LEVEL_2,
cte.org AS HRC_LEVEL_3,
cte.org AS HRC_LEVEL_4,
FROM cte
ORDER BY depth"
dbExecute(HRSAMPLE, "DROP VIEW IF EXISTS rollup;")
dbExecute(HRSAMPLE, rollup_sql)
rollup_sql <- "CREATE VIEW rollup AS
WITH RECURSIVE cte AS
(
SELECT desk_id, org, parent_id, 0 AS depth FROM hierarchy WHERE parent_id IS NULL
UNION ALL
SELECT c.desk_id, c.org, c.parent_id, cte.depth+1 FROM hierarchy c JOIN cte ON
cte.desk_id=c.parent_id
),
cte3 AS (SELECT * FROM cte WHERE depth = 3),
cte2 AS (SELECT * FROM cte WHERE depth = 2),
cte1 AS (SELECT * FROM cte WHERE depth = 1),
cte0 AS (SELECT * FROM cte WHERE depth = 0)
SELECT
cte0.desk_id AS DESK_ID_LEVEL_0,
cte0.org AS HRC_LEVEL_0,
cte1.desk_id AS DESK_ID_LEVEL_1,
cte1.org AS HRC_LEVEL_1,
cte2.desk_id AS DESK_ID_LEVEL_2,
cte2.org AS HRC_LEVEL_2,
cte3.desk_id AS DESK_ID_LEVEL_3,
cte3.org AS HRC_LEVEL_3,
cte.desk_id AS DESK_ID_LEVEL_4,
cte.org AS HRC_LEVEL_4,
cte.depth
FROM cte
LEFT JOIN cte3 ON cte.parent_id = cte3.desk_id
LEFT JOIN cte2 ON cte3.parent_id = cte2.desk_id
LEFT JOIN cte1 ON cte2.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 4
UNION
SELECT
cte0.desk_id AS DESK_ID_LEVEL_0,
cte0.org AS HRC_LEVEL_0,
cte1.desk_id AS DESK_ID_LEVEL_1,
cte1.org AS HRC_LEVEL_1,
cte2.desk_id AS DESK_ID_LEVEL_2,
cte2.org AS HRC_LEVEL_2,
cte.desk_id AS DESK_ID_LEVEL_3,
cte.org AS HRC_LEVEL_3,
cte.desk_id AS DESK_ID_LEVEL_4,
cte.org AS HRC_LEVEL_4,
cte.depth
FROM cte
LEFT JOIN cte2 ON cte.parent_id = cte2.desk_id
LEFT JOIN cte1 ON cte2.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 3
UNION
SELECT
cte0.desk_id AS DESK_ID_LEVEL_0,
cte0.org AS HRC_LEVEL_0,
cte1.desk_id AS DESK_ID_LEVEL_1,
cte1.org AS HRC_LEVEL_1,
cte.desk_id AS DESK_ID_LEVEL_2,
cte.org AS HRC_LEVEL_2,
cte.desk_id AS DESK_ID_LEVEL_3,
cte.org AS HRC_LEVEL_3,
cte.desk_id AS DESK_ID_LEVEL_4,
cte.org AS HRC_LEVEL_4,
cte.depth
FROM cte
LEFT JOIN cte1 ON cte.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 2
UNION
SELECT
cte0.desk_id AS DESK_ID_LEVEL_0,
cte0.org AS HRC_LEVEL_0,
cte.desk_id AS DESK_ID_LEVEL_1,
cte.org AS HRC_LEVEL_1,
cte.desk_id AS DESK_ID_LEVEL_2,
cte.org AS HRC_LEVEL_2,
cte.desk_id AS DESK_ID_LEVEL_3,
cte.org AS HRC_LEVEL_3,
cte.desk_id AS DESK_ID_LEVEL_4,
cte.org AS HRC_LEVEL_4,
cte.depth
FROM cte
LEFT JOIN cte0 ON cte.parent_id = cte0.desk_id
WHERE cte.depth = 1
UNION
SELECT
cte.desk_id AS DESK_ID_LEVEL_0,
cte.org AS HRC_LEVEL_0,
cte.desk_id AS DESK_ID_LEVEL_1,
cte.org AS HRC_LEVEL_1,
cte.desk_id AS DESK_ID_LEVEL_2,
cte.org AS HRC_LEVEL_2,
cte.desk_id AS DESK_ID_LEVEL_3,
cte.org AS HRC_LEVEL_3,
cte.desk_id AS DESK_ID_LEVEL_4,
cte.org AS HRC_LEVEL_4,
cte.depth
FROM cte
WHERE cte.depth = 0
ORDER BY depth"
dbExecute(HRSAMPLE, rollup_sql)
library(RMariaDB)
library(tidyverse)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
# Create rollup_view ------------------------------------------------------
rollup_sql <- "CREATE VIEW rollup AS
WITH RECURSIVE cte AS
(
SELECT desk_id, org, parent_id, 0 AS depth FROM hierarchy WHERE parent_id IS NULL
UNION ALL
SELECT c.desk_id, c.org, c.parent_id, cte.depth+1 FROM hierarchy c JOIN cte ON
cte.desk_id=c.parent_id
),
cte3 AS (SELECT * FROM cte WHERE depth = 3),
cte2 AS (SELECT * FROM cte WHERE depth = 2),
cte1 AS (SELECT * FROM cte WHERE depth = 1),
cte0 AS (SELECT * FROM cte WHERE depth = 0)
SELECT
cte0.desk_id AS desk_id_level_0,
cte0.org AS hrc_level_0,
cte1.desk_id AS desk_id_level_1,
cte1.org AS hrc_level_1,
cte2.desk_id AS desk_id_level_2,
cte2.org AS hrc_level_2,
cte3.desk_id AS desk_id_level_3,
cte3.org AS hrc_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS hrc_level_4,
cte.depth
FROM cte
LEFT JOIN cte3 ON cte.parent_id = cte3.desk_id
LEFT JOIN cte2 ON cte3.parent_id = cte2.desk_id
LEFT JOIN cte1 ON cte2.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 4
UNION
SELECT
cte0.desk_id AS desk_id_level_0,
cte0.org AS hrc_level_0,
cte1.desk_id AS desk_id_level_1,
cte1.org AS hrc_level_1,
cte2.desk_id AS desk_id_level_2,
cte2.org AS hrc_level_2,
cte.desk_id AS desk_id_level_3,
cte.org AS hrc_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS hrc_level_4,
cte.depth
FROM cte
LEFT JOIN cte2 ON cte.parent_id = cte2.desk_id
LEFT JOIN cte1 ON cte2.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 3
UNION
SELECT
cte0.desk_id AS desk_id_level_0,
cte0.org AS hrc_level_0,
cte1.desk_id AS desk_id_level_1,
cte1.org AS hrc_level_1,
cte.desk_id AS desk_id_level_2,
cte.org AS hrc_level_2,
cte.desk_id AS desk_id_level_3,
cte.org AS hrc_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS hrc_level_4,
cte.depth
FROM cte
LEFT JOIN cte1 ON cte.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 2
UNION
SELECT
cte0.desk_id AS desk_id_level_0,
cte0.org AS hrc_level_0,
cte.desk_id AS desk_id_level_1,
cte.org AS hrc_level_1,
cte.desk_id AS desk_id_level_2,
cte.org AS hrc_level_2,
cte.desk_id AS desk_id_level_3,
cte.org AS hrc_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS hrc_level_4,
cte.depth
FROM cte
LEFT JOIN cte0 ON cte.parent_id = cte0.desk_id
WHERE cte.depth = 1
UNION
SELECT
cte.desk_id AS desk_id_level_0,
cte.org AS hrc_level_0,
cte.desk_id AS desk_id_level_1,
cte.org AS hrc_level_1,
cte.desk_id AS desk_id_level_2,
cte.org AS hrc_level_2,
cte.desk_id AS desk_id_level_3,
cte.org AS hrc_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS hrc_level_4,
cte.depth
FROM cte
WHERE cte.depth = 0
ORDER BY depth"
dbExecute(HRSAMPLE, "DROP VIEW IF EXISTS rollup;")
dbExecute(HRSAMPLE, rollup_sql)
library(RMariaDB)
library(tidyverse)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
rollup_sql <- "CREATE VIEW rollup AS
WITH RECURSIVE cte AS
(
SELECT desk_id, org, parent_id, 0 AS depth FROM hierarchy WHERE parent_id IS NULL
UNION ALL
SELECT c.desk_id, c.org, c.parent_id, cte.depth+1 FROM hierarchy c JOIN cte ON
cte.desk_id=c.parent_id
),
cte3 AS (SELECT * FROM cte WHERE depth = 3),
cte2 AS (SELECT * FROM cte WHERE depth = 2),
cte1 AS (SELECT * FROM cte WHERE depth = 1),
cte0 AS (SELECT * FROM cte WHERE depth = 0)
SELECT
cte0.desk_id AS desk_id_level_0,
cte0.org AS org_level_0,
cte1.desk_id AS desk_id_level_1,
cte1.org AS org_level_1,
cte2.desk_id AS desk_id_level_2,
cte2.org AS org_level_2,
cte3.desk_id AS desk_id_level_3,
cte3.org AS org_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS org_level_4,
cte.depth
FROM cte
LEFT JOIN cte3 ON cte.parent_id = cte3.desk_id
LEFT JOIN cte2 ON cte3.parent_id = cte2.desk_id
LEFT JOIN cte1 ON cte2.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 4
UNION
SELECT
cte0.desk_id AS desk_id_level_0,
cte0.org AS org_level_0,
cte1.desk_id AS desk_id_level_1,
cte1.org AS org_level_1,
cte2.desk_id AS desk_id_level_2,
cte2.org AS org_level_2,
cte.desk_id AS desk_id_level_3,
cte.org AS org_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS org_level_4,
cte.depth
FROM cte
LEFT JOIN cte2 ON cte.parent_id = cte2.desk_id
LEFT JOIN cte1 ON cte2.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 3
UNION
SELECT
cte0.desk_id AS desk_id_level_0,
cte0.org AS org_level_0,
cte1.desk_id AS desk_id_level_1,
cte1.org AS org_level_1,
cte.desk_id AS desk_id_level_2,
cte.org AS org_level_2,
cte.desk_id AS desk_id_level_3,
cte.org AS org_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS org_level_4,
cte.depth
FROM cte
LEFT JOIN cte1 ON cte.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 2
UNION
SELECT
cte0.desk_id AS desk_id_level_0,
cte0.org AS org_level_0,
cte.desk_id AS desk_id_level_1,
cte.org AS org_level_1,
cte.desk_id AS desk_id_level_2,
cte.org AS org_level_2,
cte.desk_id AS desk_id_level_3,
cte.org AS org_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS org_level_4,
cte.depth
FROM cte
LEFT JOIN cte0 ON cte.parent_id = cte0.desk_id
WHERE cte.depth = 1
UNION
SELECT
cte.desk_id AS desk_id_level_0,
cte.org AS org_level_0,
cte.desk_id AS desk_id_level_1,
cte.org AS org_level_1,
cte.desk_id AS desk_id_level_2,
cte.org AS org_level_2,
cte.desk_id AS desk_id_level_3,
cte.org AS org_level_3,
cte.desk_id AS desk_id_level_4,
cte.org AS org_level_4,
cte.depth
FROM cte
WHERE cte.depth = 0
ORDER BY depth"
dbExecute(HRSAMPLE, "DROP VIEW IF EXISTS rollup;")
dbExecute(HRSAMPLE, rollup_sql)
aa <- dbGetQuery(HRSAMPLE, "SELECT * FROM rollup")
View(aa)
