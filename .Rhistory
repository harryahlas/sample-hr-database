# Populate recruiting -------------------------------------------------
# Populate recruiting
recruiting_sql <- paste(
"INSERT INTO recruiting (employee_num, recruiting_source, first_contact_date, recruiter_employee_num) VALUES ",
paste0(
"('",
recruiting_table$employee_num, "','",
recruiting_table$recruiting_source, "','",
recruiting_table$first_contact_date, "','",
recruiting_table$recruiter_employee_num, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, recruiting_sql)
save(recruiting_table, file = "data/recruiting_table.rda")
library(RMariaDB)
library(tidyverse)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
# Create rollup_view ------------------------------------------------------
rollup_sql <- "CREATE VIEW rollup AS
WITH RECURSIVE cte AS
(
SELECT desk_id, org, parent_id, 0 AS depth FROM hierarchy WHERE parent_id IS NULL
UNION ALL
SELECT c.desk_id, c.org, c.parent_id, cte.depth+1 FROM hierarchy c JOIN cte ON
cte.desk_id=c.parent_id
),
cte3 AS (SELECT * FROM cte WHERE depth = 3),
cte2 AS (SELECT * FROM cte WHERE depth = 2),
cte1 AS (SELECT * FROM cte WHERE depth = 1),
cte0 AS (SELECT * FROM cte WHERE depth = 0)
SELECT
cte0.desk_id AS lvl00_desk_id,
cte0.org AS lvl00_org,
cte1.desk_id AS lvl01_desk_id,
cte1.org AS lvl01_org,
cte2.desk_id AS lvl02_desk_id,
cte2.org AS lvl02_org,
cte3.desk_id AS lvl03_desk_id,
cte3.org AS lvl03_org,
cte.desk_id AS lvl04_desk_id,
cte.org AS lvl04_org,
cte.depth
FROM cte
LEFT JOIN cte3 ON cte.parent_id = cte3.desk_id
LEFT JOIN cte2 ON cte3.parent_id = cte2.desk_id
LEFT JOIN cte1 ON cte2.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 4
UNION
SELECT
cte0.desk_id AS lvl00_desk_id,
cte0.org AS lvl00_org,
cte1.desk_id AS lvl01_desk_id,
cte1.org AS lvl01_org,
cte2.desk_id AS lvl02_desk_id,
cte2.org AS lvl02_org,
cte.desk_id AS lvl03_desk_id,
cte.org AS lvl03_org,
cte.desk_id AS lvl04_desk_id,
cte.org AS lvl04_org,
cte.depth
FROM cte
LEFT JOIN cte2 ON cte.parent_id = cte2.desk_id
LEFT JOIN cte1 ON cte2.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 3
UNION
SELECT
cte0.desk_id AS lvl00_desk_id,
cte0.org AS lvl00_org,
cte1.desk_id AS lvl01_desk_id,
cte1.org AS lvl01_org,
cte.desk_id AS lvl02_desk_id,
cte.org AS lvl02_org,
cte.desk_id AS lvl03_desk_id,
cte.org AS lvl03_org,
cte.desk_id AS lvl04_desk_id,
cte.org AS lvl04_org,
cte.depth
FROM cte
LEFT JOIN cte1 ON cte.parent_id = cte1.desk_id
LEFT JOIN cte0 ON cte1.parent_id = cte0.desk_id
WHERE cte.depth = 2
UNION
SELECT
cte0.desk_id AS lvl00_desk_id,
cte0.org AS lvl00_org,
cte.desk_id AS lvl01_desk_id,
cte.org AS lvl01_org,
cte.desk_id AS lvl02_desk_id,
cte.org AS lvl02_org,
cte.desk_id AS lvl03_desk_id,
cte.org AS lvl03_org,
cte.desk_id AS lvl04_desk_id,
cte.org AS lvl04_org,
cte.depth
FROM cte
LEFT JOIN cte0 ON cte.parent_id = cte0.desk_id
WHERE cte.depth = 1
UNION
SELECT
cte.desk_id AS lvl00_desk_id,
cte.org AS lvl00_org,
cte.desk_id AS lvl01_desk_id,
cte.org AS lvl01_org,
cte.desk_id AS lvl02_desk_id,
cte.org AS lvl02_org,
cte.desk_id AS lvl03_desk_id,
cte.org AS lvl03_org,
cte.desk_id AS lvl04_desk_id,
cte.org AS lvl04_org,
cte.depth
FROM cte
WHERE cte.depth = 0
ORDER BY depth"
dbExecute(HRSAMPLE, "DROP VIEW IF EXISTS rollup;")
dbExecute(HRSAMPLE, rollup_sql)
library(RMariaDB)
library(tidyverse)
library(lubridate)
source("01_functions.R")
source("02_variables.R")
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Build contact table -----------------------------------------------------
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS contact;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE contact (
employee_num INT (11),
contact_type VARCHAR (255),
contact_sub_type VARCHAR (255),
contact VARCHAR (255),
contact_end_date DATE,
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Import data -------------------------------------------------------------
deskhistory_table <- dbGetQuery(HRSAMPLE, "select * from deskhistory")
employeeinfo_table <- dbGetQuery(HRSAMPLE, "select * from employeeinfo")
# Import area codes to be used.  These are actual planned area codes.  7 trailing digits are composed randomly.
area_codes <- read_csv("data/area_codes.csv")
contact_max_end_date <- as.Date("2999-01-01")
# Create work email addresses ---------------------------------------------
email_addresses <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
left_join(employeeinfo_table) %>%
mutate(add_work_email = sample(c(1,0), 1, prob = c(993,7), replace = TRUE),
contact = ifelse(add_work_email == 1, paste0(tolower(first_name), ".", tolower(last_name), "@", company_website), NA),
contact_type = "email",
contact_sub_type = "work",
contact_end_date = contact_max_end_date)
# Count/validate email unique
# If this is false then there will be duplicate email addresses
nrow(email_addresses) == email_addresses %>% select(contact) %>% n_distinct()
# Create work and personal phone numbers ----------------------------------
# Get distinct list of all employees, desk_id, and max desk_id_end_date
# For each row get 1 phone number, should be work number.  contact end date is desk_id end date.  Some should be blank (1/387)
work_phone_list <- deskhistory_table %>%
group_by(employee_num, desk_id) %>%
summarize(desk_id_end_date_max = max(desk_id_end_date)) %>%
ungroup() %>%
rowwise() %>%
mutate(add_work_phone = sample(c(1,0), 1, prob = c(387,1), replace = TRUE),
contact = ifelse(add_work_phone == 1, create_phone_number(), NA),
contact_end_date = desk_id_end_date_max,
contact_type = "phone",
contact_sub_type = "work")
# Get distinct list of all  employees, and max desk_id_end_date, min desk_id_start_date
# For each row .89 add personal phone
# For each row .08 add personal phone 2
# for each person, get their minimum start date, for .18 of them add expired personal phone during min/max dates
# for each person, get their minimum start date, for .06 of them add expired personal phone during min/max dates
# for each person, get their minimum start date, for .004 of them add expired personal phone during min/max dates
personal_phone_list1 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(89,11), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list2 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(8,92), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list3 <- deskhistory_table %>%
group_by(employee_num) %>%
mutate(desk_id_end_date_max = max(desk_id_end_date),
desk_id_end_date_min = min(desk_id_end_date)) %>%
ungroup() %>%
#####filter out highest end date (2099)
filter(desk_id_end_date != contact_max_end_date) %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(18,82), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = sample(seq.Date(desk_id_end_date_min, min(desk_id_end_date_max, end_date_of_hierarchy), by = "days"),1)) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
contact_table <- bind_rows(work_phone_list,
personal_phone_list1,
personal_phone_list2,
personal_phone_list3,
email_addresses) %>%
select(employee_num,
contact_type,
contact_sub_type,
contact,
contact_end_date)
# Create collisions -------------------------------------------------------
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_sub_type == "personal", contact_end_date == as.Date("2999-01-01")) %>%
sample_n(45) %>%
select(employee_num, contact_new = contact) %>%
mutate(replace_work_number = "yes")
# Replace work numbers with personal number selected above
contact_table <- contact_table %>%
left_join(employee_work_numbers_to_replace) %>%
rowwise() %>%
mutate(contact = if_else(replace_work_number == "yes" &
contact_sub_type == "work" &
contact_end_date == as.Date("2999-01-01"),
contact_new,
contact)) %>%
select(-contact_new, -replace_work_number)
# Validation --------------------------------------------------------------
contact_table %>% count(contact, sort = T)
contact_table %>% count(employee_num, contact_end_date) %>% arrange(desc(n))
contact_table %>% filter(contact_end_date == as.Date("2999-01-01")) %>% count(contact_sub_type)
# Upload data -------------------------------------------------------------
# Populate contact
contact_sql <- paste(
"INSERT INTO contact (employee_num, contact_type, contact_sub_type, contact, contact_end_date) VALUES ",
paste0(
"('",
contact_table$employee_num, "','",
contact_table$contact_type, "','",
contact_table$contact_sub_type, "','",
contact_table$contact, "','",
contact_table$contact_end_date, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, contact_sql)
library(RMariaDB)
library(tidyverse)
library(lubridate)
library(readODS)
source("01_functions.R")
source("02_variables.R")
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Not used yet
#salaryhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM salaryhistory")
employeeinfo_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM employeeinfo")
deskhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM deskhistory")
deskjob_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM deskjob")
# Build education table ---------------------------------------------------
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS education;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE education (
employee_num INT (11),
degree VARCHAR (5),
school_name VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Build skills table ------------------------------------------------------
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS skills;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE skills (
employee_num INT (11),
skill_name VARCHAR (255),
skill_type VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Import data -------------------------------------------------------------
#https://www.4icu.org/us/
colleges <- read_delim("data/colleges.txt", delim = "|")
skills <- read_ods("data/skills_worksheet.ods") %>%
gather(key = job_name, value = skill, -c(skill_name, skill_type)) %>%
select(job_name, everything())
# Create education --------------------------------------------------------
create_college <- function() {
college <- colleges %>%
select(School) %>%
sample_n(1) %>%
as.character()
return(college)
}
# For each employee, use ratios in variables to determine their education levels
# Can only have PhD if they have MA/MS.
# Can only have MA/MS if they have a BA/BS
education_table_BABS <- employeeinfo_table %>%
select(employee_num) %>%
sample_frac(size = BA_pct + BS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct)),
school_name = create_college())
education_table_MAMS <- education_table_BABS %>%
select(employee_num) %>%
sample_frac(size = MA_pct + MS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("MA", "MS"), size =  1, prob = c(MA_pct, MS_pct)),
school_name = create_college())
education_table_PhD <- education_table_MAMS %>%
select(employee_num) %>%
sample_frac(size = PhD_pct) %>%
rowwise() %>%
mutate(degree = "PhD",
school_name = create_college())
education_table <- bind_rows(
education_table_BABS,
education_table_MAMS,
education_table_PhD
)
# Remove bad characters ---------------------------------------------------
education_table <- education_table %>%
mutate(school_name = iconv(school_name, "UTF-8", "UTF-8",sub='')) %>%
mutate(school_name = gsub(pattern = "'",replacement = "", school_name))
# Skills ------------------------------------------------------------------
# Create potential_skills that has list of employees and all the jobs they have had
# Use create_skills() to create a randomly generated number of skills for each employee
jobs_to_exclude_from_skills <- c("CEO")
potential_skills <- deskhistory_table %>%
left_join(deskjob_table) %>%
select(employee_num, job_name) %>%
filter(!job_name %in% jobs_to_exclude_from_skills) %>%
distinct()
employee_list_for_skills <- potential_skills %>%
select(employee_num) %>%
distinct()
create_skills <- function(f_employee_num) {
skill_count <- max(round(rgamma(1,3) ,0) -2,0)
skills_temp <- potential_skills %>%
filter(employee_num == f_employee_num) %>%
left_join(skills, by = "job_name") %>%
filter(!is.na(skill)) %>%
select(-job_name, - skill)
skills_temp_nrow <- nrow(skills_temp)
skills_temp <- sample_n(skills_temp, min(skill_count, skills_temp_nrow))
return(skills_temp)
}
skills_table <- tibble()
for (i in (1:length(employee_list_for_skills$employee_num))) {
skills_append <- create_skills(employee_list_for_skills$employee_num[i])
skills_table <- bind_rows(skills_table, skills_append)
}
# Upload data -------------------------------------------------------------
# Populate education
education_sql <- paste(
"INSERT INTO education (employee_num, degree, school_name) VALUES ",
paste0(
"('",
education_table$employee_num, "','",
education_table$degree, "','",
education_table$school_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, education_sql)
# Populate skills
skills_sql <- paste(
"INSERT INTO skills (employee_num, skill_type, skill_name) VALUES ",
paste0(
"('",
skills_table$employee_num, "','",
skills_table$skill_type, "','",
skills_table$skill_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, skills_sql)
# Validate ----------------------------------------------------------------
df <- dbGetQuery(HRSAMPLE, "SELECT * FROM education")
skimr::skim(df)
df %>% count(school_name, sort = TRUE)
source('C:/Development/github/sample-hr-database/12_education_skills.R', echo=TRUE)
library(RMariaDB)
library(tidyverse)
library(lubridate)
library(readODS)
source("01_functions.R")
source("02_variables.R")
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Not used yet
#salaryhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM salaryhistory")
employeeinfo_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM employeeinfo")
deskhistory_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM deskhistory")
deskjob_table <- dbGetQuery(HRSAMPLE, "SELECT * FROM deskjob")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS education;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE education (
employee_num INT (11),
degree VARCHAR (5),
school_name VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Build skills table ------------------------------------------------------
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS skills;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE skills (
employee_num INT (11),
skill_name VARCHAR (255),
skill_type VARCHAR (255),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
colleges <- read_delim("data/colleges.txt", delim = "|")
skills <- read_ods("data/skills_worksheet.ods") %>%
gather(key = job_name, value = skill, -c(skill_name, skill_type)) %>%
select(job_name, everything())
# Create education --------------------------------------------------------
create_college <- function() {
college <- colleges %>%
select(School) %>%
sample_n(1) %>%
as.character()
return(college)
}
education_table_BABS <- employeeinfo_table %>%
select(employee_num) %>%
sample_frac(size = BA_pct + BS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("BA", "BS"), size =  1, prob = c(BA_pct, BS_pct)),
school_name = create_college())
education_table_MAMS <- education_table_BABS %>%
select(employee_num) %>%
sample_frac(size = MA_pct + MS_pct) %>%
rowwise() %>%
mutate(degree = sample(x = c("MA", "MS"), size =  1, prob = c(MA_pct, MS_pct)),
school_name = create_college())
education_table_PhD <- education_table_MAMS %>%
select(employee_num) %>%
sample_frac(size = PhD_pct) %>%
rowwise() %>%
mutate(degree = "PhD",
school_name = create_college())
education_table <- bind_rows(
education_table_BABS,
education_table_MAMS,
education_table_PhD
)
education_table <- education_table %>%
mutate(school_name = iconv(school_name, "UTF-8", "UTF-8",sub='')) %>%
mutate(school_name = gsub(pattern = "'",replacement = "", school_name))
# Skills ------------------------------------------------------------------
# Create potential_skills that has list of employees and all the jobs they have had
# Use create_skills() to create a randomly generated number of skills for each employee
jobs_to_exclude_from_skills <- c("CEO")
potential_skills <- deskhistory_table %>%
left_join(deskjob_table) %>%
select(employee_num, job_name) %>%
filter(!job_name %in% jobs_to_exclude_from_skills) %>%
distinct()
employee_list_for_skills <- potential_skills %>%
select(employee_num) %>%
distinct()
create_skills <- function(f_employee_num) {
skill_count <- max(round(rgamma(1,3) ,0) -2,0)
skills_temp <- potential_skills %>%
filter(employee_num == f_employee_num) %>%
left_join(skills, by = "job_name") %>%
filter(!is.na(skill)) %>%
select(-job_name, - skill)
skills_temp_nrow <- nrow(skills_temp)
skills_temp <- sample_n(skills_temp, min(skill_count, skills_temp_nrow))
return(skills_temp)
}
skills_table <- tibble()
for (i in (1:length(employee_list_for_skills$employee_num))) {
skills_append <- create_skills(employee_list_for_skills$employee_num[i])
skills_table <- bind_rows(skills_table, skills_append)
}
# Populate education
education_sql <- paste(
"INSERT INTO education (employee_num, degree, school_name) VALUES ",
paste0(
"('",
education_table$employee_num, "','",
education_table$degree, "','",
education_table$school_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, education_sql)
# Populate skills
skills_sql <- paste(
"INSERT INTO skills (employee_num, skill_type, skill_name) VALUES ",
paste0(
"('",
skills_table$employee_num, "','",
skills_table$skill_type, "','",
skills_table$skill_name, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, skills_sql)
df <- dbGetQuery(HRSAMPLE, "SELECT * FROM education")
skimr::skim(df)
df %>% count(school_name, sort = TRUE)
