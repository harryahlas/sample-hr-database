# If none of above conditions are met, give promotion, keeping same desk_id.
temp_deskhistory_table <- create_deskhistory_row(
f_temp_new_desk_id = temp_desk_id,
f_temp_promotion_flag = 1)
deskhistory_table <- bind_rows(deskhistory_table, temp_deskhistory_table)
#i = i +1 # increase row number to look at because job did not change
########END EDIT
}
next
}
# Skip if CEO
# 2/17 removing below since CEO is nonexpiring
# if (temp_depth == 0) {
#
#   error_log <- error_log %>%
#     bind_rows(data.frame(loopnumber = loopnumber, employee_num = temp_employee_num, desk_id = temp_desk_id, issue = paste("CEO, not changing")))
#   i = i +1 # increase row number to look at (CAN BE REMOVED WHEN THIS PIECE IS FIXED)
#   next
# }
print("made it 2")
# Future plug that looks at salary and terms based on that
# salary_check_term_flag <- salary_check(temp_employee_num, temp_end_date)
# if (salary_check_term_flag == TRUE) {  EMPLOYEE TERMINATES DUE TO SALARY}
# Future plug that looks at performance reviews to see if they should term (2 in a row should be 90% term probability)
# performance_review_term_flag <- performance_review_check(temp_employee_num, temp_end_date)
# if (performance_review_term_flag == TRUE) {  EMPLOYEE TERMINATES DUE TO PERFORMANCE REVIEWS}
# If there are openings on the employee's team and they are for the same job and the opening's
# end date is les than 60 days prior to the employee's end date then they get this job.
# - Find parent of this desk
temp_parent_id <- hierarchy_with_depth %>%
filter(desk_id == temp_desk_id) %>%
select(parent_id) %>%
as.integer()
# - Find other children who have the same parent
# - If there are openings in this node within the last 60 days and same job - take this job
temp_children_same_parent_job <- hierarchy_with_depth %>%
filter(parent_id == temp_parent_id, desk_id != temp_desk_id) %>%
left_join(deskhistory_table_most_recent) %>%
left_join(deskjob_table) %>%
mutate(days_since_last_opening = temp_end_date - desk_id_end_date) %>%
filter(days_since_last_opening < 60,
days_since_last_opening > 0,
job_name == temp_job_name) %>%
arrange(days_since_last_opening)
print("made it 3")
# Are there any rows that meet this criteria?
same_node_and_job_availability <- if_else(nrow(temp_children_same_parent_job) == 0, FALSE, TRUE)
if(same_node_and_job_availability == TRUE) {
print("6 same_node_and_job_availability == TRUE")
# If so create a row for the oldest opening to be added to deskhistory_table
# Note: this function determines the duration of this new job as well as whether
# or not the employee will terminate after this job
temp_deskhistory_table <- create_deskhistory_row(
f_temp_new_desk_id = temp_children_same_parent_job$desk_id[1])
print("made it 5")
# Create new hire to fill open position 66% of time
external_hire_text <- "" # for error log
if (sample(1:3,1 ) != 1) {
print("made it 5b")
external_hire_employee_number <- find_external_hire()
external_hire_text <- "and position filled by external hire"
temp_deskhistory_table_append <- create_deskhistory_row(
f_temp_new_desk_id = temp_desk_id,
f_temp_employee_num = external_hire_employee_number)
print("made it 5c")
temp_deskhistory_table <- temp_deskhistory_table %>%
bind_rows(temp_deskhistory_table_append)
print("made it 6")
} else {print("failed 6")}
# Add new row to deskhistory_table
deskhistory_table <- bind_rows(deskhistory_table, temp_deskhistory_table)
# Error log printout for troubleshooting
error_log <- error_log %>%
bind_rows(data.frame(loopnumber = loopnumber,
employee_num = temp_employee_num,
desk_id = temp_desk_id,
new_desk_id = temp_children_same_parent_job$desk_id[1],
issue = paste("Job added, same org and job", external_hire_text),
old_job = temp_job_name,
new_job = deskjob_table$job_name[deskjob_table$desk_id == temp_children_same_parent_job$desk_id[1]]))
next
}
# Similar to logic above with a few differences. It can be a different job in the same node.
# And it can be 90 days old (vs 60). Also note there is a 65% chance of this happening.
temp_children_same_parent <- hierarchy_with_depth %>%
filter(parent_id == temp_parent_id, desk_id != temp_desk_id) %>%
left_join(deskhistory_table_most_recent) %>%
left_join(deskjob_table) %>%
mutate(days_since_last_opening = temp_end_date - desk_id_end_date) %>%
filter(days_since_last_opening < 90,
days_since_last_opening > 0) %>%
arrange(days_since_last_opening)
# Ensure there are rows
same_node_availability <- if_else(nrow(temp_children_same_parent) == 0, FALSE, TRUE)
if(same_node_availability == TRUE &
sample(0:100,1) > 35) # 65% of the time have this happen
{
print("same_node_availability and .65 random")
###????
# Create a row for the oldest opening to be added to deskhistory_table
temp_deskhistory_table <- create_deskhistory_row(
f_temp_new_desk_id = temp_children_same_parent$desk_id[1])
###??? IS THIS AN ERROR? WHY APPEND ROWS BELOW?
# Create new hire to fill open position 50% of time
external_hire_text <- "" # for error log
if (sample(1:3, 1 ) != 1) {
print("made it 9")
external_hire_employee_number <- find_external_hire()
external_hire_text <- "and position filled by external hire"
temp_deskhistory_table_append <- create_deskhistory_row(
f_temp_new_desk_id = temp_desk_id,
f_temp_employee_num = external_hire_employee_number)
temp_deskhistory_table <- temp_deskhistory_table %>%
bind_rows(temp_deskhistory_table_append)
} else {print("failed 8 or 9")}
# Add new row to deskhistory_table
deskhistory_table <- bind_rows(deskhistory_table, temp_deskhistory_table)
# Error log printout for troubleshooting
error_log <- error_log %>%
bind_rows(data.frame(loopnumber = loopnumber,
employee_num = temp_employee_num,
desk_id = temp_desk_id,
new_desk_id = temp_children_same_parent$desk_id[1],
issue = paste("Job added, same org maybe same job", external_hire_text),
old_job = temp_job_name,
new_job = deskjob_table$job_name[deskjob_table$desk_id == temp_children_same_parent$desk_id[1]]))
next
} else if (same_node_availability == TRUE) {
print("made it 10")
# Update error log if same node different job doesn't happen due to random sample.
error_log <- error_log %>%
bind_rows(data.frame(loopnumber = loopnumber, employee_num = temp_employee_num, desk_id = temp_desk_id, issue = paste("Random sample prevented different job in same node.")))
} else if (temp_job_name %in% jobs_that_can_change_org$job_name &
sample(0:100,1) > 40) {
print("made it 11")
# Repeat process for jobs that can change (not sales/attorney etc)
# Select all open jobs for that position within last 90 days
temp_same_job_any_org <- deskhistory_table_most_recent %>%
left_join(deskjob_table) %>%
filter(job_name == temp_job_name) %>%
mutate(days_since_last_opening = temp_end_date - desk_id_end_date) %>%
filter(days_since_last_opening < 90,
days_since_last_opening > 0) %>%
arrange(days_since_last_opening)
# Ensure there are rows
same_job_availability <- if_else(nrow(temp_same_job_any_org) == 0, FALSE, TRUE)
if(same_job_availability == TRUE) {
print("made it 12")
# Create a row for the oldest opening to be added to deskhistory_table
temp_deskhistory_table <- create_deskhistory_row(
f_temp_new_desk_id = temp_same_job_any_org$desk_id[1])
# Create new hire to fill open position 66% of time
external_hire_text <- "" # for error log
if (sample(1:3,1 ) != 1) {
external_hire_employee_number <- find_external_hire()
external_hire_text <- "and position filled by external hire"
temp_deskhistory_table_append <- create_deskhistory_row(
f_temp_new_desk_id = temp_desk_id,
f_temp_employee_num = external_hire_employee_number)
temp_deskhistory_table <- temp_deskhistory_table %>%
bind_rows(temp_deskhistory_table_append)
print("made it 13")
}
# Add new row to deskhistory_table
deskhistory_table <- bind_rows(deskhistory_table, temp_deskhistory_table)
# Error log printout for troubleshooting
error_log <- error_log %>%
bind_rows(data.frame(loopnumber = loopnumber,
employee_num = temp_employee_num,
desk_id = temp_desk_id,
new_desk_id = temp_deskhistory_table$desk_id[1],
issue = paste("got same job in different org", external_hire_text),
old_job = temp_job_name,
new_job = deskjob_table$job_name[deskjob_table$desk_id == temp_deskhistory_table$desk_id[1]]))
next
}
}
else {
print("made it 14")
# If none of above conditions are met, give promotion, keeping same desk_id.
temp_deskhistory_table <- create_deskhistory_row(
f_temp_new_desk_id = temp_desk_id,
f_temp_promotion_flag = 1)
deskhistory_table <- bind_rows(deskhistory_table, temp_deskhistory_table)
# Error log printout for troubleshooting
error_log <- error_log %>%
bind_rows(data.frame(loopnumber = loopnumber,
employee_num = temp_employee_num,
desk_id = temp_desk_id,
new_desk_id = temp_desk_id, #temp_children_same_parent$desk_id[1], ### <- PRETTY SURE THIS IS WRONG
issue = paste("gave promotion"),
old_job = temp_job_name,
new_job = "same job due to promotionxxx"))
}
loop_date <-  sort(deskhistory_table_most_recent$desk_id_end_date, TRUE)[length(deskhistory_table_most_recent$desk_id_end_date)- i]
print(paste0("Loopnumber: ", loopnumber,  " - Date: ", loop_date ))
}
# Clean up employees that have no job but didn't term ---------------------
# Count of TMs that had max date before as.Date("2999-01-01") but did not terminate by month
# These need to terminate
employees_to_add_terms <- deskhistory_table %>%
group_by(employee_num) %>%
summarize(last_day = max(desk_id_end_date),
term_flag = max(termination_flag)) %>%
filter(last_day < loop_date - 90,
term_flag == 0) %>%
select(-term_flag)
employees_to_add_terms
# Terminate their most recent desk_history row
deskhistory_table <- deskhistory_table %>%
left_join(employees_to_add_terms) %>%
mutate(termination_flag = case_when(last_day == desk_id_end_date ~ 1,
TRUE ~ termination_flag)) %>%
select(-last_day)
#check
bob <- deskhistory_table %>%
filter(desk_id_end_date > (loop_date - 90)) %>%
count(desk_id) %>%
filter(n > 1) %>%
left_join(deskhistory_table) %>%
arrange(desk_id)
bob
loop_date
bob
# First, clear old data from deskhistory
dbExecute(HRSAMPLE, "DELETE FROM deskhistory")
# Populate deskhistory
deskhistory_sql <- paste(
"INSERT INTO deskhistory (employee_num, desk_id, desk_id_start_date, desk_id_end_date, termination_flag, promotion_flag) VALUES ",
paste0(
"('",
deskhistory_table$employee_num, "','",
deskhistory_table$desk_id, "','",
deskhistory_table$desk_id_start_date, "','",
deskhistory_table$desk_id_end_date, "','",
deskhistory_table$termination_flag, "','",
deskhistory_table$promotion_flag, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, deskhistory_sql)
# Save data for alternate use ---------------------------------------------
# Note: this may be removeable
save(deskhistory_table, file = "data/deskhistory.rda")
save(deskhistory_table_most_recent, file = "data/deskhistory_table_most_recent.rda")
# Visualize
error_log %>%
mutate(loopround = round(loopnumber, -2),
issue = gsub('[[:digit:]]+|', '', issue)) %>%
count(loopround, issue) %>%
ggplot(aes(x = loopround, y = n)) +
geom_col() +
facet_wrap(~issue)
job_changes <- deskhistorytroubleshoot %>%
filter(!is.na(old_job_name)) %>%
count(old_job_name, new_job_name)
job_changes
# Term rates
employees2002 <- deskhistory_table %>% filter(desk_id_start_date <=as.Date("2002-12-31") & desk_id_end_date >= as.Date("2002-01-01"))
terminations2002 <- employees2002 %>%
filter(promotion_flag ==1, year(desk_id_end_date) == 2002)
length(terminations2002$employee_num)/length(employees2002$employee_num)
# New Hire rates
newhires2002 <- employees2002 %>%
group_by(employee_num) %>%
summarize(hire_date = min(desk_id_start_date)) %>%
filter(year(hire_date) == 2002) %>%
left_join(employees2002, by = c("employee_num", "hire_date" = "desk_id_start_date"))
length(newhires2002$employee_num)/length(employees2002$employee_num)
deskhistory_table %>%
group_by(employee_num) %>%
summarize(hire_year = year(min(desk_id_start_date))) %>%
count(hire_year)
# terms by year
deskhistory_table %>%
filter(termination_flag == 1, desk_id_end_date != as.Date("2999-01-01")) %>%
count(year(desk_id_end_date)) %>%
ggplot(aes(x = `year(desk_id_end_date)`, y = n)) +
geom_col()
deskhistory_table %>%
filter(desk_id_end_date == as.Date("2999-01-01")) %>%
nrow()
# Count of TMs that started in first_date_of_hierarchy
deskhistory_table %>%
group_by(employee_num) %>%
summarize(first_day = min(desk_id_start_date)) %>%
filter(first_day == first_date_of_hierarchy) %>%
nrow()
# Count of TMs that terminated by month
deskhistory_table %>%
filter(termination_flag == 1, desk_id_end_date != as.Date("2999-01-01")) %>%
mutate(termmonth = floor_date(desk_id_end_date, "month")) %>%
count(termmonth) %>%
ggplot(aes(x = termmonth, y = n)) +
geom_col()
# Count of TMs that were hired after first_date_of_hierarchy
deskhistory_table %>%
group_by(employee_num) %>%
summarize(first_day = min(desk_id_start_date)) %>%
filter(first_day > first_date_of_hierarchy) %>%
nrow()
# Count of TMs that had max date before as.Date("2999-01-01") but did not terminate
joe <- deskhistory_table %>%
group_by(employee_num) %>%
summarize(last_day = max(desk_id_end_date),
term_flag = max(termination_flag)) %>%
filter(last_day < as.Date("2999-01-01"), term_flag == 0) %>%
mutate(last_month = floor_date(last_day, "month")) %>%
count(last_month)
deskhistory_table %>%
group_by(employee_num) %>%
summarize(last_day = max(desk_id_end_date),
term_flag = max(termination_flag)) %>%
filter(last_day < as.Date("2999-01-01"), term_flag == 0) %>%
mutate(last_month = floor_date(last_day, "month")) %>%
count(last_month) %>%
ggplot(aes(x = last_month, y = n)) +
geom_col()
# Save to csv for github - maybe move elsewhere?
write_csv(deskhistory_table, "data/deskhistory_table.csv")
write_csv(deskjob_table, "data/deskjob_table.csv")
source("07_create_performance_reviews_salaries.R")
source("08_employee_info_cleanup.R")
source("09_recruiting.R")
source("10_views.R")
source("11_contact_info.R")
source("12_education_skills.R")
2+2
aa <- dbGetQuery(HRSAMPLE, "SELECT * FROM SKILLS")
View(aa)
anti_join(aa, employeeinfo_table) %>% nrow()
anti_join(employeeinfo_table,aa) %>% nrow()
aa <- dbGetQuery(HRSAMPLE, "SELECT * FROM education")
anti_join(employeeinfo_table,aa) %>% nrow()
anti_join(aa, employeeinfo_table) %>% nrow()
anti_join(deskhistory_table, employeeinfo_table, by = "employee_num") %>% nrow()
anti_join(employeeinfo_table,deskhistory_table, by = "employee_num") %>% nrow()
aa <- dbGetQuery(HRSAMPLE, "SELECT * FROM contact")
anti_join(employeeinfo_table,aa) %>% nrow()
anti_join(aa, employeeinfo_table) %>% nrow()
View(aa)
aa %>% count(year(contact_end_date), sort = T)
aaa <- aa %>% count(year(contact_end_date), sort = T)
View(aaa)
aaa <- deskhistory_table %>% count(year(desk_id_end_date), sort = T)
View(aa)
aaa <- deskhistory_table %>% ungroup() %>% count(year(desk_id_end_date), sort = T)
aaa <- deskhistory_table %>% count(year(desk_id_end_date), sort = T)
aaa <- aa %>% count(year(contact_end_date), sort = T)
library(RMariaDB)
library(tidyverse)
library(lubridate)
source("01_functions.R")
source("02_variables.R")
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Import area codes to be used.  These are actual planned area codes.  7 trailing digits are composed randomly.
area_codes <- read_csv("data/area_codes.csv")
contact_max_end_date <- as.Date("2999-01-01")
aa <- dbGetQuery(HRSAMPLE, "select * from contact")
aa %>% count(lubridate::year(contact_end_date), contact_type) %>% spread(contact_type, n)
aaa <- aa %>% count(lubridate::year(contact_end_date), contact_type) %>% spread(contact_type, n)
View(aaa)
work_phone_list <- deskhistory_table %>%
group_by(employee_num, desk_id) %>%
summarize(desk_id_end_date_max = max(desk_id_end_date)) %>%
ungroup() %>%
rowwise() %>%
mutate(add_work_phone = sample(c(1,0), 1, prob = c(387,1), replace = TRUE),
contact = ifelse(add_work_phone == 1, create_phone_number(), NA),
contact_end_date = desk_id_end_date_max,
contact_type = "phone",
contact_sub_type = "work")
# Import data -------------------------------------------------------------
deskhistory_table<- dbGetQuery(HRSAMPLE, "select * from deskhistory")
work_phone_list <- deskhistory_table %>%
group_by(employee_num, desk_id) %>%
summarize(desk_id_end_date_max = max(desk_id_end_date)) %>%
ungroup() %>%
rowwise() %>%
mutate(add_work_phone = sample(c(1,0), 1, prob = c(387,1), replace = TRUE),
contact = ifelse(add_work_phone == 1, create_phone_number(), NA),
contact_end_date = desk_id_end_date_max,
contact_type = "phone",
contact_sub_type = "work")
View(work_phone_list)
work_phone_list %>% count(lubridate::year(contact_end_date), sort = T)
personal_phone_list1 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(89,11), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list2 <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(8,92), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = contact_max_end_date) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list3 <- deskhistory_table %>%
group_by(employee_num) %>%
mutate(desk_id_end_date_max = max(desk_id_end_date),
desk_id_end_date_min = min(desk_id_end_date)) %>%
ungroup() %>%
#####filter out highest end date (2099)
filter(desk_id_end_date != contact_max_end_date) %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(18,82), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = sample(seq.Date(desk_id_end_date_min, desk_id_end_date_max, by = "days"),1)) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
personal_phone_list1 %>% count(lubridate::year(contact_end_date), sort = T)
personal_phone_list2 %>% count(lubridate::year(contact_end_date), sort = T)
personal_phone_list3 %>% count(lubridate::year(contact_end_date), sort = T)
aaaa <- personal_phone_list3 %>% count(lubridate::year(contact_end_date), sort = T)
View(aaaa)
personal_phone_list3 <- deskhistory_table %>%
group_by(employee_num) %>%
mutate(desk_id_end_date_max = max(desk_id_end_date),
desk_id_end_date_min = min(desk_id_end_date)) %>%
ungroup() %>%
#####filter out highest end date (2099)
filter(desk_id_end_date != contact_max_end_date) %>%
rowwise() %>%
mutate(add_personal_phone = sample(c(1,0), 1, prob = c(18,82), replace = TRUE),
contact = ifelse(add_personal_phone == 1, create_phone_number(), NA),
contact_end_date = sample(seq.Date(desk_id_end_date_min, min(desk_id_end_date_max, end_date_of_hierarchy), by = "days"),1)) %>%
filter(!is.na(contact)) %>%
mutate(contact_type = "phone", contact_sub_type = "personal")
# Create work email addresses ---------------------------------------------
email_addresses <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
left_join(employeeinfo_table) %>%
mutate(add_work_email = sample(c(1,0), 1, prob = c(993,7), replace = TRUE),
contact = ifelse(add_work_email == 1, paste0(tolower(first_name), ".", tolower(last_name), "@", company_website), NA),
contact_type = "email",
contact_sub_type = "work",
contact_end_date = contact_max_end_date)
employeeinfo_table <- dbGetQuery(HRSAMPLE, "select * from employeeinfo")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS = 0;")
dbExecute(HRSAMPLE, "DROP TABLE IF EXISTS contact;")
dbExecute(HRSAMPLE, "SET FOREIGN_KEY_CHECKS=1;")
dbExecute(HRSAMPLE, "CREATE TABLE contact (
employee_num INT (11),
contact_type VARCHAR (255),
contact_sub_type VARCHAR (255),
contact VARCHAR (255),
contact_end_date DATE,
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Create work email addresses ---------------------------------------------
email_addresses <- deskhistory_table %>%
select(employee_num) %>%
distinct() %>%
left_join(employeeinfo_table) %>%
mutate(add_work_email = sample(c(1,0), 1, prob = c(993,7), replace = TRUE),
contact = ifelse(add_work_email == 1, paste0(tolower(first_name), ".", tolower(last_name), "@", company_website), NA),
contact_type = "email",
contact_sub_type = "work",
contact_end_date = contact_max_end_date)
# Count/validate email unique
# If this is false then there will be duplicate email addresses
nrow(email_addresses) == email_addresses %>% select(contact) %>% n_distinct()
contact_table <- bind_rows(work_phone_list,
personal_phone_list1,
personal_phone_list2,
personal_phone_list3,
email_addresses) %>%
select(employee_num,
contact_type,
contact_sub_type,
contact,
contact_end_date)
# Get sample of employees with active work number
employee_work_numbers_to_replace <- contact_table %>%
filter(contact_sub_type == "personal", contact_end_date == as.Date("2999-01-01")) %>%
sample_n(45) %>%
select(employee_num, contact_new = contact) %>%
mutate(replace_work_number = "yes")
# Replace work numbers with personal number selected above
contact_table <- contact_table %>%
left_join(employee_work_numbers_to_replace) %>%
rowwise() %>%
mutate(contact = if_else(replace_work_number == "yes" &
contact_sub_type == "work" &
contact_end_date == as.Date("2999-01-01"),
contact_new,
contact)) %>%
select(-contact_new, -replace_work_number)
contact_table %>% count(employee_num, contact_end_date) %>% arrange(desc(n))
contact_table %>% filter(contact_end_date == as.Date("2999-01-01")) %>% count(contact_sub_type)
# Populate contact
contact_sql <- paste(
"INSERT INTO contact (employee_num, contact_type, contact_sub_type, contact, contact_end_date) VALUES ",
paste0(
"('",
contact_table$employee_num, "','",
contact_table$contact_type, "','",
contact_table$contact_sub_type, "','",
contact_table$contact, "','",
contact_table$contact_end_date, "')",
collapse = ", "),
";"
)
dbExecute(HRSAMPLE, contact_sql)
