end_date <- as.Date("2018-12-30", tz = "UTC")
month_list <- seq.Date(start_date, end_date, by = "month")
# Next, let's create a placeholder data frame for our monthly calendar data
# Create empty deskhistory_trend table (monthly calendar table)
dh_trend <- tibble()
# Here is the code.  We'll review it in more detail below.
## Note we had to reassign the termination flag for months that they did not terminate
## Also, we'll remove the promotion rows
# Find employees that were active for entire month or termed during that month
# Example For 2010-01-31: if their end date is > 2010-01-01 and start date <= 2010-01-31 and not termed then keep
for (i in 1:length(month_list)) {
print(month_list[i])
dh_trend_active <- dh %>%
filter(desk_id_start_date <= ceiling_date(month_list[i]),
desk_id_end_date >= ceiling_date(month_list[i])) %>%
filter(termination_flag == 0 | desk_id_end_date != ceiling_date(as.Date(month_list[i])) %>%
mutate(trend_month = month_list[i],
termination_flag = 0)
dh_trend_term <- dh %>%
filter(termination_flag == 1,
desk_id_end_date <= ceiling_date(month_list[i], "month"),
desk_id_end_date >= month_list[i]
) %>%
mutate(trend_month = month_list[i])
dh_trend <- bind_rows(dh_trend, dh_trend_active, dh_trend_term)
}
# A more detailed look at the code is below. Feel free to SKIP AHEAD (link).
# <sub header>Inside the for loop
# The first piece of the for loop specifies how many loops to run.  This is the number of months in our list of months (<code>month_list</code>)
# for (i in 1:length(month_list)) {
# Then we'll create a temporary data frame <code>dh_trend_active</code> that captures active employees for the month in the current iteration.
# The code looks at the <code>desk_id_start_date</code> and <code>desk_id_end_date</code> columns to determine if an employee was active during that month.
I THINK desk_id_end_date > month_list[i]) NEEDS TO BE CEILING DATE
# Here is the code.  We'll review it in more detail below.
## Note we had to reassign the termination flag for months that they did not terminate
## Also, we'll remove the promotion rows
# Find employees that were active for entire month or termed during that month
# Example For 2010-01-31: if their end date is > 2010-01-01 and start date <= 2010-01-31 and not termed then keep
for (i in 1:length(month_list)) {
print(month_list[i])
dh_trend_active <- dh %>%
filter(desk_id_start_date <= ceiling_date(month_list[i]),
desk_id_end_date >= ceiling_date(month_list[i])) %>%
filter(termination_flag == 0 | desk_id_end_date != ceiling_date(month_list[i])) %>%
mutate(trend_month = month_list[i],
termination_flag = 0)
dh_trend_term <- dh %>%
filter(termination_flag == 1,
desk_id_end_date <= ceiling_date(month_list[i], "month"),
desk_id_end_date >= month_list[i]
) %>%
mutate(trend_month = month_list[i])
dh_trend <- bind_rows(dh_trend, dh_trend_active, dh_trend_term)
}
#CHECK, SHOULD BE NONE >1
dh_trend %>% count(trend_month, employee_num, name = "empmonth", sort = T)
# Next, let's create a placeholder data frame for our monthly calendar data
# Create empty deskhistory_trend table (monthly calendar table)
dh_trend <- tibble()
#We need to create a list of all months that will be included in our calendar table data. <em>Lubridate</em> works best with the UTC time zone.
# Get list of all months, by end of month
start_date <- as.Date("1999-01-01", tz = "UTC")
end_date <- as.Date("2018-12-31", tz = "UTC")
month_list <- seq.Date(start_date, end_date, by = "month")
# Here is the code.  We'll review it in more detail below.
## Note we had to reassign the termination flag for months that they did not terminate
## Also, we'll remove the promotion rows
# Find employees that were active for entire month or termed during that month
# Example For 2010-01-31: if their end date is > 2010-01-01 and start date <= 2010-01-31 and not termed then keep
for (i in 1:length(month_list)) {
print(month_list[i])
dh_trend_active <- dh %>%
filter(desk_id_start_date <= ceiling_date(month_list[i]),
desk_id_end_date >= ceiling_date(month_list[i])) %>%
filter(termination_flag == 0 | desk_id_end_date != ceiling_date(month_list[i])) %>%
mutate(trend_month = month_list[i],
termination_flag = 0)
dh_trend_term <- dh %>%
filter(termination_flag == 1,
desk_id_end_date <= ceiling_date(month_list[i], "month"),
desk_id_end_date >= month_list[i]
) %>%
mutate(trend_month = month_list[i])
dh_trend <- bind_rows(dh_trend, dh_trend_active, dh_trend_term)
}
dh_trend %>% count(trend_month, employee_num, name = "empmonth", sort = T)
i <- 7
dh_trend_active <- dh %>%
filter(desk_id_start_date <= ceiling_date(month_list[i]),
desk_id_end_date >= ceiling_date(month_list[i])) %>%
filter(termination_flag == 0 | desk_id_end_date != ceiling_date(month_list[i])) %>%
mutate(trend_month = month_list[i],
termination_flag = 0)
dh_trend_active %>% filter(employee_num==38346)
aaa <- dh_trend_active %>% filter(employee_num==38346)
aaa$desk_id_end_date[1]
ceiling_date(month_list[i])
ceiling_date(month_list[i], "month")
#We need to create a list of all months that will be included in our calendar table data. <em>Lubridate</em> works best with the UTC time zone.
# Get list of all months, by end of month
start_date <- as.Date("1999-01-01")#, tz = "UTC")
end_date <- as.Date("2018-12-31")#, tz = "UTC")
month_list <- seq.Date(start_date, end_date, by = "month")
ceiling_date(month_list[i], "month")
month_list[i]
ceiling_date(month_list[i]-1, "month")
# Next, let's create a placeholder data frame for our monthly calendar data
# Create empty deskhistory_trend table (monthly calendar table)
dh_trend <- tibble()
#We need to create a list of all months that will be included in our calendar table data. <em>Lubridate</em> works best with the UTC time zone.
# Get list of all months, by end of month
start_date <- as.Date("1999-01-01")#, tz = "UTC")
end_date <- as.Date("2018-12-31")#, tz = "UTC")
month_list <- seq.Date(start_date, end_date, by = "month")
# Here is the code.  We'll review it in more detail below.
## Note we had to reassign the termination flag for months that they did not terminate
## Also, we'll remove the promotion rows
# Find employees that were active for entire month or termed during that month
# Example For 2010-01-31: if their end date is > 2010-01-01 and start date <= 2010-01-31 and not termed then keep
for (i in 1:length(month_list)) {
print(month_list[i])
dh_trend_active <- dh %>%
filter(desk_id_start_date <= ceiling_date(month_list[i]) - 1,
desk_id_end_date >= ceiling_date(month_list[i]) - 1) %>%
filter(termination_flag == 0 | desk_id_end_date != ceiling_date(month_list[i]) - 1) %>%
mutate(trend_month = month_list[i],
termination_flag = 0)
dh_trend_term <- dh %>%
filter(termination_flag == 1,
desk_id_end_date <= ceiling_date(month_list[i], "month") - 1,
desk_id_end_date >= month_list[i]
) %>%
mutate(trend_month = month_list[i])
dh_trend <- bind_rows(dh_trend, dh_trend_active, dh_trend_term)
}
#CHECK, SHOULD BE NONE >1
dh_trend %>% count(trend_month, employee_num, name = "empmonth", sort = T)
i <- 7
print(month_list[i])
ceiling_date(month_list[i]) - 1
ceiling_date(month_list[i])
ceiling_date(month_list[i], "month")
ceiling_date(month_list[i], "month") - 1
# Next, let's create a placeholder data frame for our monthly calendar data
# Create empty deskhistory_trend table (monthly calendar table)
dh_trend <- tibble()
#We need to create a list of all months that will be included in our calendar table data. <em>Lubridate</em> works best with the UTC time zone.
# Get list of all months, by end of month
start_date <- as.Date("1999-01-01")#, tz = "UTC")
end_date <- as.Date("2018-12-31")#, tz = "UTC")
month_list <- seq.Date(start_date, end_date, by = "month")
# Here is the code.  We'll review it in more detail below.
## Note we had to reassign the termination flag for months that they did not terminate
## Also, we'll remove the promotion rows
# Find employees that were active for entire month or termed during that month
# Example For 2010-01-31: if their end date is > 2010-01-01 and start date <= 2010-01-31 and not termed then keep
for (i in 1:length(month_list)) {
print(month_list[i])
dh_trend_active <- dh %>%
filter(desk_id_start_date <= ceiling_date(month_list[i], "month") - 1,
desk_id_end_date >= ceiling_date(month_list[i], "month") - 1) %>%
filter(termination_flag == 0 | desk_id_end_date != ceiling_date(month_list[i], "month") - 1) %>%
mutate(trend_month = month_list[i],
termination_flag = 0)
dh_trend_term <- dh %>%
filter(termination_flag == 1,
desk_id_end_date <= ceiling_date(month_list[i], "month") - 1,
desk_id_end_date >= month_list[i]
) %>%
mutate(trend_month = month_list[i])
dh_trend <- bind_rows(dh_trend, dh_trend_active, dh_trend_term)
}
#CHECK, SHOULD BE NONE >1
dh_trend %>% count(trend_month, employee_num, name = "empmonth", sort = T)
#CHECK, SHOULD BE NONE >1
dh_trend %>% count(trend_month, employee_num, name = "empmonth", sort = T) %>% filter(n=2)
#CHECK, SHOULD BE NONE >1
dh_trend %>% count(trend_month, employee_num, name = "empmonth", sort = T) %>% filter(n==2)
#CHECK, SHOULD BE NONE >1
dh_trend %>% count(trend_month, employee_num, name = "empmonth", sort = T) %>% filter(n==2) %>% select(employee_num) %>% distinct()
ceiling_date(as.Date("2019/01/05"))
ceiling_date(as.Date("2019/01/05"), "month")
ceiling_date(as.Date("2019/01/05"), "day")
View(dh_trend_term)
month_list[i]
ceiling_date(month_list[i], "month") - 1
ceiling_date(month_list[i], "month")
library(tidyverse)
library(RSQLite)
library(lubridate)
# Connect to database
con <- dbConnect(SQLite(),'my_db.sqlite3')
#The first table we will need is the deskhistory table.  We will import it into an object called <code>dh</code>.
# Retrieve deskhistory (point in time table)
dh <- dbGetQuery(con, "SELECT * FROM DESKHISTORY")
# Connect to database
con <- dbConnect(SQLite(),'my_db.sqlite3')
setwd("C:\\Users\\Anyone\\Desktop\\Toss")
#The first table we will need is the deskhistory table.  We will import it into an object called <code>dh</code>.
# Retrieve deskhistory (point in time table)
dh <- dbGetQuery(con, "SELECT * FROM DESKHISTORY")
# Connect to database
con <- dbConnect(SQLite(),'my_db.sqlite3')
#The first table we will need is the deskhistory table.  We will import it into an object called <code>dh</code>.
# Retrieve deskhistory (point in time table)
dh <- dbGetQuery(con, "SELECT * FROM DESKHISTORY")
# Our goal is to get this point in time data in to a monthly snapshot, which can be very useful for reporting and analysis.
# The monthly table will have one row for each month the employee is in a desk_id.
## One of the drawbacks of SQLite is that it does not store date formats.  So the first transform will be to convert the date fields from text into dates.
# Convert SQLite date fields from text to date
dh <- dh %>%
mutate(desk_id_start_date = as.Date(desk_id_start_date),
desk_id_end_date = as.Date(desk_id_end_date)) %>%
select(-promotion_flag)
# Next, let's create a placeholder data frame for our monthly calendar data
# Create empty deskhistory_trend table (monthly calendar table)
dh_trend <- tibble()
#We need to create a list of all months that will be included in our calendar table data. <em>Lubridate</em> works best with the UTC time zone.
# Get list of all months, by end of month
start_date <- as.Date("1999-01-01")#, tz = "UTC")
end_date <- as.Date("2018-12-31")#, tz = "UTC")
month_list <- seq.Date(start_date, end_date, by = "month")
# Here is the code.  We'll review it in more detail below.
## Note we had to reassign the termination flag for months that they did not terminate
## Also, we'll remove the promotion rows
# Find employees that were active for entire month or termed during that month
# Example For 2010-01-31: if their end date is > 2010-01-01 and start date <= 2010-01-31 and not termed then keep
for (i in 1:length(month_list)) {
dh_trend_active <- dh %>%
filter(desk_id_start_date <= ceiling_date(month_list[i], "month") - 1,
desk_id_end_date >= ceiling_date(month_list[i], "month") - 1) %>%
filter(termination_flag == 0 | desk_id_end_date != ceiling_date(month_list[i], "month") - 1) %>%
mutate(trend_month = month_list[i],
termination_flag = 0)
dh_trend_term <- dh %>%
filter(termination_flag == 1,
desk_id_end_date <= ceiling_date(month_list[i], "month") - 1,
desk_id_end_date >= month_list[i]
) %>%
mutate(trend_month = month_list[i])
dh_trend <- bind_rows(dh_trend, dh_trend_active, dh_trend_term)
}
dh_trend %>% sample_n(3)
dh_trend$desk_id_start_date <- format(dh_trend$desk_id_start_date, "%Y-%m-%d")
dh_trend$desk_id_end_date <- format(dh_trend$desk_id_end_date, "%Y-%m-%d")
dh_trend$trend_month <- format(dh_trend$trend_month, "%Y-%m-%d")
#
dj <- dbGetQuery(con, "SELECT * FROM DESKJOB")
dh_trend <- dh_trend %>%
left_join(dj)
## Having a hierarchy will make this table more valuable for reporting. Let's add org information.
## The Rollup view lists all the company's desk_ids 4 levels deep along with the level of each desk.
## We will use the lvl04_desk_id to join the company hierarchy data.
## NEED TO EXPLAIN BETTER
## We are going to remove the CEO columns since they are not adding value
# add rollup view
ru <- dbGetQuery(con, "SELECT * FROM ROLLUP")
## We are going to remove the CEO columns since they are not adding value
ru <- ru %>%
select(-lvl00_desk_id, - lvl00_org)
dh_trend <- dh_trend %>%
left_join(ru, by = c("desk_id" = "lvl04_desk_id"))
# Let's also add the employee's name
ei <- dbGetQuery(con, "SELECT * FROM EMPLOYEEINFO")
dh_trend <- dh_trend %>%
left_join(ei %>% select(employee_num,
last_name,
first_name))
# Let's reorder some of the rows.
dh_trend <- dh_trend %>%
select(trend_month,
employee_num,
last_name,
first_name,
job_name,
depth,
everything())
dh_trend
dh_trend %>% sample_n(3)
# See results
et_sample <- dbGetQuery(con, "SELECT * FROM EMPLOYEE_TREND ORDER BY RANDOM() LIMIT 5")
## Our last step is to upload the data to a new table as employee_trend
#upload new table employee_trend
dbWriteTable(con, "employee_trend", dh_trend, overwrite = TRUE)
# See results
et_sample <- dbGetQuery(con, "SELECT * FROM EMPLOYEE_TREND ORDER BY RANDOM() LIMIT 5")
glimpse(et_sample)
# See results
et_sample <- dbGetQuery(con, "SELECT * FROM EMPLOYEE_TREND ORDER BY RANDOM() LIMIT 3")
et_sample
glimpse(et_sample)
et_sample
file.remove("my_db.sqlite3")
# Close connection
dbDisconnect(con)
file.remove("my_db.sqlite3")
file.remove("my_db.sqlite3")
exists("my_db.sqlite3")
exists("pit_to_calendar.R")
file.exists("my_db.sqlite3")
file.exists("pit_to_calendar.R")
file.exists("Volume.h")
if file.exists {file.remove("my_db.sqlite3")}
if file.exists("my_db.sqlite3") {file.remove("my_db.sqlite3")}
file.exists("my_db.sqlite3")
if file.exists("my_db.sqlite3"): {file.remove("my_db.sqlite3")}
file.exists("my_db.sqlite3")
if (file.exists("my_db.sqlite3")) {file.remove("my_db.sqlite3")}
if (file.exists("my_db.sqlite3")) {file.remove("my_db.sqlite3")}
# Set up environment
library(tidyverse)
library(RSQLite)
library(lubridate)
# Load hrsample
#devtools::install_github("harryahlas/hrsample")
hrsample::hrsampleCreateSQLite("my_db.sqlite3")
# Connect to database
con <- dbConnect(SQLite(),'my_db.sqlite3')
# Retrieve deskhistory (point in time table)
dh <- dbGetQuery(con, "SELECT * FROM DESKHISTORY")
# Sample view
sample_employee_num <- sample(dh$employee_num,1)
dh %>% filter(employee_num == sample_employee_num)
# Convert SQLite date fields from text to date, remove promotions
dh <- dh %>%
mutate(desk_id_start_date = as.Date(desk_id_start_date),
desk_id_end_date = as.Date(desk_id_end_date)) %>%
select(-promotion_flag)
# Create empty deskhistory_trend table (monthly calendar table)
dh_trend <- tibble()
# Get list of all months, by end of month
start_date <- as.Date("1999-01-01")
end_date <- as.Date("2018-12-31")
month_list <- seq.Date(start_date, end_date, by = "month")
# Loop
for (i in 1:length(month_list)) {
dh_trend_active <- dh %>%
filter(desk_id_start_date <= ceiling_date(month_list[i], "month") - 1,
desk_id_end_date >= ceiling_date(month_list[i], "month") - 1) %>%
filter(termination_flag == 0 | desk_id_end_date != ceiling_date(month_list[i], "month") - 1) %>%
mutate(trend_month = month_list[i],
termination_flag = 0)
dh_trend_term <- dh %>%
filter(termination_flag == 1,
desk_id_end_date <= ceiling_date(month_list[i], "month") - 1,
desk_id_end_date >= month_list[i]
) %>%
mutate(trend_month = month_list[i])
dh_trend <- bind_rows(dh_trend, dh_trend_active, dh_trend_term)
}
# View results
dh_trend %>% sample_n(3)
# Convert date columns for SQLite
dh_trend$desk_id_start_date <- format(dh_trend$desk_id_start_date, "%Y-%m-%d")
dh_trend$desk_id_end_date <- format(dh_trend$desk_id_end_date, "%Y-%m-%d")
dh_trend$trend_month <- format(dh_trend$trend_month, "%Y-%m-%d")
# Add Job title
dj <- dbGetQuery(con, "SELECT * FROM DESKJOB")
dh_trend <- dh_trend %>%
left_join(dj)
# Add rollup view
ru <- dbGetQuery(con, "SELECT * FROM ROLLUP")
# Remove the CEO columns
ru <- ru %>%
select(-lvl00_desk_id, - lvl00_org)
# Join rollup data
dh_trend <- dh_trend %>%
left_join(ru, by = c("desk_id" = "lvl04_desk_id"))
# Add the employee's name
ei <- dbGetQuery(con, "SELECT * FROM EMPLOYEEINFO")
dh_trend <- dh_trend %>%
left_join(ei %>% select(employee_num,
last_name,
first_name))
# Reorder columns
dh_trend <- dh_trend %>%
select(trend_month,
employee_num,
last_name,
first_name,
job_name,
depth,
everything())
# View
dh_trend %>% sample_n(3)
# Upload new table employee_trend
dbWriteTable(con, "employee_trend", dh_trend, overwrite = TRUE)
# See results
et_sample <- dbGetQuery(con, "SELECT * FROM EMPLOYEE_TREND ORDER BY RANDOM() LIMIT 3")
glimpse(et_sample)
# Close connection
dbDisconnect(con)
library(RCurl)
setwd("C:\\Development\\github\\blog")
blog_files_all <- list.files(getwd(),
#pattern=(".html"),
full.names=F,
recursive = TRUE)
# do not change this file or image files
blog_files <- blog_files_all[blog_files_all != "scripts/updateURLs.R"]
blog_files <- blog_files[grepl(blog_files,pattern = "/images/") != TRUE]
blog_files <- blog_files[grepl(blog_files,pattern = "jpg|png|gif") != TRUE]
pw <- "3mypj5xh"
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
readClipboard()
setwd(readClipboard())
if (file.exists("my_db.sqlite3")) {file.remove("my_db.sqlite3")}
# Set up environment
library(tidyverse)
library(RSQLite)
library(lubridate)
# Load hrsample
#devtools::install_github("harryahlas/hrsample")
hrsample::hrsampleCreateSQLite("my_db.sqlite3")
# Retrieve deskhistory (point in time table)
dh <- dbGetQuery(con, "SELECT * FROM DESKHISTORY")
# Connect to database
con <- dbConnect(SQLite(),'my_db.sqlite3')
# Retrieve deskhistory (point in time table)
dh <- dbGetQuery(con, "SELECT * FROM DESKHISTORY")
# Sample view
sample_employee_num <- sample(dh$employee_num,1)
dh %>% filter(employee_num == sample_employee_num)
# Convert SQLite date fields from text to date, remove promotions
dh <- dh %>%
mutate(desk_id_start_date = as.Date(desk_id_start_date),
desk_id_end_date = as.Date(desk_id_end_date)) %>%
select(-promotion_flag)
# Create empty deskhistory_trend table (monthly calendar table)
dh_trend <- tibble()
# Get list of all months, by end of month
start_date <- as.Date("1999-01-01")
end_date <- as.Date("2018-12-31")
month_list <- seq.Date(start_date, end_date, by = "month")
month_list
month_list[1:5]
# View month_list
month_list[1:5]
library(RCurl)
setwd("C:\\Development\\github\\blog")
blog_files_all <- list.files(getwd(),
#pattern=(".html"),
full.names=F,
recursive = TRUE)
# do not change this file or image files
blog_files <- blog_files_all[blog_files_all != "scripts/updateURLs.R"]
blog_files <- blog_files[grepl(blog_files,pattern = "/images/") != TRUE]
blog_files <- blog_files[grepl(blog_files,pattern = "jpg|png|gif") != TRUE]
# Make files for server ---------------------------------------------------
#local_url <- "C:\\\\Development\\\\github\\\\blog\\\\public"
#new_url <- "http://earlydemise.com/blog/public"
# local_url <- "C:\\\\Development\\\\github\\\\blog\\\\public"
# new_url <- "http://earlydemise.com/blog/public"
#
#
# for(blog_file in blog_files) {
#   x <- readLines(blog_file)
#   y <- gsub(local_url, new_url, x)
#   cat(y, file=blog_file, sep="\n")
# }
# Reap --------------------------------------------------------------------
# (enter pw first)
# Note: prior to reap, make sure new folders are created
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
pw <- "3mypj5xh"
library(RCurl)
setwd("C:\\Development\\github\\blog")
blog_files_all <- list.files(getwd(),
#pattern=(".html"),
full.names=F,
recursive = TRUE)
# do not change this file or image files
blog_files <- blog_files_all[blog_files_all != "scripts/updateURLs.R"]
blog_files <- blog_files[grepl(blog_files,pattern = "/images/") != TRUE]
blog_files <- blog_files[grepl(blog_files,pattern = "jpg|png|gif") != TRUE]
# Make files for server ---------------------------------------------------
#local_url <- "C:\\\\Development\\\\github\\\\blog\\\\public"
#new_url <- "http://earlydemise.com/blog/public"
# local_url <- "C:\\\\Development\\\\github\\\\blog\\\\public"
# new_url <- "http://earlydemise.com/blog/public"
#
#
# for(blog_file in blog_files) {
#   x <- readLines(blog_file)
#   y <- gsub(local_url, new_url, x)
#   cat(y, file=blog_file, sep="\n")
# }
# Reap --------------------------------------------------------------------
# (enter pw first)
# Note: prior to reap, make sure new folders are created
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
