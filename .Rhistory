filter(!employee_num %in% deskhistory_table$employee_num)
if (nrow(temp_deskhistory_table) == 0) {
print(paste("Not enough employees in", hierarchy_table$state_present[i], "- Please remove desk_id", i))
desk_ids_for_removal <- desk_ids_for_removal %>%
bind_rows(hierarchy_table[i,])
next
}
# if there is an employee from that state then  add
temp_deskhistory_table <- temp_deskhistory_table %>%
sample_n(1)
# Process for orgs without state names
} else {
temp_deskhistory_table <- employeeinfo_table %>%
filter(!employee_num %in% deskhistory_table$employee_num) %>%
sample_n(1)
}
temp_days_in_job <- round(rgamma(1, shape=3.777666, scale=1000/3.777666),0)
temp_end_date = hierarchy_start_date + temp_days_in_job
temp_end_date = if_else(temp_end_date < max_date, temp_end_date, as.Date("2999-01-01"))
termination_flag <- sample(c("Termination", "Not Termination"), 1, prob=c(0.10, 0.95), replace=TRUE)
termination_flag <- if_else(temp_end_date == as.Date("2999-01-01"),  "Not Termination", termination_flag) #if it is the last end date then it can't be a termination
# Assign job names.  Use hierarchy level to determine job name if they are in top tiers
# Else they are individual contributor
temp_desk_id <- hierarchy_table$desk_id[i]
temp_job <- case_when(hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 0 ~ "CEO",
hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 1 ~ "Business Leader",
hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 2 ~ "Department Leader",
hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 3 ~ "Regional Leader",
TRUE ~ "Individual Contributor")
# If they are IC then look at the probabilities in the hierarchy_spread file, originall sourced from jobs table
if (temp_job == "Individual Contributor") {
temp_special_job_probabilities <- hierarchy_spread %>%
filter(desk_id == temp_desk_id) %>%
select(job_name, pct_of_lob)
temp_special_job_probabilities_flag <- if_else(is.na(sum(temp_special_job_probabilities$pct_of_lob)),
"other",
"special")
if (temp_special_job_probabilities_flag == "special") {
#do special calculation if LOB has specific job distribution
temp_potential_jobs <- c(temp_special_job_probabilities$job_name,"other")
temp_potential_jobs_probabilities <- c(temp_special_job_probabilities$pct_of_lob,
1- sum(temp_special_job_probabilities$pct_of_lob))
temp_job <- sample(temp_potential_jobs,
1,
prob=temp_potential_jobs_probabilities, replace=TRUE)
} else if (temp_special_job_probabilities_flag == "other") {
temp_job <- "other"
}
temp_job <- case_when(temp_job != "other" ~ temp_job,
temp_job == "other" ~ jobs %>%
filter(is.na(pct_of_lob)) %>%
select(job_name) %>%
sample_n(1) %>% # Randomly select another job
as.character())
# if there are no
}
temp_deskhistory_table <- temp_deskhistory_table %>%
mutate(desk_id = hierarchy_table$desk_id[i],
job_name = temp_job,
start_date = hierarchy_start_date,
end_date = temp_end_date,
termination_flag = termination_flag)
deskhistory_table <- bind_rows(deskhistory_table, temp_deskhistory_table)
print(i)
}
temp_potential_jobs_probabilities
deskhistory_table = tibble(employee_num = as.integer(""))
desk_ids_for_removal = data.frame()
set.seed(555)
### get hierachy with levels
# Query to get hierarchy levels of all desk_ids ---------------------------
hierarchy_with_depth.sql <- read_file("scripts/hierarchy_with_depth.sql")
hierarchy_with_depth <- dbGetQuery(HRSAMPLE, hierarchy_with_depth.sql)
# Rollup
hierarchy_spread <- hierarchy_table %>%
mutate(lvl00_desk_id = 0,
lvl00_org = "CEO") %>%
select(lvl00_desk_id,
lvl00_org,
everything()) %>%
filter(parent_id == 1) %>%
rename(lvl01_desk_id = desk_id,
lvl01_org = org) %>%
select(-parent_id, -state_present, -state_flag) %>%
left_join(hierarchy_table, by = c("lvl01_desk_id" = "parent_id")) %>%
rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
select(-state_present, -state_flag) %>%
left_join(hierarchy_table, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
select(-state_present, -state_flag) %>%
left_join(hierarchy_table, by = c("lvl03_desk_id" = "parent_id")) %>%
left_join(jobs %>%
filter(!is.na(single_lob)) %>%
select(single_lob, job_name, pct_of_lob),
by = c("lvl01_org" = "single_lob"))# select(-proportion)
for (i in (1:nrow(hierarchy_table))) {
# Process for orgs with state names
if(hierarchy_table$state_flag[i] == TRUE) {
temp_deskhistory_table <- state_list %>%
filter(region == hierarchy_table$state_present[i]) %>%
left_join(employeeinfo_table, by = c("State short" = "state" )) %>%
rename(state = `State short`) %>%
select(-region) %>%
filter(!employee_num %in% deskhistory_table$employee_num)
if (nrow(temp_deskhistory_table) == 0) {
print(paste("Not enough employees in", hierarchy_table$state_present[i], "- Please remove desk_id", i))
desk_ids_for_removal <- desk_ids_for_removal %>%
bind_rows(hierarchy_table[i,])
next
}
# if there is an employee from that state then  add
temp_deskhistory_table <- temp_deskhistory_table %>%
sample_n(1)
# Process for orgs without state names
} else {
temp_deskhistory_table <- employeeinfo_table %>%
filter(!employee_num %in% deskhistory_table$employee_num) %>%
sample_n(1)
}
temp_days_in_job <- round(rgamma(1, shape=3.777666, scale=1000/3.777666),0)
temp_end_date = hierarchy_start_date + temp_days_in_job
temp_end_date = if_else(temp_end_date < max_date, temp_end_date, as.Date("2999-01-01"))
termination_flag <- sample(c("Termination", "Not Termination"), 1, prob=c(0.10, 0.95), replace=TRUE)
termination_flag <- if_else(temp_end_date == as.Date("2999-01-01"),  "Not Termination", termination_flag) #if it is the last end date then it can't be a termination
# Assign job names.  Use hierarchy level to determine job name if they are in top tiers
# Else they are individual contributor
temp_desk_id <- hierarchy_table$desk_id[i]
temp_job <- case_when(hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 0 ~ "CEO",
hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 1 ~ "Business Leader",
hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 2 ~ "Department Leader",
hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 3 ~ "Regional Leader",
TRUE ~ "Individual Contributor")
# If they are IC then look at the probabilities in the hierarchy_spread file, originall sourced from jobs table
if (temp_job == "Individual Contributor") {
temp_special_job_probabilities <- hierarchy_spread %>%
filter(desk_id == temp_desk_id) %>%
select(job_name, pct_of_lob)
temp_special_job_probabilities_flag <- if_else(is.na(sum(temp_special_job_probabilities$pct_of_lob)),
"other",
"special")
if (temp_special_job_probabilities_flag == "special") {
#do special calculation if LOB has specific job distribution
temp_potential_jobs <- c(temp_special_job_probabilities$job_name,"other")
temp_potential_jobs_probabilities <- c(temp_special_job_probabilities$pct_of_lob,
1- sum(temp_special_job_probabilities$pct_of_lob))
temp_job <- sample(temp_potential_jobs,
1,
prob=temp_potential_jobs_probabilities, replace=TRUE)
} else if (temp_special_job_probabilities_flag == "other") {
temp_job <- "other"
}
temp_job <- case_when(temp_job != "other" ~ temp_job,
temp_job == "other" ~ jobs %>%
filter(is.na(pct_of_lob)) %>%
select(job_name) %>%
sample_n(1) %>% # Randomly select another job
as.character())
# if there are no
}
temp_deskhistory_table <- temp_deskhistory_table %>%
mutate(desk_id = hierarchy_table$desk_id[i],
job_name = temp_job,
start_date = hierarchy_start_date,
end_date = temp_end_date,
termination_flag = termination_flag)
deskhistory_table <- bind_rows(deskhistory_table, temp_deskhistory_table)
print(i)
}
# view des
desk_ids_for_removal
# Check for duplicate employees
deskhistory_table %>%
n_distinct(employee_num)
# Check for duplicate employees
deskhistory_table %>%
n_distinct(employee_num)
deskhistory_table
# Check for duplicate employees
deskhistory_table %>%
select(employee_num) %>%
n_distinct()
# Check for duplicate employees
deskhistory_table %>%
select(employee_num) %>%
n_distinct() == rownum(deskhistory_table)
# Check for duplicate employees
deskhistory_table %>%
select(employee_num) %>%
n_distinct() == nrow(deskhistory_table)
deskhistory_table %>%
select(first_name, last_name) %>%
n_distinct() == nrow(deskhistory_table)
checktable <- hierarchy_table  %>% left_join(deskhistory_table)
View(checktable)
df <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory")
View(df)
dbExecute(HRSAMPLE, "CREATE TABLE employeeinfo2 (
employee_num INT (11) AUTO_INCREMENT PRIMARY KEY,
first_name VARCHAR (255),
last_name VARCHAR (255),
hire_date DATE,
city VARCHAR (255),
state  VARCHAR (255) )
;")
# Build deskhistory table -------------------------------------------------
# dbExecute(HRSAMPLE, "DROP TABLE deskhistory")
dbExecute(HRSAMPLE, "CREATE TABLE deskhistory2 (
employee_num INT (11),
desk_id INT (10),
desk_id_start_date DATE,
desk_id_end_date DATE,
termination_flag INT (8),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (desk_id) REFERENCES hierarchy (desk_id)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Build deskhistory table -------------------------------------------------
# dbExecute(HRSAMPLE, "DROP TABLE deskhistory")
dbExecute(HRSAMPLE, "CREATE TABLE deskhistory (
employee_num INT (11),
desk_id INT (10) unsigned,
desk_id_start_date DATE,
desk_id_end_date DATE,
termination_flag INT (8),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (desk_id) REFERENCES hierarchy (desk_id)  ON DELETE CASCADE ON UPDATE CASCADE
);")
# Build deskhistory table -------------------------------------------------
# dbExecute(HRSAMPLE, "DROP TABLE deskhistory")
dbExecute(HRSAMPLE, "CREATE TABLE deskhistory2 (
employee_num INT (11),
desk_id INT (10) unsigned,
desk_id_start_date DATE,
desk_id_end_date DATE,
termination_flag INT (8),
FOREIGN KEY (employee_num) REFERENCES employeeinfo (employee_num)  ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (desk_id) REFERENCES hierarchy (desk_id)  ON DELETE CASCADE ON UPDATE CASCADE
);")
View(deskhistory_table)
# Filter out NAs
deskhistory_table <- deskhistory_table %>%
filter(!is.na(employee_num))
colnames(df)
# Function to insert rows to deskhistory
create_insert_deskhistory <- function(employee_num,
desk_id,
desk_id_start_date,
desk_id_end_date,
termination_flag,
database = HRSAMPLE) {
insert_deskhistory_sql <- paste0(
"INSERT INTO deskhistory (employee_num, desk_id, desk_id_start_date, desk_id_end_date, termination_flag) VALUES('",
employee_num, "','",
desk_id, "','",
desk_id_start_date, "','",
desk_id_end_date, "','",
termination_flag, "');")
print(insert_deskhistory_sql)
dbExecute(database, insert_deskhistory_sql)
}
# Populate table
#for (i in (1:nrow(deskhistory_table))) {
for (i in (1:3)) {
create_insert_deskhistory(deskhistory_table$employee_num[i],
deskhistory_table$desk_id[i],
deskhistory_table$start_date[i],
deskhistory_table$end_date[i],
deskhistory_table$termination_flag[i])
}
deskhistory_table = tibble(employee_num = as.integer(""))
desk_ids_for_removal = data.frame()
set.seed(555)
### get hierachy with levels
# Query to get hierarchy levels of all desk_ids ---------------------------
hierarchy_with_depth.sql <- read_file("scripts/hierarchy_with_depth.sql")
hierarchy_with_depth <- dbGetQuery(HRSAMPLE, hierarchy_with_depth.sql)
# Rollup
hierarchy_spread <- hierarchy_table %>%
mutate(lvl00_desk_id = 0,
lvl00_org = "CEO") %>%
select(lvl00_desk_id,
lvl00_org,
everything()) %>%
filter(parent_id == 1) %>%
rename(lvl01_desk_id = desk_id,
lvl01_org = org) %>%
select(-parent_id, -state_present, -state_flag) %>%
left_join(hierarchy_table, by = c("lvl01_desk_id" = "parent_id")) %>%
rename(lvl02_desk_id = desk_id,
lvl02_org = org) %>%
select(-state_present, -state_flag) %>%
left_join(hierarchy_table, by = c("lvl02_desk_id" = "parent_id")) %>%
rename(lvl03_desk_id = desk_id,
lvl03_org = org) %>%
select(-state_present, -state_flag) %>%
left_join(hierarchy_table, by = c("lvl03_desk_id" = "parent_id")) %>%
left_join(jobs %>%
filter(!is.na(single_lob)) %>%
select(single_lob, job_name, pct_of_lob),
by = c("lvl01_org" = "single_lob"))# select(-proportion)
for (i in (1:nrow(hierarchy_table))) {
# Process for orgs with state names
if(hierarchy_table$state_flag[i] == TRUE) {
temp_deskhistory_table <- state_list %>%
filter(region == hierarchy_table$state_present[i]) %>%
left_join(employeeinfo_table, by = c("State short" = "state" )) %>%
rename(state = `State short`) %>%
select(-region) %>%
filter(!employee_num %in% deskhistory_table$employee_num)
if (nrow(temp_deskhistory_table) == 0) {
print(paste("Not enough employees in", hierarchy_table$state_present[i], "- Please remove desk_id", i))
desk_ids_for_removal <- desk_ids_for_removal %>%
bind_rows(hierarchy_table[i,])
next
}
# if there is an employee from that state then  add
temp_deskhistory_table <- temp_deskhistory_table %>%
sample_n(1)
# Process for orgs without state names
} else {
temp_deskhistory_table <- employeeinfo_table %>%
filter(!employee_num %in% deskhistory_table$employee_num) %>%
sample_n(1)
}
temp_days_in_job <- round(rgamma(1, shape=3.777666, scale=1000/3.777666),0)
temp_end_date = hierarchy_start_date + temp_days_in_job
temp_end_date = if_else(temp_end_date < max_date, temp_end_date, as.Date("2999-01-01"))
termination_flag_text <- sample(c("Termination", "Not Termination"), 1, prob=c(0.10, 0.95), replace=TRUE)
termination_flag_text <- if_else(temp_end_date == as.Date("2999-01-01"),  "Not Termination", termination_flag_text) #if it is the last end date then it can't be a termination
termination_flag <- if_else(termination_flag_text == "Termination", 1, 0)
# Assign job names.  Use hierarchy level to determine job name if they are in top tiers
# Else they are individual contributor
temp_desk_id <- hierarchy_table$desk_id[i]
temp_job <- case_when(hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 0 ~ "CEO",
hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 1 ~ "Business Leader",
hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 2 ~ "Department Leader",
hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]== 3 ~ "Regional Leader",
TRUE ~ "Individual Contributor")
# If they are IC then look at the probabilities in the hierarchy_spread file, originall sourced from jobs table
if (temp_job == "Individual Contributor") {
temp_special_job_probabilities <- hierarchy_spread %>%
filter(desk_id == temp_desk_id) %>%
select(job_name, pct_of_lob)
temp_special_job_probabilities_flag <- if_else(is.na(sum(temp_special_job_probabilities$pct_of_lob)),
"other",
"special")
if (temp_special_job_probabilities_flag == "special") {
#do special calculation if LOB has specific job distribution
temp_potential_jobs <- c(temp_special_job_probabilities$job_name,"other")
temp_potential_jobs_probabilities <- c(temp_special_job_probabilities$pct_of_lob,
1- sum(temp_special_job_probabilities$pct_of_lob))
temp_job <- sample(temp_potential_jobs,
1,
prob=temp_potential_jobs_probabilities, replace=TRUE)
} else if (temp_special_job_probabilities_flag == "other") {
temp_job <- "other"
}
temp_job <- case_when(temp_job != "other" ~ temp_job,
temp_job == "other" ~ jobs %>%
filter(is.na(pct_of_lob)) %>%
select(job_name) %>%
sample_n(1) %>% # Randomly select another job
as.character())
# if there are no
}
temp_deskhistory_table <- temp_deskhistory_table %>%
mutate(desk_id = hierarchy_table$desk_id[i],
job_name = temp_job,
start_date = hierarchy_start_date,
end_date = temp_end_date,
termination_flag = termination_flag)
deskhistory_table <- bind_rows(deskhistory_table, temp_deskhistory_table)
print(i)
}
# Filter out NAs
deskhistory_table <- deskhistory_table %>%
filter(!is.na(employee_num))
# view desk_ids that were not filled due to not enough TMs from that state.
desk_ids_for_removal
checktable <- hierarchy_table  %>% left_join(deskhistory_table)
# Check for duplicate employees
deskhistory_table %>%
select(employee_num) %>%
n_distinct() == nrow(deskhistory_table)
deskhistory_table %>%
select(first_name, last_name) %>%
n_distinct() == nrow(deskhistory_table)
df <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory")
# Function to insert rows to deskhistory
create_insert_deskhistory <- function(employee_num,
desk_id,
desk_id_start_date,
desk_id_end_date,
termination_flag,
database = HRSAMPLE) {
insert_deskhistory_sql <- paste0(
"INSERT INTO deskhistory (employee_num, desk_id, desk_id_start_date, desk_id_end_date, termination_flag) VALUES('",
employee_num, "','",
desk_id, "','",
desk_id_start_date, "','",
desk_id_end_date, "','",
termination_flag, "');")
print(insert_deskhistory_sql)
dbExecute(database, insert_deskhistory_sql)
}
# Populate table
#for (i in (1:nrow(deskhistory_table))) {
for (i in (1:3)) {
create_insert_deskhistory(deskhistory_table$employee_num[i],
deskhistory_table$desk_id[i],
deskhistory_table$start_date[i],
deskhistory_table$end_date[i],
deskhistory_table$termination_flag[i])
}
df <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory")
View(df)
deskhistory_table %>% count(termination_flag, termination_flag_text)
deskhistory_table %>% count(termination_flag)
dbExecute(HRSAMPLE, "DELETE FROM deskhistory")
df <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory")
# Populate table
for (i in (1:nrow(deskhistory_table))) {
create_insert_deskhistory(deskhistory_table$employee_num[i],
deskhistory_table$desk_id[i],
deskhistory_table$start_date[i],
deskhistory_table$end_date[i],
deskhistory_table$termination_flag[i])
}
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
dbExecute(HRSAMPLE, "create table deskhistory2 select * from deskhistory;")
# View table
deskhistory_table <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory2")
setwd("C:\\Development\\R code\\database")
#install.packages("RMariaDB")
library(RMariaDB)
library(tidyverse)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Retrieve deskhistorydup table
deskhistory_table <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory2")
deskhistory_table <- deskhistory_table %>%
arrange()
deskhistory_table <- deskhistory_table %>%
arrange(desk_id_end_date)
View(deskhistory_table)
deskhistory_table_add <- deskhistory_table %>%
filter(employee_num == 3218)
deskhistory_table_add
source('C:/Development/R code/database/04_grow_employee_desk_history.R')
deskhistory_table_add$desk_id_start_date[1] <- as.Date("1999-03-18")
deskhistory_table_add$desk_id_end_date[1] <- as.Date("2000-01-01")
deskhistory_table_add
deskhistory_table <- bind_rows(deskhistory_table, deskhistory_table_add)
# select most recent row for each employee
deskhistory_table_most_recent <- deskhistory_table %>%
arrange(desk_id_end_date) %>%
group_by(employee_num) %>%
filter(row_number() == 1)
View(deskhistory_table_most_recent)
# select most recent row for each employee
deskhistory_table_most_recent <- deskhistory_table %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
arrange(desk_id_end_date)
View(deskhistory_table_most_recent)
# select most recent row for each employee
deskhistory_table_most_recent <- deskhistory_table %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
arrange(desk_id_end_date) %>%
filter(employee_num = 3218)
# select most recent row for each employee
deskhistory_table_most_recent <- deskhistory_table %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
arrange(desk_id_end_date) %>%
filter(employee_num == 3218)
View(deskhistory_table_most_recent)
# Retrieve deskhistorydup table
deskhistory_table <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory2")
setwd("C:\\Development\\R code\\database")
#install.packages("RMariaDB")
library(RMariaDB)
library(tidyverse)
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
dbListTables(HRSAMPLE)
# Retrieve deskhistorydup table
deskhistory_table <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory2")
# select most recent row for each employee
deskhistory_table_most_recent <- deskhistory_table %>%
arrange(desc(desk_id_end_date)) %>%
group_by(employee_num) %>%
filter(row_number() == 1) %>%
arrange(desk_id_end_date)
error_log <- data.frame(employee_num = NULL, desk_id = NULL)
error_log <- data.frame(employee_num = integer(), desk_id = NULL)
error_log <- data.frame(employee_num = integer(), desk_id = integer())
hierarchy_with_depth.sql <- read_file("scripts/hierarchy_with_depth.sql")
hierarchy_with_depth <- dbGetQuery(HRSAMPLE, hierarchy_with_depth.sql)
temp_desk_id <- deskhistory_table_most_recent$desk_id[i]
# Select 1st desk_id
i=1
temp_desk_id <- deskhistory_table_most_recent$desk_id[i]
temp_depth <- hierarchy_with_depth$depth[hierarchy_with_depth$desk_id == temp_desk_id]
error_log <- data.frame(employee_num = integer(), desk_id = integer(), issue = character())
