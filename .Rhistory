* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
View(salary_increases_standard)
# Starting salary plug for later function
starting_salary_table <-  create_starting_salary(employee_num_temp)
starting_salary <- starting_salary_table$salary[1]
# Bind starting salary, promotions/new desk, and standard increases
salaryhistory_table_append <- bind_rows(starting_salary_table,
salary_increases_promo_new_desk %>%
select(employee_num, salary_increase_date, salary_increase),
salary_increases_standard %>%
select(employee_num, salary_increase_date, salary_increase)) %>%
arrange(salary_increase_date) %>%
mutate(salary = starting_salary * cumprod(1 + salary_increase))
View(salaryhistory_table_append)
starting_salary_table,
salary_increases_promo_new_desk
starting_salary_table
salary_increases_promo_new_desk %>%
select(employee_num, salary_increase_date, salary_increase)
salary_increases_standard %>%
select(employee_num, salary_increase_date, salary_increase)
View(salary_increases_standard)
salary_increases_standard <- salary_increases_standard %>%
left_join(prime_rate, by = c("review_year" = "year")) %>%
left_join(review_year_list_append %>% select(review_year, perf_review_score)) %>%
rowwise() %>%
mutate(employee_num = employee_num_temp,
prime_rate_add = max((prime_rate_est - .03) / 2, 0),
perf_review_add = case_when(perf_review_score == 5 ~ .03,
perf_review_score == 4 ~ .015,
TRUE ~ 0),
no_merit_multiplier = if_else(perf_review_score < 3, 0, 1)) %>%
mutate(salary_increase = (sample(seq(standard_salary_increase_min, standard_salary_increase_max,.001),1)
+ prime_rate_add
+ perf_review_add)
* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
salary_increases_standard <- salary_increases_standard %>%
left_join(prime_rate, by = c("review_year" = "year")) %>%
left_join(review_year_list_append %>% select(review_year, perf_review_score)) %>%
rowwise() %>%
mutate(employee_num = employee_num_temp,
prime_rate_add = max((prime_rate_est - .03) / 2, 0),
perf_review_add = case_when(perf_review_score == 5 ~ .03,
perf_review_score == 4 ~ .015,
TRUE ~ 0),
no_merit_multiplier = if_else(perf_review_score < 3, 0, 1)) %>%
mutate(salary_increase = (sample(seq(standard_salary_increase_min, standard_salary_increase_max,.001),1)
+ prime_rate_add
+ perf_review_add)
* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
rm(salary_increases_standard)
salary_increases_standard <- salary_increases_standard %>%
left_join(prime_rate, by = c("review_year" = "year")) %>%
left_join(review_year_list_append %>% select(review_year, perf_review_score)) %>%
rowwise() %>%
mutate(employee_num = employee_num_temp,
prime_rate_add = max((prime_rate_est - .03) / 2, 0),
perf_review_add = case_when(perf_review_score == 5 ~ .03,
perf_review_score == 4 ~ .015,
TRUE ~ 0),
no_merit_multiplier = if_else(perf_review_score < 3, 0, 1)) %>%
mutate(salary_increase = (sample(seq(standard_salary_increase_min, standard_salary_increase_max,.001),1)
+ prime_rate_add
+ perf_review_add)
* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
# Create salary increases for years without promotions and job changes
# tie this to prime rate and maybe LOB, should be 1-7%
####ERROR HERE
salary_increases_standard <- tibble(review_year = review_years) %>%
anti_join(salary_increases_promo_new_desk, by = c("review_year" = "merit_increase_remove_year"))
salary_increases_standard <- salary_increases_standard %>%
left_join(prime_rate, by = c("review_year" = "year")) %>%
left_join(review_year_list_append %>% select(review_year, perf_review_score)) %>%
rowwise() %>%
mutate(employee_num = employee_num_temp,
prime_rate_add = max((prime_rate_est - .03) / 2, 0),
perf_review_add = case_when(perf_review_score == 5 ~ .03,
perf_review_score == 4 ~ .015,
TRUE ~ 0),
no_merit_multiplier = if_else(perf_review_score < 3, 0, 1)) %>%
mutate(salary_increase = (sample(seq(standard_salary_increase_min, standard_salary_increase_max,.001),1)
+ prime_rate_add
+ perf_review_add)
* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
# Create salary increases for years without promotions and job changes
# tie this to prime rate and maybe LOB, should be 1-7%
####ERROR HERE
salary_increases_standard <- tibble(review_year = review_years) %>%
anti_join(salary_increases_promo_new_desk, by = c("review_year" = "merit_increase_remove_year"))
salary_increases_standard <- salary_increases_standard %>%
left_join(prime_rate, by = c("review_year" = "year")) %>%
left_join(review_year_list_append %>% select(review_year, perf_review_score)) %>%
rowwise() %>%
mutate(employee_num = employee_num_temp,
prime_rate_add = max((prime_rate_est - .03) / 2, 0),
perf_review_add = case_when(perf_review_score == 5 ~ .03,
perf_review_score == 4 ~ .015,
TRUE ~ 0),
no_merit_multiplier = if_else(perf_review_score %in% c(1,2), 0, 1)) %>%
mutate(salary_increase = (sample(seq(standard_salary_increase_min, standard_salary_increase_max,.001),1)
+ prime_rate_add
+ perf_review_add)
* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
review_year_list <- tibble()
salaryhistory_table <- tibble()
for (i in 1:nrow(employee_list)) {
employee_num_temp <- employee_list$employee_num[i]
# Minimum review value reset
min_review_value <- 1
# Pull employee's entire desk history
deskhistory_table_temp <- deskhistory_table %>%
filter(employee_num == employee_num_temp)
# Identify full years employee was active
# Find years with promotions
promotions_temp <- deskhistory_table_temp %>%
filter(promotion_flag == 1) %>%
mutate(promotion_year = year(desk_id_start_date)) %>%
select(promotion_year)
# See if employee has any promotions
has_promotion <- nrow(promotions_temp) > 0
# if they have any promotions then their minimum perf_review = 3
if (has_promotion == TRUE) {min_review_value <- 3}
# for each row, identify the full years they were active.
company_start <- min(deskhistory_table_temp$desk_id_start_date)
company_start_month <- month(company_start)
company_start_year <- year(company_start)
company_end <- min(max(deskhistory_table_temp$desk_id_end_date), max_date)
company_end_month <- month(company_end)
company_end_year <- year(company_end)
# if start month is before october then count that year, else count next year
review_year_start <- case_when(company_start_month < 10 ~ company_start_year,
(company_start_month >= 10) & (company_end_year > (company_start_year + 1)) ~   company_start_year + 1,
TRUE ~ 0)
#####IF REVIEWS ARE MISSING MAYBE BECAUSE CHANGED LINE BELOW
review_year_end <- case_when(company_end_month > 3 ~ company_end_year - 1,
#company_end_month <= 3 ~ max(company_end_year - 2, review_year_start),
company_end_month <= 3 ~ company_end_year - 2,
TRUE ~ 0)
if (review_year_start == 0 | review_year_end == 0) next
if (review_year_start > review_year_end) next
review_years <- seq(review_year_start, review_year_end, 1)
# Calculate reviews
review_year_list_append <- tibble(employee_numx = rep(employee_num_temp, length(review_years)),
review_year = review_years,
review_date = as.Date(paste0(review_year + 1, "-03-01"))) %>%
fuzzy_left_join(deskhistory_table, by = c(
"employee_numx" = "employee_num",
"review_date" = "desk_id_start_date",
"review_date" = "desk_id_end_date"
),
match_fun = list(`==`, `>=`, `<=`)) %>%
select(-employee_numx) %>%
left_join(hierarchy_spread_all %>% select(desk_id, lvl01_org)) %>%
left_join(performance_review_ratios, by = c("lvl01_org" = "LOB")) %>%
arrange(review_year) %>%
mutate(next_year_promotion_flag = lead(promotion_flag)) %>% #did they have promotion the next year?
mutate(perf_review_score_4 = if_else(promotion_flag ==1, perf_review_score_4 * 2, perf_review_score_4),
perf_review_score_5 = if_else(promotion_flag ==1, perf_review_score_5 * 2, perf_review_score_5)) %>% #if so then double their chances of getting a 4 or 5
rowwise() %>%
# Calculate performance review
mutate(perf_review_score = max(sample(c(1,2,3,4,5,NA), 1,
prob= c(perf_review_score_1,
perf_review_score_2,
perf_review_score_3,
perf_review_score_4,
perf_review_score_5,
odds_of_no_review),
replace=TRUE),
min_review_value))
review_year_list <- bind_rows(review_year_list, review_year_list_append)
# Create salary increases for promotions and job changes
salary_increases_promo_new_desk <- deskhistory_table_temp %>%
# Remove increase for start dates at beginning of data
rowwise() %>%
mutate(salary_increase = case_when(
desk_id_start_date == hierarchy_start_date ~ 0,
### NEW added below line and needs testing
desk_id_start_date == min(desk_id_start_date) ~ 0,
TRUE ~ sample(seq(promo_new_desk_salary_increase_min,promo_new_desk_salary_increase_max,.005),1))) %>%
ungroup() %>%
mutate(new_desk_id = lag(desk_id) != desk_id) %>% # if it is a new desk_id d b/w oct 1 - april 30 then add year to list so no march 1 increas
mutate(merit_increase_remove_year = case_when(
(promotion_flag == 1 | new_desk_id == TRUE ) & month(desk_id_start_date) <= 4 ~ year(desk_id_start_date) - 1, # no merit increase if recently got promotion
(promotion_flag == 1 | new_desk_id == TRUE ) & month(desk_id_start_date) >= 10 ~ year(desk_id_start_date)  # or if got new deskid at end of last year
),
salary_increase_date = desk_id_start_date) %>%
filter(salary_increase > 0)
# create years for no increase
# if there was a promotion between Jan 1 and Apr 30 then add year to list so no march 1 increase
# if it is a new desk id b/w oct 1 - april 30 then add year to list so no march 1 increase
# Create salary increases for years without promotions and job changes
# tie this to prime rate and maybe LOB, should be 1-7%
####ERROR HERE
salary_increases_standard <- tibble(review_year = review_years) %>%
anti_join(salary_increases_promo_new_desk, by = c("review_year" = "merit_increase_remove_year"))
if(nrow(salary_increases_standard) == 0) next # needed to avoid error in next section
salary_increases_standard <- salary_increases_standard %>%
left_join(prime_rate, by = c("review_year" = "year")) %>%
left_join(review_year_list_append %>% select(review_year, perf_review_score)) %>%
rowwise() %>%
mutate(employee_num = employee_num_temp,
prime_rate_add = max((prime_rate_est - .03) / 2, 0),
perf_review_add = case_when(perf_review_score == 5 ~ .03,
perf_review_score == 4 ~ .015,
TRUE ~ 0),
no_merit_multiplier = if_else(perf_review_score %in% c(1,2), 0, 1)) %>%
mutate(salary_increase = (sample(seq(standard_salary_increase_min, standard_salary_increase_max,.001),1)
+ prime_rate_add
+ perf_review_add)
* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
### enhancemnt: if possible make it higher if they got 4 or 5
# Starting salary plug for later function
starting_salary_table <-  create_starting_salary(employee_num_temp)
starting_salary <- starting_salary_table$salary[1]
# Bind starting salary, promotions/new desk, and standard increases
salaryhistory_table_append <- bind_rows(starting_salary_table,
salary_increases_promo_new_desk %>%
select(employee_num, salary_increase_date, salary_increase),
salary_increases_standard %>%
select(employee_num, salary_increase_date, salary_increase)) %>%
arrange(salary_increase_date) %>%
mutate(salary = starting_salary * cumprod(1 + salary_increase))
if (!is.na(salaryhistory_table_append$salary[1])) {
print("death")
#next
}
salaryhistory_table <- bind_rows(salaryhistory_table, salaryhistory_table_append)
print(i)
}
#check NAs on salaryhistory
table(is.na(salaryhistory_table$salary))
####next: rerun everything and make sure no nas showing up under salary. if so look at salaryhistory table creation
#check NAs on salaryhistory
table(is.na(salaryhistory_table$salary))
salaryhistory_table_append$salary[1]
review_year_list <- tibble()
salaryhistory_table <- tibble()
for (i in 1:nrow(employee_list)) {
employee_num_temp <- employee_list$employee_num[i]
# Minimum review value reset
min_review_value <- 1
# Pull employee's entire desk history
deskhistory_table_temp <- deskhistory_table %>%
filter(employee_num == employee_num_temp)
# Identify full years employee was active
# Find years with promotions
promotions_temp <- deskhistory_table_temp %>%
filter(promotion_flag == 1) %>%
mutate(promotion_year = year(desk_id_start_date)) %>%
select(promotion_year)
# See if employee has any promotions
has_promotion <- nrow(promotions_temp) > 0
# if they have any promotions then their minimum perf_review = 3
if (has_promotion == TRUE) {min_review_value <- 3}
# for each row, identify the full years they were active.
company_start <- min(deskhistory_table_temp$desk_id_start_date)
company_start_month <- month(company_start)
company_start_year <- year(company_start)
company_end <- min(max(deskhistory_table_temp$desk_id_end_date), max_date)
company_end_month <- month(company_end)
company_end_year <- year(company_end)
# if start month is before october then count that year, else count next year
review_year_start <- case_when(company_start_month < 10 ~ company_start_year,
(company_start_month >= 10) & (company_end_year > (company_start_year + 1)) ~   company_start_year + 1,
TRUE ~ 0)
#####IF REVIEWS ARE MISSING MAYBE BECAUSE CHANGED LINE BELOW
review_year_end <- case_when(company_end_month > 3 ~ company_end_year - 1,
#company_end_month <= 3 ~ max(company_end_year - 2, review_year_start),
company_end_month <= 3 ~ company_end_year - 2,
TRUE ~ 0)
if (review_year_start == 0 | review_year_end == 0) next
if (review_year_start > review_year_end) next
review_years <- seq(review_year_start, review_year_end, 1)
# Calculate reviews
review_year_list_append <- tibble(employee_numx = rep(employee_num_temp, length(review_years)),
review_year = review_years,
review_date = as.Date(paste0(review_year + 1, "-03-01"))) %>%
fuzzy_left_join(deskhistory_table, by = c(
"employee_numx" = "employee_num",
"review_date" = "desk_id_start_date",
"review_date" = "desk_id_end_date"
),
match_fun = list(`==`, `>=`, `<=`)) %>%
select(-employee_numx) %>%
left_join(hierarchy_spread_all %>% select(desk_id, lvl01_org)) %>%
left_join(performance_review_ratios, by = c("lvl01_org" = "LOB")) %>%
arrange(review_year) %>%
mutate(next_year_promotion_flag = lead(promotion_flag)) %>% #did they have promotion the next year?
mutate(perf_review_score_4 = if_else(promotion_flag ==1, perf_review_score_4 * 2, perf_review_score_4),
perf_review_score_5 = if_else(promotion_flag ==1, perf_review_score_5 * 2, perf_review_score_5)) %>% #if so then double their chances of getting a 4 or 5
rowwise() %>%
# Calculate performance review
mutate(perf_review_score = max(sample(c(1,2,3,4,5,NA), 1,
prob= c(perf_review_score_1,
perf_review_score_2,
perf_review_score_3,
perf_review_score_4,
perf_review_score_5,
odds_of_no_review),
replace=TRUE),
min_review_value))
review_year_list <- bind_rows(review_year_list, review_year_list_append)
# Create salary increases for promotions and job changes
salary_increases_promo_new_desk <- deskhistory_table_temp %>%
# Remove increase for start dates at beginning of data
rowwise() %>%
mutate(salary_increase = case_when(
desk_id_start_date == hierarchy_start_date ~ 0,
### NEW added below line and needs testing
desk_id_start_date == min(desk_id_start_date) ~ 0,
TRUE ~ sample(seq(promo_new_desk_salary_increase_min,promo_new_desk_salary_increase_max,.005),1))) %>%
ungroup() %>%
mutate(new_desk_id = lag(desk_id) != desk_id) %>% # if it is a new desk_id d b/w oct 1 - april 30 then add year to list so no march 1 increas
mutate(merit_increase_remove_year = case_when(
(promotion_flag == 1 | new_desk_id == TRUE ) & month(desk_id_start_date) <= 4 ~ year(desk_id_start_date) - 1, # no merit increase if recently got promotion
(promotion_flag == 1 | new_desk_id == TRUE ) & month(desk_id_start_date) >= 10 ~ year(desk_id_start_date)  # or if got new deskid at end of last year
),
salary_increase_date = desk_id_start_date) %>%
filter(salary_increase > 0)
# create years for no increase
# if there was a promotion between Jan 1 and Apr 30 then add year to list so no march 1 increase
# if it is a new desk id b/w oct 1 - april 30 then add year to list so no march 1 increase
# Create salary increases for years without promotions and job changes
# tie this to prime rate and maybe LOB, should be 1-7%
####ERROR HERE
salary_increases_standard <- tibble(review_year = review_years) %>%
anti_join(salary_increases_promo_new_desk, by = c("review_year" = "merit_increase_remove_year"))
if(nrow(salary_increases_standard) == 0) next # needed to avoid error in next section
salary_increases_standard <- salary_increases_standard %>%
left_join(prime_rate, by = c("review_year" = "year")) %>%
left_join(review_year_list_append %>% select(review_year, perf_review_score)) %>%
rowwise() %>%
mutate(employee_num = employee_num_temp,
prime_rate_add = max((prime_rate_est - .03) / 2, 0),
perf_review_add = case_when(perf_review_score == 5 ~ .03,
perf_review_score == 4 ~ .015,
TRUE ~ 0),
no_merit_multiplier = if_else(perf_review_score %in% c(1,2), 0, 1)) %>%
mutate(salary_increase = (sample(seq(standard_salary_increase_min, standard_salary_increase_max,.001),1)
+ prime_rate_add
+ perf_review_add)
* no_merit_multiplier,
salary_increase_date = as.Date(paste0(review_year + 1, "-03-01")))
### enhancemnt: if possible make it higher if they got 4 or 5
# Starting salary plug for later function
starting_salary_table <-  create_starting_salary(employee_num_temp)
starting_salary <- starting_salary_table$salary[1]
# Bind starting salary, promotions/new desk, and standard increases
salaryhistory_table_append <- bind_rows(starting_salary_table,
salary_increases_promo_new_desk %>%
select(employee_num, salary_increase_date, salary_increase),
salary_increases_standard %>%
select(employee_num, salary_increase_date, salary_increase)) %>%
arrange(salary_increase_date) %>%
mutate(salary = starting_salary * cumprod(1 + salary_increase))
if (is.na(salaryhistory_table_append$salary[1])) {
print("skipped, initial salary missing")
next
}
salaryhistory_table <- bind_rows(salaryhistory_table, salaryhistory_table_append)
print(i)
}
save(review_year_list, file = "data/review_year_list.rda")
save(salaryhistory_table, file = "data/salaryhistory_table.rda")
####next: rerun everything and make sure no nas showing up under salary. if so look at salaryhistory table creation
#check NAs on salaryhistory
table(is.na(salaryhistory_table$salary))
table(is.na(salaryhistory_table$salary_increase))
table(is.na(salaryhistory_table$starting_salary_flag))
# Function to insert rows to performancereview
create_insert_performancereview <- function(employee_num,
review_year,
perf_review,
database = HRSAMPLE) {
insert_performancereview_sql <- paste0(
"INSERT INTO performancereview (employee_num, year, perf_review) VALUES('",
employee_num, "','",
review_year, "','",
perf_review, "');")
print(insert_performancereview_sql)
dbExecute(database, insert_performancereview_sql)
}
# Populate table
for (i in (1:nrow(review_year_list))) {
if (is.na(review_year_list$perf_review_score[i] == TRUE)) next
create_insert_performancereview(review_year_list$employee_num[i],
review_year_list$review_year[i],
review_year_list$perf_review_score[i])
}
# Function to insert rows to performancereview
create_insert_performancereview <- function(employee_num,
review_year,
perf_review,
database = HRSAMPLE) {
insert_performancereview_sql <- paste0(
"INSERT INTO performancereview (employee_num, year, perf_review) VALUES('",
employee_num, "','",
review_year, "','",
perf_review, "');")
print(insert_performancereview_sql)
dbExecute(database, insert_performancereview_sql)
}
# Populate table
for (i in (1:nrow(review_year_list))) {
if (is.na(review_year_list$perf_review_score[i] == TRUE)) next
create_insert_performancereview(review_year_list$employee_num[i],
review_year_list$review_year[i],
review_year_list$perf_review_score[i])
}
# Function to insert rows to salaryhistory
create_insert_salaryhistory <- function(employee_num,
salary_increase_date,
salary,
salary_increase,
starting_salary_flag,
database = HRSAMPLE) {
insert_salaryhistory_sql <- paste0(
"INSERT INTO salaryhistory (employee_num, salary_effective_date, salary, salary_increase, starting_salary_flag) VALUES('",
employee_num, "','",
salary_increase_date, "','",
salary, "','",
salary_increase, "','",
starting_salary_flag, "');")
print(insert_salaryhistory_sql)
dbExecute(database, insert_salaryhistory_sql)
}
table(is.na(salaryhistory_table$salary))
table(is.na(salaryhistory_table$salary_increase))
# Function to insert rows to salaryhistory
create_insert_salaryhistory <- function(employee_num,
salary_increase_date,
salary,
salary_increase,
starting_salary_flag,
database = HRSAMPLE) {
insert_salaryhistory_sql <- paste0(
"INSERT INTO salaryhistory (employee_num, salary_effective_date, salary, salary_increase, starting_salary_flag) VALUES('",
employee_num, "','",
salary_increase_date, "','",
salary, "','",
salary_increase, "','",
starting_salary_flag, "');")
print(insert_salaryhistory_sql)
dbExecute(database, insert_salaryhistory_sql)
}
# Function to insert rows to salaryhistory
create_insert_salaryhistory <- function(employee_num,
salary_increase_date,
salary,
salary_increase,
starting_salary_flag,
database = HRSAMPLE) {
insert_salaryhistory_sql <- paste0(
"INSERT INTO salaryhistory (employee_num, salary_effective_date, salary, salary_increase, starting_salary_flag) VALUES('",
employee_num, "','",
salary_increase_date, "','",
salary, "','",
salary_increase, "','",
starting_salary_flag, "');")
print(insert_salaryhistory_sql)
dbExecute(database, insert_salaryhistory_sql)
}
# Populate table ######ficcusbelow
for (i in (1:nrow(salaryhistory_table))) {
create_insert_salaryhistory(salaryhistory_table$employee_num[i],
salaryhistory_table$salary_increase_date[i],
salaryhistory_table$salary[i],
salaryhistory_table$salary_increase[i],
salaryhistory_table$starting_salary_flag[i])
}
View(salaryhistory_table)
is.na(salaryhistory_table$starting_salary_flag[i])
# Populate table ######ficcusbelow
for (i in (1:nrow(salaryhistory_table))) {
if is.na(salaryhistory_table$starting_salary_flag[i]) {
salaryhistory_table$starting_salary_flag[i] <- "N"
}
create_insert_salaryhistory(salaryhistory_table$employee_num[i],
salaryhistory_table$salary_increase_date[i],
salaryhistory_table$salary[i],
salaryhistory_table$salary_increase[i],
salaryhistory_table$starting_salary_flag[i])
}
# Populate table ######ficcusbelow
for (i in (1:nrow(salaryhistory_table))) {
salaryhistory_table$starting_salary_flag[i] <- if_else(is.na(salaryhistory_table$starting_salary_flag[i]),
"N",
salaryhistory_tabl)
create_insert_salaryhistory(salaryhistory_table$employee_num[i],
salaryhistory_table$salary_increase_date[i],
salaryhistory_table$salary[i],
salaryhistory_table$salary_increase[i],
salaryhistory_table$starting_salary_flag[i])
}
# Populate table ######ficcusbelow
for (i in (1:nrow(salaryhistory_table))) {
salaryhistory_table$starting_salary_flag[i] <- if_else(is.na(salaryhistory_table$starting_salary_flag[i]),
"N",
salaryhistory_table$starting_salary_flag[i])
create_insert_salaryhistory(salaryhistory_table$employee_num[i],
salaryhistory_table$salary_increase_date[i],
salaryhistory_table$salary[i],
salaryhistory_table$salary_increase[i],
salaryhistory_table$starting_salary_flag[i])
}
